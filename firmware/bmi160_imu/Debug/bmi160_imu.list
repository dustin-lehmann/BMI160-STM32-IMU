
bmi160_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08009c78  08009c78  00019c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d88  08009d88  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009d88  08009d88  00019d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d90  08009d90  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da0  08009da0  00019da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fbc  20000080  08009e24  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000203c  08009e24  0002203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000272c0  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055a3  00000000  00000000  000473b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d40  00000000  00000000  0004c958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001692  00000000  00000000  0004e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000084b6  00000000  00000000  0004fd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024373  00000000  00000000  000581e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc70c  00000000  00000000  0007c553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e74  00000000  00000000  00158c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00160ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c60 	.word	0x08009c60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009c60 	.word	0x08009c60

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fbc5 	bl	800149a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f820 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f93a 	bl	8000f8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d18:	f000 f91a 	bl	8000f50 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d1c:	f000 f8e8 	bl	8000ef0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000d20:	f000 f86a 	bl	8000df8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000d24:	f000 f8a6 	bl	8000e74 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  firmware();
 8000d28:	f007 fc4a 	bl	80085c0 <firmware>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d2c:	f004 fd96 	bl	800585c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <main+0x40>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <main+0x44>)
 8000d36:	f004 fe12 	bl	800595e <osThreadNew>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <main+0x48>)
 8000d3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d40:	f004 fdd2 	bl	80058e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <main+0x3c>
 8000d46:	bf00      	nop
 8000d48:	08009cb4 	.word	0x08009cb4
 8000d4c:	08001035 	.word	0x08001035
 8000d50:	200002b4 	.word	0x200002b4

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b096      	sub	sp, #88	; 0x58
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	2244      	movs	r2, #68	; 0x44
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f008 fe91 	bl	8009a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d7a:	f001 f85d 	bl	8001e38 <HAL_PWREx_ControlVoltageScaling>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d84:	f000 f970 	bl	8001068 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d94:	2360      	movs	r3, #96	; 0x60
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000da4:	2328      	movs	r3, #40	; 0x28
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000da8:	2307      	movs	r3, #7
 8000daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 f893 	bl	8001ee4 <HAL_RCC_OscConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000dc4:	f000 f950 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc8:	230f      	movs	r3, #15
 8000dca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2104      	movs	r1, #4
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fc93 	bl	800270c <HAL_RCC_ClockConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000dec:	f000 f93c 	bl	8001068 <Error_Handler>
  }
}
 8000df0:	bf00      	nop
 8000df2:	3758      	adds	r7, #88	; 0x58
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <MX_SPI1_Init+0x78>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e2e:	2228      	movs	r2, #40	; 0x28
 8000e30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e46:	2207      	movs	r2, #7
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e52:	2208      	movs	r2, #8
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_SPI1_Init+0x74>)
 8000e58:	f002 f996 	bl	8003188 <HAL_SPI_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 f901 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000009c 	.word	0x2000009c
 8000e70:	40013000 	.word	0x40013000

08000e74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <MX_SPI3_Init+0x78>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000e8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000ece:	2208      	movs	r2, #8
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_SPI3_Init+0x74>)
 8000ed4:	f002 f958 	bl	8003188 <HAL_SPI_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ede:	f000 f8c3 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000128 	.word	0x20000128
 8000eec:	40003c00 	.word	0x40003c00

08000ef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <MX_USART1_UART_Init+0x5c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART1_UART_Init+0x58>)
 8000f34:	f003 fb3e 	bl	80045b4 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f3e:	f000 f893 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200001b4 	.word	0x200001b4
 8000f4c:	40013800 	.word	0x40013800

08000f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_DMA_Init+0x38>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <MX_DMA_Init+0x38>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6493      	str	r3, [r2, #72]	; 0x48
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_DMA_Init+0x38>)
 8000f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2105      	movs	r1, #5
 8000f72:	200e      	movs	r0, #14
 8000f74:	f000 fba6 	bl	80016c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f78:	200e      	movs	r0, #14
 8000f7a:	f000 fbbf 	bl	80016fc <HAL_NVIC_EnableIRQ>

}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_GPIO_Init+0xa0>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <MX_GPIO_Init+0xa0>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_GPIO_Init+0xa0>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_GPIO_Init+0xa0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <MX_GPIO_Init+0xa0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_GPIO_Init+0xa0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f000 feed 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2140      	movs	r1, #64	; 0x40
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <MX_GPIO_Init+0xa4>)
 8000fe4:	f000 fee8 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f000 fd6f 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001006:	2340      	movs	r3, #64	; 0x40
 8001008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100e:	2301      	movs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4619      	mov	r1, r3
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_GPIO_Init+0xa4>)
 800101e:	f000 fd61 	bl	8001ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001022:	bf00      	nop
 8001024:	3720      	adds	r7, #32
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	48000400 	.word	0x48000400

08001034 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f004 fd20 	bl	8005a82 <osDelay>
 8001042:	e7fb      	b.n	800103c <StartDefaultTask+0x8>

08001044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001056:	f000 fa39 	bl	80014cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40001000 	.word	0x40001000

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_MspInit+0x4c>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_MspInit+0x4c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6613      	str	r3, [r2, #96]	; 0x60
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_MspInit+0x4c>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_MspInit+0x4c>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	210f      	movs	r1, #15
 80010ae:	f06f 0001 	mvn.w	r0, #1
 80010b2:	f000 fb07 	bl	80016c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a2e      	ldr	r2, [pc, #184]	; (800119c <HAL_SPI_MspInit+0xd8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d129      	bne.n	800113a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 80010ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f0:	6613      	str	r3, [r2, #96]	; 0x60
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001116:	23c2      	movs	r3, #194	; 0xc2
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001126:	2305      	movs	r3, #5
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f000 fcd6 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001138:	e02c      	b.n	8001194 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_SPI_MspInit+0xe0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d127      	bne.n	8001194 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 800114a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114e:	6593      	str	r3, [r2, #88]	; 0x58
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_SPI_MspInit+0xdc>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001174:	2338      	movs	r3, #56	; 0x38
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001184:	2306      	movs	r3, #6
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <HAL_SPI_MspInit+0xe4>)
 8001190:	f000 fca8 	bl	8001ae4 <HAL_GPIO_Init>
}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40013000 	.word	0x40013000
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40003c00 	.word	0x40003c00
 80011a8:	48000400 	.word	0x48000400

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09e      	sub	sp, #120	; 0x78
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	2254      	movs	r2, #84	; 0x54
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f008 fc5c 	bl	8009a8a <memset>
  if(huart->Instance==USART1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a38      	ldr	r2, [pc, #224]	; (80012b8 <HAL_UART_MspInit+0x10c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d168      	bne.n	80012ae <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fce5 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f4:	f7ff ff38 	bl	8001068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_UART_MspInit+0x110>)
 80011fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fc:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <HAL_UART_MspInit+0x110>)
 80011fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001202:	6613      	str	r3, [r2, #96]	; 0x60
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_UART_MspInit+0x110>)
 8001206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_UART_MspInit+0x110>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	4a29      	ldr	r2, [pc, #164]	; (80012bc <HAL_UART_MspInit+0x110>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_UART_MspInit+0x110>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001228:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800122c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800123a:	2307      	movs	r3, #7
 800123c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001248:	f000 fc4c 	bl	8001ae4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_UART_MspInit+0x114>)
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_UART_MspInit+0x118>)
 8001250:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_UART_MspInit+0x114>)
 8001254:	2202      	movs	r2, #2
 8001256:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_UART_MspInit+0x114>)
 800125a:	2210      	movs	r2, #16
 800125c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_UART_MspInit+0x114>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_UART_MspInit+0x114>)
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_UART_MspInit+0x114>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_UART_MspInit+0x114>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_UART_MspInit+0x114>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_UART_MspInit+0x114>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <HAL_UART_MspInit+0x114>)
 8001284:	f000 fa48 	bl	8001718 <HAL_DMA_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800128e:	f7ff feeb 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_UART_MspInit+0x114>)
 8001296:	671a      	str	r2, [r3, #112]	; 0x70
 8001298:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_UART_MspInit+0x114>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2105      	movs	r1, #5
 80012a2:	2025      	movs	r0, #37	; 0x25
 80012a4:	f000 fa0e 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012a8:	2025      	movs	r0, #37	; 0x25
 80012aa:	f000 fa27 	bl	80016fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3778      	adds	r7, #120	; 0x78
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	2000026c 	.word	0x2000026c
 80012c4:	40020044 	.word	0x40020044

080012c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <HAL_InitTick+0xe0>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <HAL_InitTick+0xe0>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_InitTick+0xe0>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012ee:	f107 0210 	add.w	r2, r7, #16
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fbcb 	bl	8002a94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001308:	f001 fb98 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 800130c:	6378      	str	r0, [r7, #52]	; 0x34
 800130e:	e004      	b.n	800131a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001310:	f001 fb94 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8001314:	4603      	mov	r3, r0
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131c:	4a23      	ldr	r2, [pc, #140]	; (80013ac <HAL_InitTick+0xe4>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9b      	lsrs	r3, r3, #18
 8001324:	3b01      	subs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_InitTick+0xe8>)
 800132a:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <HAL_InitTick+0xec>)
 800132c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_InitTick+0xe8>)
 8001330:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001334:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_InitTick+0xe8>)
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_InitTick+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_InitTick+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_InitTick+0xe8>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <HAL_InitTick+0xe8>)
 8001350:	f002 fece 	bl	80040f0 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800135a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800135e:	2b00      	cmp	r3, #0
 8001360:	d11b      	bne.n	800139a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001362:	4813      	ldr	r0, [pc, #76]	; (80013b0 <HAL_InitTick+0xe8>)
 8001364:	f002 ff26 	bl	80041b4 <HAL_TIM_Base_Start_IT>
 8001368:	4603      	mov	r3, r0
 800136a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800136e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001372:	2b00      	cmp	r3, #0
 8001374:	d111      	bne.n	800139a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001376:	2036      	movs	r0, #54	; 0x36
 8001378:	f000 f9c0 	bl	80016fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	d808      	bhi.n	8001394 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001382:	2200      	movs	r2, #0
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	2036      	movs	r0, #54	; 0x36
 8001388:	f000 f99c 	bl	80016c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_InitTick+0xf0>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e002      	b.n	800139a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800139a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3738      	adds	r7, #56	; 0x38
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	431bde83 	.word	0x431bde83
 80013b0:	200002b8 	.word	0x200002b8
 80013b4:	40001000 	.word	0x40001000
 80013b8:	20000004 	.word	0x20000004

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <DMA1_Channel4_IRQHandler+0x10>)
 80013ee:	f000 faca 	bl	8001986 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000026c 	.word	0x2000026c

080013fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <USART1_IRQHandler+0x10>)
 8001402:	f003 f9bf 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200001b4 	.word	0x200001b4

08001410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM6_DAC_IRQHandler+0x10>)
 8001416:	f002 ff21 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002b8 	.word	0x200002b8

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001480 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f008 fb67 	bl	8009b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff fc45 	bl	8000d08 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001480:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800148c:	08009da4 	.word	0x08009da4
  ldr r2, =_sbss
 8001490:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001494:	2000203c 	.word	0x2000203c

08001498 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_IRQHandler>

0800149a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f902 	bl	80016ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	200f      	movs	r0, #15
 80014ac:	f7ff ff0c 	bl	80012c8 <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fdda 	bl	8001074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000304 	.word	0x20000304

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000304 	.word	0x20000304

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff4c 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d6:	f7ff ff61 	bl	800159c <__NVIC_GetPriorityGrouping>
 80016da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	6978      	ldr	r0, [r7, #20]
 80016e2:	f7ff ffb1 	bl	8001648 <NVIC_EncodePriority>
 80016e6:	4602      	mov	r2, r0
 80016e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff80 	bl	80015f4 <__NVIC_SetPriority>
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff54 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e098      	b.n	800185c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_DMA_Init+0x150>)
 8001732:	429a      	cmp	r2, r3
 8001734:	d80f      	bhi.n	8001756 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4b4b      	ldr	r3, [pc, #300]	; (800186c <HAL_DMA_Init+0x154>)
 800173e:	4413      	add	r3, r2
 8001740:	4a4b      	ldr	r2, [pc, #300]	; (8001870 <HAL_DMA_Init+0x158>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	009a      	lsls	r2, r3, #2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a48      	ldr	r2, [pc, #288]	; (8001874 <HAL_DMA_Init+0x15c>)
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
 8001754:	e00e      	b.n	8001774 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	4b46      	ldr	r3, [pc, #280]	; (8001878 <HAL_DMA_Init+0x160>)
 800175e:	4413      	add	r3, r2
 8001760:	4a43      	ldr	r2, [pc, #268]	; (8001870 <HAL_DMA_Init+0x158>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	009a      	lsls	r2, r3, #2
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a42      	ldr	r2, [pc, #264]	; (800187c <HAL_DMA_Init+0x164>)
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800178a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017ce:	d039      	beq.n	8001844 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_DMA_Init+0x15c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d11a      	bne.n	8001810 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_DMA_Init+0x168>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f003 031c 	and.w	r3, r3, #28
 80017e6:	210f      	movs	r1, #15
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4924      	ldr	r1, [pc, #144]	; (8001880 <HAL_DMA_Init+0x168>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_DMA_Init+0x168>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f003 031c 	and.w	r3, r3, #28
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	491d      	ldr	r1, [pc, #116]	; (8001880 <HAL_DMA_Init+0x168>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
 800180e:	e019      	b.n	8001844 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_DMA_Init+0x16c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f003 031c 	and.w	r3, r3, #28
 800181c:	210f      	movs	r1, #15
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	4917      	ldr	r1, [pc, #92]	; (8001884 <HAL_DMA_Init+0x16c>)
 8001826:	4013      	ands	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <HAL_DMA_Init+0x16c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f003 031c 	and.w	r3, r3, #28
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	4911      	ldr	r1, [pc, #68]	; (8001884 <HAL_DMA_Init+0x16c>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40020407 	.word	0x40020407
 800186c:	bffdfff8 	.word	0xbffdfff8
 8001870:	cccccccd 	.word	0xcccccccd
 8001874:	40020000 	.word	0x40020000
 8001878:	bffdfbf8 	.word	0xbffdfbf8
 800187c:	40020400 	.word	0x40020400
 8001880:	400200a8 	.word	0x400200a8
 8001884:	400204a8 	.word	0x400204a8

08001888 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d008      	beq.n	80018b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2204      	movs	r2, #4
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e022      	b.n	80018f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 020e 	bic.w	r2, r2, #14
 80018c0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f003 021c 	and.w	r2, r3, #28
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d005      	beq.n	8001928 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2204      	movs	r2, #4
 8001920:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e029      	b.n	800197c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 020e 	bic.w	r2, r2, #14
 8001936:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f003 021c 	and.w	r2, r3, #28
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
    }
  }
  return status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f003 031c 	and.w	r3, r3, #28
 80019a6:	2204      	movs	r2, #4
 80019a8:	409a      	lsls	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d026      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x7a>
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d021      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0204 	bic.w	r2, r2, #4
 80019d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f003 021c 	and.w	r2, r3, #28
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	2104      	movs	r1, #4
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d071      	beq.n	8001ada <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019fe:	e06c      	b.n	8001ada <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f003 031c 	and.w	r3, r3, #28
 8001a08:	2202      	movs	r2, #2
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d02e      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xec>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d029      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10b      	bne.n	8001a44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020a 	bic.w	r2, r2, #10
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f003 021c 	and.w	r2, r3, #28
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	2102      	movs	r1, #2
 8001a52:	fa01 f202 	lsl.w	r2, r1, r2
 8001a56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d038      	beq.n	8001ada <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a70:	e033      	b.n	8001ada <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 031c 	and.w	r3, r3, #28
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d02a      	beq.n	8001adc <HAL_DMA_IRQHandler+0x156>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d025      	beq.n	8001adc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020e 	bic.w	r2, r2, #14
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	f003 021c 	and.w	r2, r3, #28
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
}
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af2:	e148      	b.n	8001d86 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 813a 	beq.w	8001d80 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d005      	beq.n	8001b24 <HAL_GPIO_Init+0x40>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d130      	bne.n	8001b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f003 0201 	and.w	r2, r3, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d017      	beq.n	8001bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d123      	bne.n	8001c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	6939      	ldr	r1, [r7, #16]
 8001c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0203 	and.w	r2, r3, #3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8094 	beq.w	8001d80 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <HAL_GPIO_Init+0x2c0>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5c:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <HAL_GPIO_Init+0x2c0>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6613      	str	r3, [r2, #96]	; 0x60
 8001c64:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_GPIO_Init+0x2c0>)
 8001c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c70:	4a4d      	ldr	r2, [pc, #308]	; (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_GPIO_Init+0x1d4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a43      	ldr	r2, [pc, #268]	; (8001dac <HAL_GPIO_Init+0x2c8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <HAL_GPIO_Init+0x1d0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_GPIO_Init+0x1cc>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x1d6>
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x1d6>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x1d6>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cca:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd8:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cfc:	4a2d      	ldr	r2, [pc, #180]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d26:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f aeaf 	bne.w	8001af4 <HAL_GPIO_Init+0x10>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000800 	.word	0x48000800
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43d9      	mvns	r1, r3
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	400b      	ands	r3, r1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e46:	d130      	bne.n	8001eaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e54:	d038      	beq.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2232      	movs	r2, #50	; 0x32
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9b      	lsrs	r3, r3, #18
 8001e78:	3301      	adds	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7c:	e002      	b.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e90:	d102      	bne.n	8001e98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f2      	bne.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea4:	d110      	bne.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e00f      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb6:	d007      	beq.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	431bde83 	.word	0x431bde83

08001ee4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f000 bc02 	b.w	80026fc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef8:	4b96      	ldr	r3, [pc, #600]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f02:	4b94      	ldr	r3, [pc, #592]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80e4 	beq.w	80020e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4c>
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	f040 808b 	bne.w	800203e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	f040 8087 	bne.w	800203e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f30:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x64>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e3d9      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <HAL_RCC_OscConfig+0x7e>
 8001f58:	4b7e      	ldr	r3, [pc, #504]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x8a>
 8001f62:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d223      	bcs.n	8001fba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fdbe 	bl	8002af8 <RCC_SetFlashLatencyFromMSIRange>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e3ba      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a72      	ldr	r2, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	496d      	ldr	r1, [pc, #436]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	4968      	ldr	r1, [pc, #416]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e025      	b.n	8002006 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fba:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a65      	ldr	r2, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4960      	ldr	r1, [pc, #384]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd8:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	495b      	ldr	r1, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fd7e 	bl	8002af8 <RCC_SetFlashLatencyFromMSIRange>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e37a      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002006:	f000 fc81 	bl	800290c <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4950      	ldr	r1, [pc, #320]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_RCC_OscConfig+0x278>)
 8002024:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002026:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <HAL_RCC_OscConfig+0x27c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f94c 	bl	80012c8 <HAL_InitTick>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d052      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	e35e      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d032      	beq.n	80020ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002046:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002052:	f7ff fa4f 	bl	80014f4 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205a:	f7ff fa4b 	bl	80014f4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e347      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002078:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a35      	ldr	r2, [pc, #212]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800207e:	f043 0308 	orr.w	r3, r3, #8
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4930      	ldr	r1, [pc, #192]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	492b      	ldr	r1, [pc, #172]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
 80020aa:	e01a      	b.n	80020e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a28      	ldr	r2, [pc, #160]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fa1c 	bl	80014f4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c0:	f7ff fa18 	bl	80014f4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e314      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1dc>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d073      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x21c>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d10e      	bne.n	8002118 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d10b      	bne.n	8002118 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d063      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d15f      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e2f1      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d106      	bne.n	8002130 <HAL_RCC_OscConfig+0x24c>
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e025      	b.n	800217c <HAL_RCC_OscConfig+0x298>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002138:	d114      	bne.n	8002164 <HAL_RCC_OscConfig+0x280>
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a02      	ldr	r2, [pc, #8]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e013      	b.n	800217c <HAL_RCC_OscConfig+0x298>
 8002154:	40021000 	.word	0x40021000
 8002158:	08009cd8 	.word	0x08009cd8
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004
 8002164:	4ba0      	ldr	r3, [pc, #640]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a9f      	ldr	r2, [pc, #636]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b9d      	ldr	r3, [pc, #628]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a9c      	ldr	r2, [pc, #624]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f9b6 	bl	80014f4 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff f9b2 	bl	80014f4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e2ae      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219e:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x2a8>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff f9a2 	bl	80014f4 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff f99e 	bl	80014f4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e29a      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2d0>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d060      	beq.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x310>
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d116      	bne.n	8002222 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f4:	4b7c      	ldr	r3, [pc, #496]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x328>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e277      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	4973      	ldr	r1, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002220:	e040      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d023      	beq.n	8002272 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6e      	ldr	r2, [pc, #440]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7ff f95d 	bl	80014f4 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223e:	f7ff f959 	bl	80014f4 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e255      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002250:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	495f      	ldr	r1, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
 8002270:	e018      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5c      	ldr	r2, [pc, #368]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff f939 	bl	80014f4 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff f935 	bl	80014f4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e231      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d03c      	beq.n	800232a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022be:	4a4a      	ldr	r2, [pc, #296]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7ff f914 	bl	80014f4 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7ff f910 	bl	80014f4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e20c      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ef      	beq.n	80022d0 <HAL_RCC_OscConfig+0x3ec>
 80022f0:	e01b      	b.n	800232a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f8:	4a3b      	ldr	r2, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7ff f8f7 	bl	80014f4 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230a:	f7ff f8f3 	bl	80014f4 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1ef      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ef      	bne.n	800230a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80a6 	beq.w	8002484 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002352:	6593      	str	r3, [r2, #88]	; 0x58
 8002354:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002360:	2301      	movs	r3, #1
 8002362:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_RCC_OscConfig+0x508>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d118      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002370:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_RCC_OscConfig+0x508>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x508>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237c:	f7ff f8ba 	bl	80014f4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7ff f8b6 	bl	80014f4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1b2      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_RCC_OscConfig+0x508>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d108      	bne.n	80023bc <HAL_RCC_OscConfig+0x4d8>
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ba:	e029      	b.n	8002410 <HAL_RCC_OscConfig+0x52c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d115      	bne.n	80023f0 <HAL_RCC_OscConfig+0x50c>
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <HAL_RCC_OscConfig+0x504>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e4:	e014      	b.n	8002410 <HAL_RCC_OscConfig+0x52c>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	4b9a      	ldr	r3, [pc, #616]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	4a99      	ldr	r2, [pc, #612]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002400:	4b96      	ldr	r3, [pc, #600]	; (800265c <HAL_RCC_OscConfig+0x778>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	4a95      	ldr	r2, [pc, #596]	; (800265c <HAL_RCC_OscConfig+0x778>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d016      	beq.n	8002446 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff f86c 	bl	80014f4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7ff f868 	bl	80014f4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e162      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002436:	4b89      	ldr	r3, [pc, #548]	; (800265c <HAL_RCC_OscConfig+0x778>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ed      	beq.n	8002420 <HAL_RCC_OscConfig+0x53c>
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7ff f855 	bl	80014f4 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff f851 	bl	80014f4 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e14b      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002464:	4b7d      	ldr	r3, [pc, #500]	; (800265c <HAL_RCC_OscConfig+0x778>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ed      	bne.n	800244e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002472:	7ffb      	ldrb	r3, [r7, #31]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002478:	4b78      	ldr	r3, [pc, #480]	; (800265c <HAL_RCC_OscConfig+0x778>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	4a77      	ldr	r2, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x778>)
 800247e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03c      	beq.n	800250a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002498:	4b70      	ldr	r3, [pc, #448]	; (800265c <HAL_RCC_OscConfig+0x778>)
 800249a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249e:	4a6f      	ldr	r2, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7ff f824 	bl	80014f4 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b0:	f7ff f820 	bl	80014f4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e11c      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024c2:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80024c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ef      	beq.n	80024b0 <HAL_RCC_OscConfig+0x5cc>
 80024d0:	e01b      	b.n	800250a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024d2:	4b62      	ldr	r3, [pc, #392]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80024d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d8:	4a60      	ldr	r2, [pc, #384]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7ff f807 	bl	80014f4 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ea:	f7ff f803 	bl	80014f4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0ff      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024fc:	4b57      	ldr	r3, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80024fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ef      	bne.n	80024ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80f3 	beq.w	80026fa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	2b02      	cmp	r3, #2
 800251a:	f040 80c9 	bne.w	80026b0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800251e:	4b4f      	ldr	r3, [pc, #316]	; (800265c <HAL_RCC_OscConfig+0x778>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0203 	and.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	429a      	cmp	r2, r3
 8002530:	d12c      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	3b01      	subs	r3, #1
 800253e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d123      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d11b      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d113      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d109      	bne.n	800258c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	3b01      	subs	r3, #1
 8002586:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d06b      	beq.n	8002664 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d062      	beq.n	8002658 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002592:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_RCC_OscConfig+0x778>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0ac      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80025a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025ae:	f7fe ffa1 	bl	80014f4 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7fe ff9d 	bl	80014f4 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e099      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d4:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_RCC_OscConfig+0x778>)
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_RCC_OscConfig+0x77c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025e4:	3a01      	subs	r2, #1
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	4311      	orrs	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025ee:	0212      	lsls	r2, r2, #8
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0552      	lsls	r2, r2, #21
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	0652      	lsls	r2, r2, #25
 8002608:	4311      	orrs	r1, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800260e:	06d2      	lsls	r2, r2, #27
 8002610:	430a      	orrs	r2, r1
 8002612:	4912      	ldr	r1, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x778>)
 8002614:	4313      	orrs	r3, r2
 8002616:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002618:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_RCC_OscConfig+0x778>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0f      	ldr	r2, [pc, #60]	; (800265c <HAL_RCC_OscConfig+0x778>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_RCC_OscConfig+0x778>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a0c      	ldr	r2, [pc, #48]	; (800265c <HAL_RCC_OscConfig+0x778>)
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002630:	f7fe ff60 	bl	80014f4 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe ff5c 	bl	80014f4 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e058      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCC_OscConfig+0x778>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002656:	e050      	b.n	80026fa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e04f      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
 800265c:	40021000 	.word	0x40021000
 8002660:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d144      	bne.n	80026fa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a23      	ldr	r2, [pc, #140]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002686:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002688:	f7fe ff34 	bl	80014f4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe ff30 	bl	80014f4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e02c      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x7ac>
 80026ae:	e024      	b.n	80026fa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d01f      	beq.n	80026f6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 80026bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe ff17 	bl	80014f4 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe ff13 	bl	80014f4 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e00f      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4905      	ldr	r1, [pc, #20]	; (8002704 <HAL_RCC_OscConfig+0x820>)
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCC_OscConfig+0x824>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	60cb      	str	r3, [r1, #12]
 80026f4:	e001      	b.n	80026fa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	feeefffc 	.word	0xfeeefffc

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0e7      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b75      	ldr	r3, [pc, #468]	; (80028f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d910      	bls.n	8002750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b72      	ldr	r3, [pc, #456]	; (80028f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4970      	ldr	r1, [pc, #448]	; (80028f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b6e      	ldr	r3, [pc, #440]	; (80028f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0cf      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d010      	beq.n	800277e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4b66      	ldr	r3, [pc, #408]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002768:	429a      	cmp	r2, r3
 800276a:	d908      	bls.n	800277e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4960      	ldr	r1, [pc, #384]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d04c      	beq.n	8002824 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002792:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d121      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0a6      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027aa:	4b54      	ldr	r3, [pc, #336]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d115      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e09a      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c2:	4b4e      	ldr	r3, [pc, #312]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e08e      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d2:	4b4a      	ldr	r3, [pc, #296]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e086      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 0203 	bic.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4943      	ldr	r1, [pc, #268]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f4:	f7fe fe7e 	bl	80014f4 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7fe fe7a 	bl	80014f4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e06e      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 020c 	and.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1eb      	bne.n	80027fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283c:	429a      	cmp	r2, r3
 800283e:	d208      	bcs.n	8002852 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	492b      	ldr	r1, [pc, #172]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d210      	bcs.n	8002882 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 0207 	bic.w	r2, r3, #7
 8002868:	4923      	ldr	r1, [pc, #140]	; (80028f8 <HAL_RCC_ClockConfig+0x1ec>)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e036      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4918      	ldr	r1, [pc, #96]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4910      	ldr	r1, [pc, #64]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c0:	f000 f824 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	490b      	ldr	r1, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1f4>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1f8>)
 80028de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1fc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fcef 	bl	80012c8 <HAL_InitTick>
 80028ea:	4603      	mov	r3, r0
 80028ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80028ee:	7afb      	ldrb	r3, [r7, #11]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021000 	.word	0x40021000
 8002900:	08009cd8 	.word	0x08009cd8
 8002904:	20000000 	.word	0x20000000
 8002908:	20000004 	.word	0x20000004

0800290c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291a:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x34>
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d121      	bne.n	800297e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d11e      	bne.n	800297e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002940:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800294c:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800294e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e005      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002968:	4a2b      	ldr	r2, [pc, #172]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x10c>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002970:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10d      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d102      	bne.n	800298a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x110>)
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	e004      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d101      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002990:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x114>)
 8002992:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d134      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d003      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d003      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0xac>
 80029b0:	e005      	b.n	80029be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x110>)
 80029b4:	617b      	str	r3, [r7, #20]
      break;
 80029b6:	e005      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ba:	617b      	str	r3, [r7, #20]
      break;
 80029bc:	e002      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	617b      	str	r3, [r7, #20]
      break;
 80029c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	3301      	adds	r3, #1
 80029d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	fb03 f202 	mul.w	r2, r3, r2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	0e5b      	lsrs	r3, r3, #25
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	3301      	adds	r3, #1
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a04:	69bb      	ldr	r3, [r7, #24]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08009cf0 	.word	0x08009cf0
 8002a1c:	00f42400 	.word	0x00f42400
 8002a20:	007a1200 	.word	0x007a1200

08002a24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000000 	.word	0x20000000

08002a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a40:	f7ff fff0 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08009ce8 	.word	0x08009ce8

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a6c:	f7ff ffda 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0adb      	lsrs	r3, r3, #11
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4904      	ldr	r1, [pc, #16]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08009ce8 	.word	0x08009ce8

08002a94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_RCC_GetClockConfig+0x60>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0207 	and.w	r2, r3, #7
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40022000 	.word	0x40022000

08002af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b10:	f7ff f984 	bl	8001e1c <HAL_PWREx_GetVoltageRange>
 8002b14:	6178      	str	r0, [r7, #20]
 8002b16:	e014      	b.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	; 0x58
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b30:	f7ff f974 	bl	8001e1c <HAL_PWREx_GetVoltageRange>
 8002b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b48:	d10b      	bne.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d919      	bls.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2ba0      	cmp	r3, #160	; 0xa0
 8002b54:	d902      	bls.n	8002b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b56:	2302      	movs	r3, #2
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e013      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	e010      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d902      	bls.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b68:	2303      	movs	r3, #3
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e00a      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b80      	cmp	r3, #128	; 0x80
 8002b72:	d102      	bne.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b74:	2302      	movs	r3, #2
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e004      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b70      	cmp	r3, #112	; 0x70
 8002b7e:	d101      	bne.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b80:	2301      	movs	r3, #1
 8002b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 0207 	bic.w	r2, r3, #7
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d031      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bdc:	d01a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002bde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002be2:	d814      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002be8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bee:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a5c      	ldr	r2, [pc, #368]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bfa:	e00c      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f9ce 	bl	8002fa4 <RCCEx_PLLSAI1_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c0c:	e003      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	74fb      	strb	r3, [r7, #19]
      break;
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10b      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c1c:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	494e      	ldr	r1, [pc, #312]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c32:	e001      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 809e 	beq.w	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c4a:	4b46      	ldr	r3, [pc, #280]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	4a3f      	ldr	r2, [pc, #252]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6c:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7c:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c88:	f7fe fc34 	bl	80014f4 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c8e:	e009      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c90:	f7fe fc30 	bl	80014f4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d902      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ca4:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ef      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d15a      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01e      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d019      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd2:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cdc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cfe:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fbf0 	bl	80014f4 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d16:	e00b      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe fbec 	bl	80014f4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d902      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	74fb      	strb	r3, [r7, #19]
            break;
 8002d2e:	e006      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0ec      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d52:	4904      	ldr	r1, [pc, #16]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d5a:	e009      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	74bb      	strb	r3, [r7, #18]
 8002d60:	e006      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d70:	7c7b      	ldrb	r3, [r7, #17]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b8a      	ldr	r3, [pc, #552]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	4a89      	ldr	r2, [pc, #548]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d8e:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	f023 0203 	bic.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4980      	ldr	r1, [pc, #512]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db0:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f023 020c 	bic.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	4978      	ldr	r1, [pc, #480]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	496f      	ldr	r1, [pc, #444]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	4967      	ldr	r1, [pc, #412]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e16:	4b62      	ldr	r3, [pc, #392]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	495e      	ldr	r1, [pc, #376]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	4956      	ldr	r1, [pc, #344]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e5a:	4b51      	ldr	r3, [pc, #324]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	494d      	ldr	r1, [pc, #308]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d028      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e7c:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4945      	ldr	r1, [pc, #276]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9c:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea6:	60d3      	str	r3, [r2, #12]
 8002ea8:	e011      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f872 	bl	8002fa4 <RCCEx_PLLSAI1_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eda:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	492d      	ldr	r1, [pc, #180]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f04:	60d3      	str	r3, [r2, #12]
 8002f06:	e011      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f843 	bl	8002fa4 <RCCEx_PLLSAI1_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01c      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f46:	4916      	ldr	r1, [pc, #88]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f820 	bl	8002fa4 <RCCEx_PLLSAI1_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	4904      	ldr	r1, [pc, #16]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000

08002fa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fbe:	4b71      	ldr	r3, [pc, #452]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0203 	and.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d10d      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fd6:	4b6b      	ldr	r3, [pc, #428]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d047      	beq.n	800307a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	e044      	b.n	800307a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d018      	beq.n	800302a <RCCEx_PLLSAI1_Config+0x86>
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d825      	bhi.n	8003048 <RCCEx_PLLSAI1_Config+0xa4>
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d002      	beq.n	8003006 <RCCEx_PLLSAI1_Config+0x62>
 8003000:	2b02      	cmp	r3, #2
 8003002:	d009      	beq.n	8003018 <RCCEx_PLLSAI1_Config+0x74>
 8003004:	e020      	b.n	8003048 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003006:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11d      	bne.n	800304e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003016:	e01a      	b.n	800304e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003018:	4b5a      	ldr	r3, [pc, #360]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d116      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003028:	e013      	b.n	8003052 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800302a:	4b56      	ldr	r3, [pc, #344]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003036:	4b53      	ldr	r3, [pc, #332]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003046:	e006      	b.n	8003056 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      break;
 800304c:	e004      	b.n	8003058 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800304e:	bf00      	nop
 8003050:	e002      	b.n	8003058 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003056:	bf00      	nop
    }

    if(status == HAL_OK)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10d      	bne.n	800307a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800305e:	4b49      	ldr	r3, [pc, #292]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	430b      	orrs	r3, r1
 8003074:	4943      	ldr	r1, [pc, #268]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003076:	4313      	orrs	r3, r2
 8003078:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d17c      	bne.n	800317a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003080:	4b40      	ldr	r3, [pc, #256]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a3f      	ldr	r2, [pc, #252]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003086:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800308a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308c:	f7fe fa32 	bl	80014f4 <HAL_GetTick>
 8003090:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003092:	e009      	b.n	80030a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003094:	f7fe fa2e 	bl	80014f4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d902      	bls.n	80030a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	73fb      	strb	r3, [r7, #15]
        break;
 80030a6:	e005      	b.n	80030b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ef      	bne.n	8003094 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d15f      	bne.n	800317a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d110      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6892      	ldr	r2, [r2, #8]
 80030d0:	0211      	lsls	r1, r2, #8
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68d2      	ldr	r2, [r2, #12]
 80030d6:	06d2      	lsls	r2, r2, #27
 80030d8:	430a      	orrs	r2, r1
 80030da:	492a      	ldr	r1, [pc, #168]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	610b      	str	r3, [r1, #16]
 80030e0:	e027      	b.n	8003132 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d112      	bne.n	800310e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e8:	4b26      	ldr	r3, [pc, #152]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6892      	ldr	r2, [r2, #8]
 80030f8:	0211      	lsls	r1, r2, #8
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6912      	ldr	r2, [r2, #16]
 80030fe:	0852      	lsrs	r2, r2, #1
 8003100:	3a01      	subs	r2, #1
 8003102:	0552      	lsls	r2, r2, #21
 8003104:	430a      	orrs	r2, r1
 8003106:	491f      	ldr	r1, [pc, #124]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	610b      	str	r3, [r1, #16]
 800310c:	e011      	b.n	8003132 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003116:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6892      	ldr	r2, [r2, #8]
 800311e:	0211      	lsls	r1, r2, #8
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6952      	ldr	r2, [r2, #20]
 8003124:	0852      	lsrs	r2, r2, #1
 8003126:	3a01      	subs	r2, #1
 8003128:	0652      	lsls	r2, r2, #25
 800312a:	430a      	orrs	r2, r1
 800312c:	4915      	ldr	r1, [pc, #84]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800312e:	4313      	orrs	r3, r2
 8003130:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fe f9d9 	bl	80014f4 <HAL_GetTick>
 8003142:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003144:	e009      	b.n	800315a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003146:	f7fe f9d5 	bl	80014f4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d902      	bls.n	800315a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	73fb      	strb	r3, [r7, #15]
          break;
 8003158:	e005      	b.n	8003166 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ef      	beq.n	8003146 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4903      	ldr	r1, [pc, #12]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000

08003188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0b9      	b.n	800330e <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d108      	bne.n	80031b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031aa:	d009      	beq.n	80031c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	61da      	str	r2, [r3, #28]
 80031b2:	e005      	b.n	80031c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d12a      	bne.n	8003228 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4e      	ldr	r2, [pc, #312]	; (8003318 <HAL_SPI_Init+0x190>)
 80031de:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a4e      	ldr	r2, [pc, #312]	; (800331c <HAL_SPI_Init+0x194>)
 80031e4:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4d      	ldr	r2, [pc, #308]	; (8003320 <HAL_SPI_Init+0x198>)
 80031ea:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_SPI_Init+0x19c>)
 80031f0:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4c      	ldr	r2, [pc, #304]	; (8003328 <HAL_SPI_Init+0x1a0>)
 80031f6:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a4c      	ldr	r2, [pc, #304]	; (800332c <HAL_SPI_Init+0x1a4>)
 80031fc:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4b      	ldr	r2, [pc, #300]	; (8003330 <HAL_SPI_Init+0x1a8>)
 8003202:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_SPI_Init+0x1ac>)
 8003208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a47      	ldr	r2, [pc, #284]	; (8003338 <HAL_SPI_Init+0x1b0>)
 800321a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003248:	d902      	bls.n	8003250 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	e002      	b.n	8003256 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003254:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800325e:	d007      	beq.n	8003270 <HAL_SPI_Init+0xe8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003268:	d002      	beq.n	8003270 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	ea42 0103 	orr.w	r1, r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	0c1b      	lsrs	r3, r3, #16
 80032cc:	f003 0204 	and.w	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032ec:	ea42 0103 	orr.w	r1, r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	08003cd9 	.word	0x08003cd9
 800331c:	08003ced 	.word	0x08003ced
 8003320:	08003d01 	.word	0x08003d01
 8003324:	08003d15 	.word	0x08003d15
 8003328:	08003d29 	.word	0x08003d29
 800332c:	08003d3d 	.word	0x08003d3d
 8003330:	08003d51 	.word	0x08003d51
 8003334:	08003d65 	.word	0x08003d65
 8003338:	080010c5 	.word	0x080010c5

0800333c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_SPI_Transmit+0x22>
 800335a:	2302      	movs	r3, #2
 800335c:	e15f      	b.n	800361e <HAL_SPI_Transmit+0x2e2>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003366:	f7fe f8c5 	bl	80014f4 <HAL_GetTick>
 800336a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d002      	beq.n	8003382 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003380:	e148      	b.n	8003614 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_SPI_Transmit+0x52>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003392:	e13f      	b.n	8003614 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2203      	movs	r2, #3
 8003398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	88fa      	ldrh	r2, [r7, #6]
 80033ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033de:	d10f      	bne.n	8003400 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d007      	beq.n	800341e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800341c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003426:	d94f      	bls.n	80034c8 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SPI_Transmit+0xfa>
 8003430:	8afb      	ldrh	r3, [r7, #22]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d142      	bne.n	80034bc <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	881a      	ldrh	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	1c9a      	adds	r2, r3, #2
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800345a:	e02f      	b.n	80034bc <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d112      	bne.n	8003490 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	1c9a      	adds	r2, r3, #2
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800348e:	e015      	b.n	80034bc <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003490:	f7fe f830 	bl	80014f4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d803      	bhi.n	80034a8 <HAL_SPI_Transmit+0x16c>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	d102      	bne.n	80034ae <HAL_SPI_Transmit+0x172>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80034ba:	e0ab      	b.n	8003614 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ca      	bne.n	800345c <HAL_SPI_Transmit+0x120>
 80034c6:	e080      	b.n	80035ca <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Transmit+0x19a>
 80034d0:	8afb      	ldrh	r3, [r7, #22]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d174      	bne.n	80035c0 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d912      	bls.n	8003506 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	881a      	ldrh	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	1c9a      	adds	r2, r3, #2
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b02      	subs	r3, #2
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003504:	e05c      	b.n	80035c0 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	7812      	ldrb	r2, [r2, #0]
 8003512:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800352c:	e048      	b.n	80035c0 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b02      	cmp	r3, #2
 800353a:	d12b      	bne.n	8003594 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d912      	bls.n	800356c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	881a      	ldrh	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	1c9a      	adds	r2, r3, #2
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b02      	subs	r3, #2
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800356a:	e029      	b.n	80035c0 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003592:	e015      	b.n	80035c0 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003594:	f7fd ffae 	bl	80014f4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d803      	bhi.n	80035ac <HAL_SPI_Transmit+0x270>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Transmit+0x276>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80035be:	e029      	b.n	8003614 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1b1      	bne.n	800352e <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fd48 	bl	8004064 <SPI_EndRxTxTransaction>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e003      	b.n	8003614 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800361c:	7ffb      	ldrb	r3, [r7, #31]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b088      	sub	sp, #32
 800362a:	af02      	add	r7, sp, #8
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d002      	beq.n	800364c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003646:	2302      	movs	r3, #2
 8003648:	75fb      	strb	r3, [r7, #23]
    goto error;
 800364a:	e11a      	b.n	8003882 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003654:	d112      	bne.n	800367c <HAL_SPI_Receive+0x56>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10e      	bne.n	800367c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2204      	movs	r2, #4
 8003662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f90e 	bl	8003894 <HAL_SPI_TransmitReceive>
 8003678:	4603      	mov	r3, r0
 800367a:	e107      	b.n	800388c <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_SPI_Receive+0x64>
 8003686:	2302      	movs	r3, #2
 8003688:	e100      	b.n	800388c <HAL_SPI_Receive+0x266>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003692:	f7fd ff2f 	bl	80014f4 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_SPI_Receive+0x7e>
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036a8:	e0eb      	b.n	8003882 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2204      	movs	r2, #4
 80036ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	88fa      	ldrh	r2, [r7, #6]
 80036c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036f4:	d908      	bls.n	8003708 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	e007      	b.n	8003718 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003716:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003720:	d10f      	bne.n	8003742 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003730:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d007      	beq.n	8003760 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003768:	d86f      	bhi.n	800384a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800376a:	e034      	b.n	80037d6 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d117      	bne.n	80037aa <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f103 020c 	add.w	r2, r3, #12
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	7812      	ldrb	r2, [r2, #0]
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80037a8:	e015      	b.n	80037d6 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037aa:	f7fd fea3 	bl	80014f4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d803      	bhi.n	80037c2 <HAL_SPI_Receive+0x19c>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d102      	bne.n	80037c8 <HAL_SPI_Receive+0x1a2>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80037d4:	e055      	b.n	8003882 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1c4      	bne.n	800376c <HAL_SPI_Receive+0x146>
 80037e2:	e038      	b.n	8003856 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d115      	bne.n	800381e <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	b292      	uxth	r2, r2
 80037fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800381c:	e015      	b.n	800384a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381e:	f7fd fe69 	bl	80014f4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d803      	bhi.n	8003836 <HAL_SPI_Receive+0x210>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d102      	bne.n	800383c <HAL_SPI_Receive+0x216>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003848:	e01b      	b.n	8003882 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1c6      	bne.n	80037e4 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	6839      	ldr	r1, [r7, #0]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fbaa 	bl	8003fb4 <SPI_EndRxTransaction>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	75fb      	strb	r3, [r7, #23]
 8003878:	e003      	b.n	8003882 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038a2:	2301      	movs	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x26>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e20a      	b.n	8003cd0 <HAL_SPI_TransmitReceive+0x43c>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c2:	f7fd fe17 	bl	80014f4 <HAL_GetTick>
 80038c6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038ce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038de:	7efb      	ldrb	r3, [r7, #27]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d00e      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x6e>
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ea:	d106      	bne.n	80038fa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <HAL_SPI_TransmitReceive+0x66>
 80038f4:	7efb      	ldrb	r3, [r7, #27]
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d003      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
 80038fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003900:	e1e0      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_SPI_TransmitReceive+0x80>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_SPI_TransmitReceive+0x80>
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d103      	bne.n	800391c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800391a:	e1d3      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b04      	cmp	r3, #4
 8003926:	d003      	beq.n	8003930 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2205      	movs	r2, #5
 800392c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	887a      	ldrh	r2, [r7, #2]
 8003956:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003972:	d802      	bhi.n	800397a <HAL_SPI_TransmitReceive+0xe6>
 8003974:	8a3b      	ldrh	r3, [r7, #16]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d908      	bls.n	800398c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	e007      	b.n	800399c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800399a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d007      	beq.n	80039ba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c2:	f240 8081 	bls.w	8003ac8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0x140>
 80039ce:	8a7b      	ldrh	r3, [r7, #18]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d16d      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	881a      	ldrh	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	1c9a      	adds	r2, r3, #2
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f8:	e05a      	b.n	8003ab0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d11b      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x1ac>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x1ac>
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d113      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	881a      	ldrh	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	1c9a      	adds	r2, r3, #2
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d11c      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x1f4>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	b292      	uxth	r2, r2
 8003a66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a84:	2301      	movs	r3, #1
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a88:	f7fd fd34 	bl	80014f4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d80b      	bhi.n	8003ab0 <HAL_SPI_TransmitReceive+0x21c>
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d007      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003aae:	e109      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d19f      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x166>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d199      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x166>
 8003ac6:	e0e3      	b.n	8003c90 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_SPI_TransmitReceive+0x244>
 8003ad0:	8a7b      	ldrh	r3, [r7, #18]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	f040 80cf 	bne.w	8003c76 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d912      	bls.n	8003b08 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	881a      	ldrh	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	1c9a      	adds	r2, r3, #2
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b02      	subs	r3, #2
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b06:	e0b6      	b.n	8003c76 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	7812      	ldrb	r2, [r2, #0]
 8003b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b2e:	e0a2      	b.n	8003c76 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d134      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x314>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02f      	beq.n	8003ba8 <HAL_SPI_TransmitReceive+0x314>
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d12c      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d912      	bls.n	8003b7e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	1c9a      	adds	r2, r3, #2
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b02      	subs	r3, #2
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b7c:	e012      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d148      	bne.n	8003c48 <HAL_SPI_TransmitReceive+0x3b4>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d042      	beq.n	8003c48 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d923      	bls.n	8003c16 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	b292      	uxth	r2, r2
 8003bda:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b02      	subs	r3, #2
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d81f      	bhi.n	8003c44 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	e016      	b.n	8003c44 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f103 020c 	add.w	r2, r3, #12
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	7812      	ldrb	r2, [r2, #0]
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c44:	2301      	movs	r3, #1
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c48:	f7fd fc54 	bl	80014f4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d803      	bhi.n	8003c60 <HAL_SPI_TransmitReceive+0x3cc>
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5e:	d102      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x3d2>
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003c74:	e026      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f af57 	bne.w	8003b30 <HAL_SPI_TransmitReceive+0x29c>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f47f af50 	bne.w	8003b30 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f9e5 	bl	8004064 <SPI_EndRxTxTransaction>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cba:	e003      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3728      	adds	r7, #40	; 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d88:	f7fd fbb4 	bl	80014f4 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4413      	add	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d98:	f7fd fbac 	bl	80014f4 <HAL_GetTick>
 8003d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	015b      	lsls	r3, r3, #5
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	e054      	b.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d050      	beq.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db8:	f7fd fb9c 	bl	80014f4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d902      	bls.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13d      	bne.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de6:	d111      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df0:	d004      	beq.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d107      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e14:	d10f      	bne.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e017      	b.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d19b      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000000 	.word	0x20000000

08003e88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e9a:	f7fd fb2b 	bl	80014f4 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003eaa:	f7fd fb23 	bl	80014f4 <HAL_GetTick>
 8003eae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00da      	lsls	r2, r3, #3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	0d1b      	lsrs	r3, r3, #20
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ed0:	e060      	b.n	8003f94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ed8:	d107      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0x62>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d050      	beq.n	8003f94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef2:	f7fd faff 	bl	80014f4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d902      	bls.n	8003f08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d13d      	bne.n	8003f84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f20:	d111      	bne.n	8003f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d004      	beq.n	8003f36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f34:	d107      	bne.n	8003f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4e:	d10f      	bne.n	8003f70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e010      	b.n	8003fa6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d196      	bne.n	8003ed2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc8:	d111      	bne.n	8003fee <SPI_EndRxTransaction+0x3a>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d004      	beq.n	8003fde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d107      	bne.n	8003fee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff febd 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e023      	b.n	800405c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401c:	d11d      	bne.n	800405a <SPI_EndRxTransaction+0xa6>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d004      	beq.n	8004032 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	d113      	bne.n	800405a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff ff22 	bl	8003e88 <SPI_WaitFifoStateUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e000      	b.n	800405c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff ff03 	bl	8003e88 <SPI_WaitFifoStateUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e027      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2200      	movs	r2, #0
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff fe68 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b2:	f043 0220 	orr.w	r2, r3, #32
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e014      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff fedc 	bl	8003e88 <SPI_WaitFifoStateUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e000      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e049      	b.n	8004196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f841 	bl	800419e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 f9be 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e03b      	b.n	8004244 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <HAL_TIM_Base_Start_IT+0x9c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x4e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d004      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x4e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a15      	ldr	r2, [pc, #84]	; (8004254 <HAL_TIM_Base_Start_IT+0xa0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d115      	bne.n	800422e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <HAL_TIM_Base_Start_IT+0xa4>)
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b06      	cmp	r3, #6
 8004212:	d015      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x8c>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421a:	d011      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	e008      	b.n	8004240 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e000      	b.n	8004242 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40014000 	.word	0x40014000
 8004258:	00010007 	.word	0x00010007

0800425c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0202 	mvn.w	r2, #2
 8004290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8e4 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f8d6 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8e7 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0204 	mvn.w	r2, #4
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8be 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8b0 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8c1 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0208 	mvn.w	r2, #8
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f898 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f88a 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f89b 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0210 	mvn.w	r2, #16
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2208      	movs	r2, #8
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f872 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f864 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f875 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0201 	mvn.w	r2, #1
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fc fe3e 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8d0 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8c8 	bl	80045a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f834 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0220 	mvn.w	r2, #32
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f890 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a2a      	ldr	r2, [pc, #168]	; (800456c <TIM_Base_SetConfig+0xbc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0x20>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d108      	bne.n	80044e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a21      	ldr	r2, [pc, #132]	; (800456c <TIM_Base_SetConfig+0xbc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00b      	beq.n	8004502 <TIM_Base_SetConfig+0x52>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d007      	beq.n	8004502 <TIM_Base_SetConfig+0x52>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <TIM_Base_SetConfig+0xc0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_Base_SetConfig+0x52>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <TIM_Base_SetConfig+0xc4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d108      	bne.n	8004514 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a0c      	ldr	r2, [pc, #48]	; (800456c <TIM_Base_SetConfig+0xbc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0xa0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <TIM_Base_SetConfig+0xc0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0xa0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <TIM_Base_SetConfig+0xc4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d103      	bne.n	8004558 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	615a      	str	r2, [r3, #20]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40014000 	.word	0x40014000
 8004574:	40014400 	.word	0x40014400

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e04e      	b.n	8004664 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d114      	bne.n	80045f8 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fc26 	bl	8004e28 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d103      	bne.n	80045ee <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a20      	ldr	r2, [pc, #128]	; (800466c <HAL_UART_Init+0xb8>)
 80045ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2224      	movs	r2, #36	; 0x24
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fe78 	bl	800530c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fc49 	bl	8004eb4 <UART_SetConfig>
 8004622:	4603      	mov	r3, r0
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_UART_Init+0x78>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e01b      	b.n	8004664 <HAL_UART_Init+0xb0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800463a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800464a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fef7 	bl	8005450 <UART_CheckIdleState>
 8004662:	4603      	mov	r3, r0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	080011ad 	.word	0x080011ad

08004670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004684:	2b20      	cmp	r3, #32
 8004686:	d178      	bne.n	800477a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_UART_Transmit+0x24>
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e071      	b.n	800477c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2221      	movs	r2, #33	; 0x21
 80046a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046a6:	f7fc ff25 	bl	80014f4 <HAL_GetTick>
 80046aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c4:	d108      	bne.n	80046d8 <HAL_UART_Transmit+0x68>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	e003      	b.n	80046e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046e0:	e030      	b.n	8004744 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2200      	movs	r2, #0
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 ff57 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e03c      	b.n	800477c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	881a      	ldrh	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004714:	b292      	uxth	r2, r2
 8004716:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3302      	adds	r3, #2
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	e008      	b.n	8004732 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	b292      	uxth	r2, r2
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	3301      	adds	r3, #1
 8004730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1c8      	bne.n	80046e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	2140      	movs	r1, #64	; 0x40
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 ff20 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e005      	b.n	800477c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e000      	b.n	800477c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800477a:	2302      	movs	r3, #2
  }
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0ba      	sub	sp, #232	; 0xe8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80047b2:	4013      	ands	r3, r2
 80047b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d115      	bne.n	80047ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00f      	beq.n	80047ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 82ba 	beq.w	8004d56 <HAL_UART_IRQHandler+0x5d2>
      {
        huart->RxISR(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
      }
      return;
 80047ea:	e2b4      	b.n	8004d56 <HAL_UART_IRQHandler+0x5d2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80047ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 811d 	beq.w	8004a30 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004802:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004806:	4b88      	ldr	r3, [pc, #544]	; (8004a28 <HAL_UART_IRQHandler+0x2a4>)
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8110 	beq.w	8004a30 <HAL_UART_IRQHandler+0x2ac>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d011      	beq.n	8004840 <HAL_UART_IRQHandler+0xbc>
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2201      	movs	r2, #1
 800482e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d011      	beq.n	8004870 <HAL_UART_IRQHandler+0xec>
 800484c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2202      	movs	r2, #2
 800485e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <HAL_UART_IRQHandler+0x11c>
 800487c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2204      	movs	r2, #4
 800488e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004896:	f043 0202 	orr.w	r2, r3, #2
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d017      	beq.n	80048dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2208      	movs	r2, #8
 80048ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d2:	f043 0208 	orr.w	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d012      	beq.n	800490e <HAL_UART_IRQHandler+0x18a>
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8220 	beq.w	8004d5a <HAL_UART_IRQHandler+0x5d6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b40      	cmp	r3, #64	; 0x40
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800495a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800495e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004962:	2b00      	cmp	r3, #0
 8004964:	d053      	beq.n	8004a0e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fe81 	bl	800566e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d143      	bne.n	8004a02 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d9      	bne.n	800497a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d013      	beq.n	80049f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d2:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <HAL_UART_IRQHandler+0x2a8>)
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fc ff92 	bl	8001904 <HAL_DMA_Abort_IT>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01d      	beq.n	8004a22 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e015      	b.n	8004a22 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	e00f      	b.n	8004a22 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e009      	b.n	8004a22 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004a20:	e19b      	b.n	8004d5a <HAL_UART_IRQHandler+0x5d6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a22:	bf00      	nop
    return;
 8004a24:	e199      	b.n	8004d5a <HAL_UART_IRQHandler+0x5d6>
 8004a26:	bf00      	nop
 8004a28:	04000120 	.word	0x04000120
 8004a2c:	08005737 	.word	0x08005737

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	f040 8152 	bne.w	8004cde <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 814b 	beq.w	8004cde <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8144 	beq.w	8004cde <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	f040 80ba 	bne.w	8004be2 <HAL_UART_IRQHandler+0x45e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 816d 	beq.w	8004d5e <HAL_UART_IRQHandler+0x5da>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	f080 8165 	bcs.w	8004d5e <HAL_UART_IRQHandler+0x5da>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 8086 	bne.w	8004bbc <HAL_UART_IRQHandler+0x438>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ade:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1da      	bne.n	8004ab0 <HAL_UART_IRQHandler+0x32c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3308      	adds	r3, #8
 8004b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e1      	bne.n	8004afa <HAL_UART_IRQHandler+0x376>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e3      	bne.n	8004b36 <HAL_UART_IRQHandler+0x3b2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8c:	f023 0310 	bic.w	r3, r3, #16
 8004b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ba0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e4      	bne.n	8004b7c <HAL_UART_IRQHandler+0x3f8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fc fe66 	bl	8001888 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	1a8a      	subs	r2, r1, r2
 8004bd8:	b292      	uxth	r2, r2
 8004bda:	4611      	mov	r1, r2
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004be0:	e0bd      	b.n	8004d5e <HAL_UART_IRQHandler+0x5da>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 80af 	beq.w	8004d62 <HAL_UART_IRQHandler+0x5de>
          && (nb_rx_data > 0U))
 8004c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80aa 	beq.w	8004d62 <HAL_UART_IRQHandler+0x5de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c30:	647b      	str	r3, [r7, #68]	; 0x44
 8004c32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e4      	bne.n	8004c0e <HAL_UART_IRQHandler+0x48a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	623b      	str	r3, [r7, #32]
   return(result);
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c68:	633a      	str	r2, [r7, #48]	; 0x30
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e3      	bne.n	8004c44 <HAL_UART_IRQHandler+0x4c0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f023 0310 	bic.w	r3, r3, #16
 8004ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	69b9      	ldr	r1, [r7, #24]
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e4      	bne.n	8004c90 <HAL_UART_IRQHandler+0x50c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cd2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cdc:	e041      	b.n	8004d62 <HAL_UART_IRQHandler+0x5de>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <HAL_UART_IRQHandler+0x588>
 8004cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cfe:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d0a:	e02d      	b.n	8004d68 <HAL_UART_IRQHandler+0x5e4>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00e      	beq.n	8004d36 <HAL_UART_IRQHandler+0x5b2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_UART_IRQHandler+0x5b2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01c      	beq.n	8004d66 <HAL_UART_IRQHandler+0x5e2>
    {
      huart->TxISR(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
    }
    return;
 8004d34:	e017      	b.n	8004d66 <HAL_UART_IRQHandler+0x5e2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d012      	beq.n	8004d68 <HAL_UART_IRQHandler+0x5e4>
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00c      	beq.n	8004d68 <HAL_UART_IRQHandler+0x5e4>
  {
    UART_EndTransmit_IT(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fd09 	bl	8005766 <UART_EndTransmit_IT>
    return;
 8004d54:	e008      	b.n	8004d68 <HAL_UART_IRQHandler+0x5e4>
      return;
 8004d56:	bf00      	nop
 8004d58:	e006      	b.n	8004d68 <HAL_UART_IRQHandler+0x5e4>
    return;
 8004d5a:	bf00      	nop
 8004d5c:	e004      	b.n	8004d68 <HAL_UART_IRQHandler+0x5e4>
      return;
 8004d5e:	bf00      	nop
 8004d60:	e002      	b.n	8004d68 <HAL_UART_IRQHandler+0x5e4>
      return;
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <HAL_UART_IRQHandler+0x5e4>
    return;
 8004d66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d68:	37e8      	adds	r7, #232	; 0xe8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop

08004d70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <UART_InitCallbacksToDefault+0x64>)
 8004e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <UART_InitCallbacksToDefault+0x68>)
 8004e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <UART_InitCallbacksToDefault+0x6c>)
 8004e44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <UART_InitCallbacksToDefault+0x70>)
 8004e4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <UART_InitCallbacksToDefault+0x74>)
 8004e54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a11      	ldr	r2, [pc, #68]	; (8004ea0 <UART_InitCallbacksToDefault+0x78>)
 8004e5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <UART_InitCallbacksToDefault+0x7c>)
 8004e64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ea8 <UART_InitCallbacksToDefault+0x80>)
 8004e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a0e      	ldr	r2, [pc, #56]	; (8004eac <UART_InitCallbacksToDefault+0x84>)
 8004e74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <UART_InitCallbacksToDefault+0x88>)
 8004e7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	08004d85 	.word	0x08004d85
 8004e90:	08004d71 	.word	0x08004d71
 8004e94:	08004dad 	.word	0x08004dad
 8004e98:	08004d99 	.word	0x08004d99
 8004e9c:	08004dc1 	.word	0x08004dc1
 8004ea0:	08004dd5 	.word	0x08004dd5
 8004ea4:	08004de9 	.word	0x08004de9
 8004ea8:	08004dfd 	.word	0x08004dfd
 8004eac:	080057bf 	.word	0x080057bf
 8004eb0:	08004e11 	.word	0x08004e11

08004eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b08a      	sub	sp, #40	; 0x28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4bb4      	ldr	r3, [pc, #720]	; (80051b4 <UART_SetConfig+0x300>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4aa9      	ldr	r2, [pc, #676]	; (80051b8 <UART_SetConfig+0x304>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4aa0      	ldr	r2, [pc, #640]	; (80051bc <UART_SetConfig+0x308>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d126      	bne.n	8004f8c <UART_SetConfig+0xd8>
 8004f3e:	4ba0      	ldr	r3, [pc, #640]	; (80051c0 <UART_SetConfig+0x30c>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d81b      	bhi.n	8004f84 <UART_SetConfig+0xd0>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0xa0>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	2301      	movs	r3, #1
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e080      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e07c      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e078      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e074      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8a:	e070      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a8c      	ldr	r2, [pc, #560]	; (80051c4 <UART_SetConfig+0x310>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d138      	bne.n	8005008 <UART_SetConfig+0x154>
 8004f96:	4b8a      	ldr	r3, [pc, #552]	; (80051c0 <UART_SetConfig+0x30c>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d82d      	bhi.n	8005000 <UART_SetConfig+0x14c>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <UART_SetConfig+0xf8>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	08005001 	.word	0x08005001
 8004fb4:	08005001 	.word	0x08005001
 8004fb8:	08005001 	.word	0x08005001
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08005001 	.word	0x08005001
 8004fc4:	08005001 	.word	0x08005001
 8004fc8:	08005001 	.word	0x08005001
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	08005001 	.word	0x08005001
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08004ff9 	.word	0x08004ff9
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e042      	b.n	800506e <UART_SetConfig+0x1ba>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e03e      	b.n	800506e <UART_SetConfig+0x1ba>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e03a      	b.n	800506e <UART_SetConfig+0x1ba>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e036      	b.n	800506e <UART_SetConfig+0x1ba>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005006:	e032      	b.n	800506e <UART_SetConfig+0x1ba>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a6a      	ldr	r2, [pc, #424]	; (80051b8 <UART_SetConfig+0x304>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d12a      	bne.n	8005068 <UART_SetConfig+0x1b4>
 8005012:	4b6b      	ldr	r3, [pc, #428]	; (80051c0 <UART_SetConfig+0x30c>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800501c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005020:	d01a      	beq.n	8005058 <UART_SetConfig+0x1a4>
 8005022:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005026:	d81b      	bhi.n	8005060 <UART_SetConfig+0x1ac>
 8005028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502c:	d00c      	beq.n	8005048 <UART_SetConfig+0x194>
 800502e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005032:	d815      	bhi.n	8005060 <UART_SetConfig+0x1ac>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <UART_SetConfig+0x18c>
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	d008      	beq.n	8005050 <UART_SetConfig+0x19c>
 800503e:	e00f      	b.n	8005060 <UART_SetConfig+0x1ac>
 8005040:	2300      	movs	r3, #0
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005046:	e012      	b.n	800506e <UART_SetConfig+0x1ba>
 8005048:	2302      	movs	r3, #2
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	e00e      	b.n	800506e <UART_SetConfig+0x1ba>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e00a      	b.n	800506e <UART_SetConfig+0x1ba>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505e:	e006      	b.n	800506e <UART_SetConfig+0x1ba>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005066:	e002      	b.n	800506e <UART_SetConfig+0x1ba>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a51      	ldr	r2, [pc, #324]	; (80051b8 <UART_SetConfig+0x304>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d17a      	bne.n	800516e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800507c:	2b08      	cmp	r3, #8
 800507e:	d824      	bhi.n	80050ca <UART_SetConfig+0x216>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <UART_SetConfig+0x1d4>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050cb 	.word	0x080050cb
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050cb 	.word	0x080050cb
 8005098:	080050bb 	.word	0x080050bb
 800509c:	080050cb 	.word	0x080050cb
 80050a0:	080050cb 	.word	0x080050cb
 80050a4:	080050cb 	.word	0x080050cb
 80050a8:	080050c3 	.word	0x080050c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fd fcc6 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 80050b0:	61f8      	str	r0, [r7, #28]
        break;
 80050b2:	e010      	b.n	80050d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b4:	4b44      	ldr	r3, [pc, #272]	; (80051c8 <UART_SetConfig+0x314>)
 80050b6:	61fb      	str	r3, [r7, #28]
        break;
 80050b8:	e00d      	b.n	80050d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ba:	f7fd fc27 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80050be:	61f8      	str	r0, [r7, #28]
        break;
 80050c0:	e009      	b.n	80050d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c6:	61fb      	str	r3, [r7, #28]
        break;
 80050c8:	e005      	b.n	80050d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8107 	beq.w	80052ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4413      	add	r3, r2
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d305      	bcc.n	80050fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d903      	bls.n	8005102 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005100:	e0f4      	b.n	80052ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2200      	movs	r2, #0
 8005106:	461c      	mov	r4, r3
 8005108:	4615      	mov	r5, r2
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	022b      	lsls	r3, r5, #8
 8005114:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005118:	0222      	lsls	r2, r4, #8
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	6849      	ldr	r1, [r1, #4]
 800511e:	0849      	lsrs	r1, r1, #1
 8005120:	2000      	movs	r0, #0
 8005122:	4688      	mov	r8, r1
 8005124:	4681      	mov	r9, r0
 8005126:	eb12 0a08 	adds.w	sl, r2, r8
 800512a:	eb43 0b09 	adc.w	fp, r3, r9
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513c:	4650      	mov	r0, sl
 800513e:	4659      	mov	r1, fp
 8005140:	f7fb fc64 	bl	8000a0c <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005152:	d308      	bcc.n	8005166 <UART_SetConfig+0x2b2>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515a:	d204      	bcs.n	8005166 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e0c2      	b.n	80052ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800516c:	e0be      	b.n	80052ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005176:	d16a      	bne.n	800524e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800517c:	2b08      	cmp	r3, #8
 800517e:	d834      	bhi.n	80051ea <UART_SetConfig+0x336>
 8005180:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0x2d4>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051d5 	.word	0x080051d5
 8005194:	080051eb 	.word	0x080051eb
 8005198:	080051db 	.word	0x080051db
 800519c:	080051eb 	.word	0x080051eb
 80051a0:	080051eb 	.word	0x080051eb
 80051a4:	080051eb 	.word	0x080051eb
 80051a8:	080051e3 	.word	0x080051e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fd fc46 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 80051b0:	61f8      	str	r0, [r7, #28]
        break;
 80051b2:	e020      	b.n	80051f6 <UART_SetConfig+0x342>
 80051b4:	efff69f3 	.word	0xefff69f3
 80051b8:	40008000 	.word	0x40008000
 80051bc:	40013800 	.word	0x40013800
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40004400 	.word	0x40004400
 80051c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051cc:	f7fd fc4c 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 80051d0:	61f8      	str	r0, [r7, #28]
        break;
 80051d2:	e010      	b.n	80051f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d4:	4b4c      	ldr	r3, [pc, #304]	; (8005308 <UART_SetConfig+0x454>)
 80051d6:	61fb      	str	r3, [r7, #28]
        break;
 80051d8:	e00d      	b.n	80051f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051da:	f7fd fb97 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80051de:	61f8      	str	r0, [r7, #28]
        break;
 80051e0:	e009      	b.n	80051f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	61fb      	str	r3, [r7, #28]
        break;
 80051e8:	e005      	b.n	80051f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d077      	beq.n	80052ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	005a      	lsls	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	441a      	add	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b0f      	cmp	r3, #15
 8005216:	d916      	bls.n	8005246 <UART_SetConfig+0x392>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521e:	d212      	bcs.n	8005246 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f023 030f 	bic.w	r3, r3, #15
 8005228:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	b29b      	uxth	r3, r3
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	b29a      	uxth	r2, r3
 8005236:	8afb      	ldrh	r3, [r7, #22]
 8005238:	4313      	orrs	r3, r2
 800523a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	8afa      	ldrh	r2, [r7, #22]
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	e052      	b.n	80052ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800524c:	e04e      	b.n	80052ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800524e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005252:	2b08      	cmp	r3, #8
 8005254:	d827      	bhi.n	80052a6 <UART_SetConfig+0x3f2>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x3a8>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005281 	.word	0x08005281
 8005260:	08005289 	.word	0x08005289
 8005264:	08005291 	.word	0x08005291
 8005268:	080052a7 	.word	0x080052a7
 800526c:	08005297 	.word	0x08005297
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052a7 	.word	0x080052a7
 800527c:	0800529f 	.word	0x0800529f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fd fbdc 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8005284:	61f8      	str	r0, [r7, #28]
        break;
 8005286:	e014      	b.n	80052b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fd fbee 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 800528c:	61f8      	str	r0, [r7, #28]
        break;
 800528e:	e010      	b.n	80052b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005290:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <UART_SetConfig+0x454>)
 8005292:	61fb      	str	r3, [r7, #28]
        break;
 8005294:	e00d      	b.n	80052b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005296:	f7fd fb39 	bl	800290c <HAL_RCC_GetSysClockFreq>
 800529a:	61f8      	str	r0, [r7, #28]
        break;
 800529c:	e009      	b.n	80052b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	61fb      	str	r3, [r7, #28]
        break;
 80052a4:	e005      	b.n	80052b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052b0:	bf00      	nop
    }

    if (pclk != 0U)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d019      	beq.n	80052ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	085a      	lsrs	r2, r3, #1
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	441a      	add	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	d909      	bls.n	80052e6 <UART_SetConfig+0x432>
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d8:	d205      	bcs.n	80052e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	e002      	b.n	80052ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3728      	adds	r7, #40	; 0x28
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005306:	bf00      	nop
 8005308:	00f42400 	.word	0x00f42400

0800530c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01a      	beq.n	8005422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540a:	d10a      	bne.n	8005422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	605a      	str	r2, [r3, #4]
  }
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b098      	sub	sp, #96	; 0x60
 8005454:	af02      	add	r7, sp, #8
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005460:	f7fc f848 	bl	80014f4 <HAL_GetTick>
 8005464:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b08      	cmp	r3, #8
 8005472:	d12e      	bne.n	80054d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547c:	2200      	movs	r2, #0
 800547e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f88c 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d021      	beq.n	80054d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a2:	653b      	str	r3, [r7, #80]	; 0x50
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
 80054ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e6      	bne.n	800548e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e062      	b.n	8005598 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d149      	bne.n	8005574 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f856 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d03c      	beq.n	8005574 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	623b      	str	r3, [r7, #32]
   return(result);
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005518:	633b      	str	r3, [r7, #48]	; 0x30
 800551a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800551e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	60fb      	str	r3, [r7, #12]
   return(result);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	64bb      	str	r3, [r7, #72]	; 0x48
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3308      	adds	r3, #8
 800554a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800554c:	61fa      	str	r2, [r7, #28]
 800554e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	69b9      	ldr	r1, [r7, #24]
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	617b      	str	r3, [r7, #20]
   return(result);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e011      	b.n	8005598 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3758      	adds	r7, #88	; 0x58
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b0:	e049      	b.n	8005646 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d045      	beq.n	8005646 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fb ff9b 	bl	80014f4 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e048      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d031      	beq.n	8005646 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d110      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2208      	movs	r2, #8
 80055f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f838 	bl	800566e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2208      	movs	r2, #8
 8005602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e029      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800561c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005620:	d111      	bne.n	8005646 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800562a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f81e 	bl	800566e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e00f      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4013      	ands	r3, r2
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	bf0c      	ite	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	2300      	movne	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	429a      	cmp	r2, r3
 8005662:	d0a6      	beq.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800566e:	b480      	push	{r7}
 8005670:	b095      	sub	sp, #84	; 0x54
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800568a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005694:	643b      	str	r3, [r7, #64]	; 0x40
 8005696:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800569a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e6      	bne.n	8005676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3308      	adds	r3, #8
 80056ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d118      	bne.n	8005716 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f023 0310 	bic.w	r3, r3, #16
 80056f8:	647b      	str	r3, [r7, #68]	; 0x44
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6979      	ldr	r1, [r7, #20]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	613b      	str	r3, [r7, #16]
   return(result);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e6      	bne.n	80056e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	669a      	str	r2, [r3, #104]	; 0x68
}
 800572a:	bf00      	nop
 800572c:	3754      	adds	r7, #84	; 0x54
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575e:	bf00      	nop
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b088      	sub	sp, #32
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	60bb      	str	r3, [r7, #8]
   return(result);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	613b      	str	r3, [r7, #16]
   return(result);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e6      	bne.n	800576e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b6:	bf00      	nop
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <__NVIC_SetPriority>:
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	db0a      	blt.n	80057fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	490c      	ldr	r1, [pc, #48]	; (8005820 <__NVIC_SetPriority+0x4c>)
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	440b      	add	r3, r1
 80057f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057fc:	e00a      	b.n	8005814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4908      	ldr	r1, [pc, #32]	; (8005824 <__NVIC_SetPriority+0x50>)
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	3b04      	subs	r3, #4
 800580c:	0112      	lsls	r2, r2, #4
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	440b      	add	r3, r1
 8005812:	761a      	strb	r2, [r3, #24]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000e100 	.word	0xe000e100
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <SysTick_Handler+0x1c>)
 800582e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005830:	f001 fe1c 	bl	800746c <xTaskGetSchedulerState>
 8005834:	4603      	mov	r3, r0
 8005836:	2b01      	cmp	r3, #1
 8005838:	d001      	beq.n	800583e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800583a:	f002 fc05 	bl	8008048 <xPortSysTickHandler>
  }
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	e000e010 	.word	0xe000e010

08005848 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800584c:	2100      	movs	r1, #0
 800584e:	f06f 0004 	mvn.w	r0, #4
 8005852:	f7ff ffbf 	bl	80057d4 <__NVIC_SetPriority>
#endif
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005862:	f3ef 8305 	mrs	r3, IPSR
 8005866:	603b      	str	r3, [r7, #0]
  return(result);
 8005868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800586e:	f06f 0305 	mvn.w	r3, #5
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	e00c      	b.n	8005890 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <osKernelInitialize+0x44>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <osKernelInitialize+0x44>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005884:	2300      	movs	r3, #0
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	e002      	b.n	8005890 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005890:	687b      	ldr	r3, [r7, #4]
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000308 	.word	0x20000308

080058a4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80058aa:	f001 fddf 	bl	800746c <xTaskGetSchedulerState>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <osKernelGetState+0x1a>
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d105      	bne.n	80058c4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80058b8:	2302      	movs	r3, #2
 80058ba:	607b      	str	r3, [r7, #4]
      break;
 80058bc:	e00c      	b.n	80058d8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80058be:	2303      	movs	r3, #3
 80058c0:	607b      	str	r3, [r7, #4]
      break;
 80058c2:	e009      	b.n	80058d8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <osKernelGetState+0x40>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <osKernelGetState+0x2e>
        state = osKernelReady;
 80058cc:	2301      	movs	r3, #1
 80058ce:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80058d0:	e001      	b.n	80058d6 <osKernelGetState+0x32>
        state = osKernelInactive;
 80058d2:	2300      	movs	r3, #0
 80058d4:	607b      	str	r3, [r7, #4]
      break;
 80058d6:	bf00      	nop
  }

  return (state);
 80058d8:	687b      	ldr	r3, [r7, #4]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000308 	.word	0x20000308

080058e8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ee:	f3ef 8305 	mrs	r3, IPSR
 80058f2:	603b      	str	r3, [r7, #0]
  return(result);
 80058f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <osKernelStart+0x1a>
    stat = osErrorISR;
 80058fa:	f06f 0305 	mvn.w	r3, #5
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	e010      	b.n	8005924 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <osKernelStart+0x48>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d109      	bne.n	800591e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800590a:	f7ff ff9d 	bl	8005848 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <osKernelStart+0x48>)
 8005910:	2202      	movs	r2, #2
 8005912:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005914:	f001 f93c 	bl	8006b90 <vTaskStartScheduler>
      stat = osOK;
 8005918:	2300      	movs	r3, #0
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	e002      	b.n	8005924 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005924:	687b      	ldr	r3, [r7, #4]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000308 	.word	0x20000308

08005934 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800593a:	f3ef 8305 	mrs	r3, IPSR
 800593e:	603b      	str	r3, [r7, #0]
  return(result);
 8005940:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005946:	f001 fa4f 	bl	8006de8 <xTaskGetTickCountFromISR>
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	e002      	b.n	8005954 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800594e:	f001 fa3b 	bl	8006dc8 <xTaskGetTickCount>
 8005952:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005954:	687b      	ldr	r3, [r7, #4]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800595e:	b580      	push	{r7, lr}
 8005960:	b08e      	sub	sp, #56	; 0x38
 8005962:	af04      	add	r7, sp, #16
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800596e:	f3ef 8305 	mrs	r3, IPSR
 8005972:	617b      	str	r3, [r7, #20]
  return(result);
 8005974:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005976:	2b00      	cmp	r3, #0
 8005978:	d17e      	bne.n	8005a78 <osThreadNew+0x11a>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d07b      	beq.n	8005a78 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005984:	2318      	movs	r3, #24
 8005986:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800598c:	f04f 33ff 	mov.w	r3, #4294967295
 8005990:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d045      	beq.n	8005a24 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <osThreadNew+0x48>
        name = attr->name;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <osThreadNew+0x6e>
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b38      	cmp	r3, #56	; 0x38
 80059be:	d805      	bhi.n	80059cc <osThreadNew+0x6e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <osThreadNew+0x72>
        return (NULL);
 80059cc:	2300      	movs	r3, #0
 80059ce:	e054      	b.n	8005a7a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00e      	beq.n	8005a06 <osThreadNew+0xa8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2ba7      	cmp	r3, #167	; 0xa7
 80059ee:	d90a      	bls.n	8005a06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <osThreadNew+0xa8>
        mem = 1;
 8005a00:	2301      	movs	r3, #1
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	e010      	b.n	8005a28 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10c      	bne.n	8005a28 <osThreadNew+0xca>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d108      	bne.n	8005a28 <osThreadNew+0xca>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <osThreadNew+0xca>
          mem = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e001      	b.n	8005a28 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d110      	bne.n	8005a50 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a36:	9202      	str	r2, [sp, #8]
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fe39 	bl	80066bc <xTaskCreateStatic>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	e013      	b.n	8005a78 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d110      	bne.n	8005a78 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	f107 0310 	add.w	r3, r7, #16
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fe84 	bl	8006776 <xTaskCreate>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <osThreadNew+0x11a>
            hTask = NULL;
 8005a74:	2300      	movs	r3, #0
 8005a76:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a78:	693b      	ldr	r3, [r7, #16]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3728      	adds	r7, #40	; 0x28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a8a:	f3ef 8305 	mrs	r3, IPSR
 8005a8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <osDelay+0x1c>
    stat = osErrorISR;
 8005a96:	f06f 0305 	mvn.w	r3, #5
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e007      	b.n	8005aae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <osDelay+0x2c>
      vTaskDelay(ticks);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f83d 	bl	8006b28 <vTaskDelay>
    }
  }

  return (stat);
 8005aae:	68fb      	ldr	r3, [r7, #12]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac0:	f3ef 8305 	mrs	r3, IPSR
 8005ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8005acc:	f06f 0305 	mvn.w	r3, #5
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e019      	b.n	8005b08 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8005ad8:	f001 f976 	bl	8006dc8 <xTaskGetTickCount>
 8005adc:	4603      	mov	r3, r0
 8005ade:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <osDelayUntil+0x4a>
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db06      	blt.n	8005b02 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8005af4:	f107 0308 	add.w	r3, r7, #8
 8005af8:	6939      	ldr	r1, [r7, #16]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ff96 	bl	8006a2c <vTaskDelayUntil>
 8005b00:	e002      	b.n	8005b08 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005b02:	f06f 0303 	mvn.w	r3, #3
 8005b06:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005b08:	697b      	ldr	r3, [r7, #20]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <vApplicationGetIdleTaskMemory+0x30>)
 8005b2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	601a      	str	r2, [r3, #0]
}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	2000030c 	.word	0x2000030c
 8005b44:	200003b4 	.word	0x200003b4

08005b48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4a07      	ldr	r2, [pc, #28]	; (8005b74 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4a06      	ldr	r2, [pc, #24]	; (8005b78 <vApplicationGetTimerTaskMemory+0x30>)
 8005b5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b66:	601a      	str	r2, [r3, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	200005b4 	.word	0x200005b4
 8005b78:	2000065c 	.word	0x2000065c

08005b7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f103 0208 	add.w	r2, r3, #8
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f04f 32ff 	mov.w	r2, #4294967295
 8005b94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f103 0208 	add.w	r2, r3, #8
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f103 0208 	add.w	r2, r3, #8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
}
 8005c12:	bf00      	nop
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d103      	bne.n	8005c3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	e00c      	b.n	8005c58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3308      	adds	r3, #8
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e002      	b.n	8005c4c <vListInsert+0x2e>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d2f6      	bcs.n	8005c46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6892      	ldr	r2, [r2, #8]
 8005ca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6852      	ldr	r2, [r2, #4]
 8005cb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d103      	bne.n	8005cc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	1e5a      	subs	r2, r3, #1
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d0e:	f002 f909 	bl	8007f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	441a      	add	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	441a      	add	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	22ff      	movs	r2, #255	; 0xff
 8005d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	22ff      	movs	r2, #255	; 0xff
 8005d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d114      	bne.n	8005d8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01a      	beq.n	8005da2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3310      	adds	r3, #16
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f9b9 	bl	80070e8 <xTaskRemoveFromEventList>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d012      	beq.n	8005da2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <xQueueGenericReset+0xcc>)
 8005d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	e009      	b.n	8005da2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3310      	adds	r3, #16
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fef2 	bl	8005b7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3324      	adds	r3, #36	; 0x24
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff feed 	bl	8005b7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005da2:	f002 f8ef 	bl	8007f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005da6:	2301      	movs	r3, #1
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08e      	sub	sp, #56	; 0x38
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <xQueueGenericCreateStatic+0x52>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <xQueueGenericCreateStatic+0x56>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xQueueGenericCreateStatic+0x58>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	623b      	str	r3, [r7, #32]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <xQueueGenericCreateStatic+0x7e>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <xQueueGenericCreateStatic+0x82>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <xQueueGenericCreateStatic+0x84>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	61fb      	str	r3, [r7, #28]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e52:	2350      	movs	r3, #80	; 0x50
 8005e54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b50      	cmp	r3, #80	; 0x50
 8005e5a:	d00a      	beq.n	8005e72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	61bb      	str	r3, [r7, #24]
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f805 	bl	8005ea4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3730      	adds	r7, #48	; 0x30
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e002      	b.n	8005ec6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	69b8      	ldr	r0, [r7, #24]
 8005ed6:	f7ff ff05 	bl	8005ce4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08e      	sub	sp, #56	; 0x38
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005efa:	2300      	movs	r3, #0
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xQueueGenericSend+0x32>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <xQueueGenericSend+0x40>
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <xQueueGenericSend+0x44>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <xQueueGenericSend+0x46>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10a      	bne.n	8005f4c <xQueueGenericSend+0x60>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f48:	bf00      	nop
 8005f4a:	e7fe      	b.n	8005f4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d103      	bne.n	8005f5a <xQueueGenericSend+0x6e>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <xQueueGenericSend+0x72>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <xQueueGenericSend+0x74>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xQueueGenericSend+0x8e>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	623b      	str	r3, [r7, #32]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f7a:	f001 fa77 	bl	800746c <xTaskGetSchedulerState>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <xQueueGenericSend+0x9e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <xQueueGenericSend+0xa2>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <xQueueGenericSend+0xa4>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <xQueueGenericSend+0xbe>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	61fb      	str	r3, [r7, #28]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005faa:	f001 ffbb 	bl	8007f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <xQueueGenericSend+0xd4>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d129      	bne.n	8006014 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fc6:	f000 fa0b 	bl	80063e0 <prvCopyDataToQueue>
 8005fca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d010      	beq.n	8005ff6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	3324      	adds	r3, #36	; 0x24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 f885 	bl	80070e8 <xTaskRemoveFromEventList>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d013      	beq.n	800600c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fe4:	4b3f      	ldr	r3, [pc, #252]	; (80060e4 <xQueueGenericSend+0x1f8>)
 8005fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	e00a      	b.n	800600c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ffc:	4b39      	ldr	r3, [pc, #228]	; (80060e4 <xQueueGenericSend+0x1f8>)
 8005ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800600c:	f001 ffba 	bl	8007f84 <vPortExitCritical>
				return pdPASS;
 8006010:	2301      	movs	r3, #1
 8006012:	e063      	b.n	80060dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800601a:	f001 ffb3 	bl	8007f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800601e:	2300      	movs	r3, #0
 8006020:	e05c      	b.n	80060dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006028:	f107 0314 	add.w	r3, r7, #20
 800602c:	4618      	mov	r0, r3
 800602e:	f001 f8bf 	bl	80071b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006032:	2301      	movs	r3, #1
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006036:	f001 ffa5 	bl	8007f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800603a:	f000 fe19 	bl	8006c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800603e:	f001 ff71 	bl	8007f24 <vPortEnterCritical>
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006048:	b25b      	sxtb	r3, r3
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604e:	d103      	bne.n	8006058 <xQueueGenericSend+0x16c>
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800605e:	b25b      	sxtb	r3, r3
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d103      	bne.n	800606e <xQueueGenericSend+0x182>
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800606e:	f001 ff89 	bl	8007f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006072:	1d3a      	adds	r2, r7, #4
 8006074:	f107 0314 	add.w	r3, r7, #20
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f8ae 	bl	80071dc <xTaskCheckForTimeOut>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d124      	bne.n	80060d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006088:	f000 faa2 	bl	80065d0 <prvIsQueueFull>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d018      	beq.n	80060c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	3310      	adds	r3, #16
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4611      	mov	r1, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f000 ffd4 	bl	8007048 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a2:	f000 fa2d 	bl	8006500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060a6:	f000 fdf1 	bl	8006c8c <xTaskResumeAll>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f47f af7c 	bne.w	8005faa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060b2:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <xQueueGenericSend+0x1f8>)
 80060b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	e772      	b.n	8005faa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060c6:	f000 fa1b 	bl	8006500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ca:	f000 fddf 	bl	8006c8c <xTaskResumeAll>
 80060ce:	e76c      	b.n	8005faa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d2:	f000 fa15 	bl	8006500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060d6:	f000 fdd9 	bl	8006c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3738      	adds	r7, #56	; 0x38
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	e000ed04 	.word	0xe000ed04

080060e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b090      	sub	sp, #64	; 0x40
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d103      	bne.n	8006124 <xQueueGenericSendFromISR+0x3c>
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <xQueueGenericSendFromISR+0x40>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <xQueueGenericSendFromISR+0x42>
 8006128:	2300      	movs	r3, #0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d103      	bne.n	8006152 <xQueueGenericSendFromISR+0x6a>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <xQueueGenericSendFromISR+0x6e>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <xQueueGenericSendFromISR+0x70>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	623b      	str	r3, [r7, #32]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006172:	f001 ffb9 	bl	80080e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006176:	f3ef 8211 	mrs	r2, BASEPRI
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	61fa      	str	r2, [r7, #28]
 800618c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800618e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <xQueueGenericSendFromISR+0xbc>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d12f      	bne.n	8006204 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061ba:	f000 f911 	bl	80063e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d112      	bne.n	80061ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d016      	beq.n	80061fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	3324      	adds	r3, #36	; 0x24
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 ff87 	bl	80070e8 <xTaskRemoveFromEventList>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00e      	beq.n	80061fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e007      	b.n	80061fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061f2:	3301      	adds	r3, #1
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	b25a      	sxtb	r2, r3
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061fe:	2301      	movs	r3, #1
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006202:	e001      	b.n	8006208 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006204:	2300      	movs	r3, #0
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006212:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006216:	4618      	mov	r0, r3
 8006218:	3740      	adds	r7, #64	; 0x40
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08c      	sub	sp, #48	; 0x30
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800622c:	2300      	movs	r3, #0
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <xQueueReceive+0x30>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	623b      	str	r3, [r7, #32]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <xQueueReceive+0x3e>
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <xQueueReceive+0x42>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <xQueueReceive+0x44>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xQueueReceive+0x5e>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	61fb      	str	r3, [r7, #28]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800627e:	f001 f8f5 	bl	800746c <xTaskGetSchedulerState>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <xQueueReceive+0x6e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <xQueueReceive+0x72>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <xQueueReceive+0x74>
 8006292:	2300      	movs	r3, #0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <xQueueReceive+0x8e>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	61bb      	str	r3, [r7, #24]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062ae:	f001 fe39 	bl	8007f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01f      	beq.n	80062fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c2:	f000 f8f7 	bl	80064b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	1e5a      	subs	r2, r3, #1
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	3310      	adds	r3, #16
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 ff04 	bl	80070e8 <xTaskRemoveFromEventList>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062e6:	4b3d      	ldr	r3, [pc, #244]	; (80063dc <xQueueReceive+0x1bc>)
 80062e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062f6:	f001 fe45 	bl	8007f84 <vPortExitCritical>
				return pdPASS;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e069      	b.n	80063d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d103      	bne.n	800630c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006304:	f001 fe3e 	bl	8007f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006308:	2300      	movs	r3, #0
 800630a:	e062      	b.n	80063d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006312:	f107 0310 	add.w	r3, r7, #16
 8006316:	4618      	mov	r0, r3
 8006318:	f000 ff4a 	bl	80071b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006320:	f001 fe30 	bl	8007f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006324:	f000 fca4 	bl	8006c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006328:	f001 fdfc 	bl	8007f24 <vPortEnterCritical>
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006332:	b25b      	sxtb	r3, r3
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d103      	bne.n	8006342 <xQueueReceive+0x122>
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006348:	b25b      	sxtb	r3, r3
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d103      	bne.n	8006358 <xQueueReceive+0x138>
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006358:	f001 fe14 	bl	8007f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800635c:	1d3a      	adds	r2, r7, #4
 800635e:	f107 0310 	add.w	r3, r7, #16
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f000 ff39 	bl	80071dc <xTaskCheckForTimeOut>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d123      	bne.n	80063b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006372:	f000 f917 	bl	80065a4 <prvIsQueueEmpty>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d017      	beq.n	80063ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	3324      	adds	r3, #36	; 0x24
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4611      	mov	r1, r2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fe5f 	bl	8007048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800638a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638c:	f000 f8b8 	bl	8006500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006390:	f000 fc7c 	bl	8006c8c <xTaskResumeAll>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d189      	bne.n	80062ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800639a:	4b10      	ldr	r3, [pc, #64]	; (80063dc <xQueueReceive+0x1bc>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	e780      	b.n	80062ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ae:	f000 f8a7 	bl	8006500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063b2:	f000 fc6b 	bl	8006c8c <xTaskResumeAll>
 80063b6:	e77a      	b.n	80062ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ba:	f000 f8a1 	bl	8006500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063be:	f000 fc65 	bl	8006c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c4:	f000 f8ee 	bl	80065a4 <prvIsQueueEmpty>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f43f af6f 	beq.w	80062ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3730      	adds	r7, #48	; 0x30
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10d      	bne.n	800641a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d14d      	bne.n	80064a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f001 f84c 	bl	80074a8 <xTaskPriorityDisinherit>
 8006410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	e043      	b.n	80064a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d119      	bne.n	8006454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6858      	ldr	r0, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	461a      	mov	r2, r3
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	f003 fbb2 	bl	8009b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	441a      	add	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d32b      	bcc.n	80064a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	e026      	b.n	80064a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68d8      	ldr	r0, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	461a      	mov	r2, r3
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	f003 fb98 	bl	8009b94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	425b      	negs	r3, r3
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d207      	bcs.n	8006490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	425b      	negs	r3, r3
 800648a:	441a      	add	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d105      	bne.n	80064a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	3b01      	subs	r3, #1
 80064a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064aa:	697b      	ldr	r3, [r7, #20]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d018      	beq.n	80064f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	441a      	add	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d303      	bcc.n	80064e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68d9      	ldr	r1, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	461a      	mov	r2, r3
 80064f2:	6838      	ldr	r0, [r7, #0]
 80064f4:	f003 fb4e 	bl	8009b94 <memcpy>
	}
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006508:	f001 fd0c 	bl	8007f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006514:	e011      	b.n	800653a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	2b00      	cmp	r3, #0
 800651c:	d012      	beq.n	8006544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3324      	adds	r3, #36	; 0x24
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fde0 	bl	80070e8 <xTaskRemoveFromEventList>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800652e:	f000 feb7 	bl	80072a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	3b01      	subs	r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800653a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	dce9      	bgt.n	8006516 <prvUnlockQueue+0x16>
 8006542:	e000      	b.n	8006546 <prvUnlockQueue+0x46>
					break;
 8006544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	22ff      	movs	r2, #255	; 0xff
 800654a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800654e:	f001 fd19 	bl	8007f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006552:	f001 fce7 	bl	8007f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800655c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800655e:	e011      	b.n	8006584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d012      	beq.n	800658e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3310      	adds	r3, #16
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fdbb 	bl	80070e8 <xTaskRemoveFromEventList>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006578:	f000 fe92 	bl	80072a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	3b01      	subs	r3, #1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006588:	2b00      	cmp	r3, #0
 800658a:	dce9      	bgt.n	8006560 <prvUnlockQueue+0x60>
 800658c:	e000      	b.n	8006590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800658e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	22ff      	movs	r2, #255	; 0xff
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006598:	f001 fcf4 	bl	8007f84 <vPortExitCritical>
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065ac:	f001 fcba 	bl	8007f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e001      	b.n	80065c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065c2:	f001 fcdf 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 80065c6:	68fb      	ldr	r3, [r7, #12]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065d8:	f001 fca4 	bl	8007f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d102      	bne.n	80065ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065e8:	2301      	movs	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e001      	b.n	80065f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f2:	f001 fcc7 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e014      	b.n	800663a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006610:	4a0f      	ldr	r2, [pc, #60]	; (8006650 <vQueueAddToRegistry+0x50>)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800661c:	490c      	ldr	r1, [pc, #48]	; (8006650 <vQueueAddToRegistry+0x50>)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006626:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <vQueueAddToRegistry+0x50>)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006632:	e006      	b.n	8006642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b07      	cmp	r3, #7
 800663e:	d9e7      	bls.n	8006610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000a5c 	.word	0x20000a5c

08006654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006664:	f001 fc5e 	bl	8007f24 <vPortEnterCritical>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800666e:	b25b      	sxtb	r3, r3
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d103      	bne.n	800667e <vQueueWaitForMessageRestricted+0x2a>
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006684:	b25b      	sxtb	r3, r3
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d103      	bne.n	8006694 <vQueueWaitForMessageRestricted+0x40>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006694:	f001 fc76 	bl	8007f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fcf1 	bl	8007090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066ae:	6978      	ldr	r0, [r7, #20]
 80066b0:	f7ff ff26 	bl	8006500 <prvUnlockQueue>
	}
 80066b4:	bf00      	nop
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08e      	sub	sp, #56	; 0x38
 80066c0:	af04      	add	r7, sp, #16
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	623b      	str	r3, [r7, #32]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <xTaskCreateStatic+0x46>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	61fb      	str	r3, [r7, #28]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006702:	23a8      	movs	r3, #168	; 0xa8
 8006704:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2ba8      	cmp	r3, #168	; 0xa8
 800670a:	d00a      	beq.n	8006722 <xTaskCreateStatic+0x66>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	61bb      	str	r3, [r7, #24]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006722:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01e      	beq.n	8006768 <xTaskCreateStatic+0xac>
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01b      	beq.n	8006768 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006738:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	2202      	movs	r2, #2
 800673e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006742:	2300      	movs	r3, #0
 8006744:	9303      	str	r3, [sp, #12]
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	f107 0314 	add.w	r3, r7, #20
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f850 	bl	8006800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006762:	f000 f8f3 	bl	800694c <prvAddNewTaskToReadyList>
 8006766:	e001      	b.n	800676c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800676c:	697b      	ldr	r3, [r7, #20]
	}
 800676e:	4618      	mov	r0, r3
 8006770:	3728      	adds	r7, #40	; 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006776:	b580      	push	{r7, lr}
 8006778:	b08c      	sub	sp, #48	; 0x30
 800677a:	af04      	add	r7, sp, #16
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	603b      	str	r3, [r7, #0]
 8006782:	4613      	mov	r3, r2
 8006784:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4618      	mov	r0, r3
 800678c:	f001 fcec 	bl	8008168 <pvPortMalloc>
 8006790:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00e      	beq.n	80067b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006798:	20a8      	movs	r0, #168	; 0xa8
 800679a:	f001 fce5 	bl	8008168 <pvPortMalloc>
 800679e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30
 80067ac:	e005      	b.n	80067ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067ae:	6978      	ldr	r0, [r7, #20]
 80067b0:	f001 fda6 	bl	8008300 <vPortFree>
 80067b4:	e001      	b.n	80067ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d017      	beq.n	80067f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067c8:	88fa      	ldrh	r2, [r7, #6]
 80067ca:	2300      	movs	r3, #0
 80067cc:	9303      	str	r3, [sp, #12]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	9302      	str	r3, [sp, #8]
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f80e 	bl	8006800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067e4:	69f8      	ldr	r0, [r7, #28]
 80067e6:	f000 f8b1 	bl	800694c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067ea:	2301      	movs	r3, #1
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	e002      	b.n	80067f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067f6:	69bb      	ldr	r3, [r7, #24]
	}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	461a      	mov	r2, r3
 8006818:	21a5      	movs	r1, #165	; 0xa5
 800681a:	f003 f936 	bl	8009a8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006828:	3b01      	subs	r3, #1
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f023 0307 	bic.w	r3, r3, #7
 8006836:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	617b      	str	r3, [r7, #20]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01f      	beq.n	800689e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	e012      	b.n	800688a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	7819      	ldrb	r1, [r3, #0]
 800686c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	3334      	adds	r3, #52	; 0x34
 8006874:	460a      	mov	r2, r1
 8006876:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	2b0f      	cmp	r3, #15
 800688e:	d9e9      	bls.n	8006864 <prvInitialiseNewTask+0x64>
 8006890:	e000      	b.n	8006894 <prvInitialiseNewTask+0x94>
			{
				break;
 8006892:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800689c:	e003      	b.n	80068a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	2b37      	cmp	r3, #55	; 0x37
 80068aa:	d901      	bls.n	80068b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068ac:	2337      	movs	r3, #55	; 0x37
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	2200      	movs	r2, #0
 80068c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	3304      	adds	r3, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff f978 	bl	8005bbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	3318      	adds	r3, #24
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff f973 	bl	8005bbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	3354      	adds	r3, #84	; 0x54
 8006900:	224c      	movs	r2, #76	; 0x4c
 8006902:	2100      	movs	r1, #0
 8006904:	4618      	mov	r0, r3
 8006906:	f003 f8c0 	bl	8009a8a <memset>
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	4a0c      	ldr	r2, [pc, #48]	; (8006940 <prvInitialiseNewTask+0x140>)
 800690e:	659a      	str	r2, [r3, #88]	; 0x58
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <prvInitialiseNewTask+0x144>)
 8006914:	65da      	str	r2, [r3, #92]	; 0x5c
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	4a0b      	ldr	r2, [pc, #44]	; (8006948 <prvInitialiseNewTask+0x148>)
 800691a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	69b8      	ldr	r0, [r7, #24]
 8006922:	f001 f9d1 	bl	8007cc8 <pxPortInitialiseStack>
 8006926:	4602      	mov	r2, r0
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006936:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006938:	bf00      	nop
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20001efc 	.word	0x20001efc
 8006944:	20001f64 	.word	0x20001f64
 8006948:	20001fcc 	.word	0x20001fcc

0800694c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006954:	f001 fae6 	bl	8007f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006958:	4b2d      	ldr	r3, [pc, #180]	; (8006a10 <prvAddNewTaskToReadyList+0xc4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	4a2c      	ldr	r2, [pc, #176]	; (8006a10 <prvAddNewTaskToReadyList+0xc4>)
 8006960:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006962:	4b2c      	ldr	r3, [pc, #176]	; (8006a14 <prvAddNewTaskToReadyList+0xc8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800696a:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <prvAddNewTaskToReadyList+0xc8>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006970:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <prvAddNewTaskToReadyList+0xc4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d110      	bne.n	800699a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006978:	f000 fcb6 	bl	80072e8 <prvInitialiseTaskLists>
 800697c:	e00d      	b.n	800699a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800697e:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <prvAddNewTaskToReadyList+0xcc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006986:	4b23      	ldr	r3, [pc, #140]	; (8006a14 <prvAddNewTaskToReadyList+0xc8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	429a      	cmp	r2, r3
 8006992:	d802      	bhi.n	800699a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006994:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <prvAddNewTaskToReadyList+0xc8>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800699a:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <prvAddNewTaskToReadyList+0xd0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3301      	adds	r3, #1
 80069a0:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <prvAddNewTaskToReadyList+0xd0>)
 80069a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069a4:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <prvAddNewTaskToReadyList+0xd0>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <prvAddNewTaskToReadyList+0xd4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d903      	bls.n	80069c0 <prvAddNewTaskToReadyList+0x74>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <prvAddNewTaskToReadyList+0xd4>)
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <prvAddNewTaskToReadyList+0xd8>)
 80069ce:	441a      	add	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4619      	mov	r1, r3
 80069d6:	4610      	mov	r0, r2
 80069d8:	f7ff f8fd 	bl	8005bd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069dc:	f001 fad2 	bl	8007f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069e0:	4b0d      	ldr	r3, [pc, #52]	; (8006a18 <prvAddNewTaskToReadyList+0xcc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00e      	beq.n	8006a06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <prvAddNewTaskToReadyList+0xc8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d207      	bcs.n	8006a06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069f6:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <prvAddNewTaskToReadyList+0xdc>)
 80069f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000f70 	.word	0x20000f70
 8006a14:	20000a9c 	.word	0x20000a9c
 8006a18:	20000f7c 	.word	0x20000f7c
 8006a1c:	20000f8c 	.word	0x20000f8c
 8006a20:	20000f78 	.word	0x20000f78
 8006a24:	20000aa0 	.word	0x20000aa0
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08a      	sub	sp, #40	; 0x28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <vTaskDelayUntil+0x2a>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	617b      	str	r3, [r7, #20]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <vTaskDelayUntil+0x46>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	613b      	str	r3, [r7, #16]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006a72:	4b2a      	ldr	r3, [pc, #168]	; (8006b1c <vTaskDelayUntil+0xf0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <vTaskDelayUntil+0x64>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	60fb      	str	r3, [r7, #12]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006a90:	f000 f8ee 	bl	8006c70 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006a94:	4b22      	ldr	r3, [pc, #136]	; (8006b20 <vTaskDelayUntil+0xf4>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6a3a      	ldr	r2, [r7, #32]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d20b      	bcs.n	8006ac6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d211      	bcs.n	8006adc <vTaskDelayUntil+0xb0>
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d90d      	bls.n	8006adc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac4:	e00a      	b.n	8006adc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d303      	bcc.n	8006ad8 <vTaskDelayUntil+0xac>
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d901      	bls.n	8006adc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d006      	beq.n	8006af6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2100      	movs	r1, #0
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fd47 	bl	8007584 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006af6:	f000 f8c9 	bl	8006c8c <xTaskResumeAll>
 8006afa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d107      	bne.n	8006b12 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <vTaskDelayUntil+0xf8>)
 8006b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b12:	bf00      	nop
 8006b14:	3728      	adds	r7, #40	; 0x28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000f98 	.word	0x20000f98
 8006b20:	20000f74 	.word	0x20000f74
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d017      	beq.n	8006b6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <vTaskDelay+0x60>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <vTaskDelay+0x30>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	60bb      	str	r3, [r7, #8]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b58:	f000 f88a 	bl	8006c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fd10 	bl	8007584 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b64:	f000 f892 	bl	8006c8c <xTaskResumeAll>
 8006b68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d107      	bne.n	8006b80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <vTaskDelay+0x64>)
 8006b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000f98 	.word	0x20000f98
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	1d39      	adds	r1, r7, #4
 8006ba2:	f107 0308 	add.w	r3, r7, #8
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe ffb4 	bl	8005b14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	9202      	str	r2, [sp, #8]
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	460a      	mov	r2, r1
 8006bbe:	4924      	ldr	r1, [pc, #144]	; (8006c50 <vTaskStartScheduler+0xc0>)
 8006bc0:	4824      	ldr	r0, [pc, #144]	; (8006c54 <vTaskStartScheduler+0xc4>)
 8006bc2:	f7ff fd7b 	bl	80066bc <xTaskCreateStatic>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	4a23      	ldr	r2, [pc, #140]	; (8006c58 <vTaskStartScheduler+0xc8>)
 8006bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bcc:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <vTaskStartScheduler+0xc8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e001      	b.n	8006bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d102      	bne.n	8006bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006be4:	f000 fd22 	bl	800762c <xTimerCreateTimerTask>
 8006be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d11b      	bne.n	8006c28 <vTaskStartScheduler+0x98>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	613b      	str	r3, [r7, #16]
}
 8006c02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <vTaskStartScheduler+0xcc>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3354      	adds	r3, #84	; 0x54
 8006c0a:	4a15      	ldr	r2, [pc, #84]	; (8006c60 <vTaskStartScheduler+0xd0>)
 8006c0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c0e:	4b15      	ldr	r3, [pc, #84]	; (8006c64 <vTaskStartScheduler+0xd4>)
 8006c10:	f04f 32ff 	mov.w	r2, #4294967295
 8006c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c16:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <vTaskStartScheduler+0xd8>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c1c:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <vTaskStartScheduler+0xdc>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c22:	f001 f8dd 	bl	8007de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c26:	e00e      	b.n	8006c46 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2e:	d10a      	bne.n	8006c46 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	60fb      	str	r3, [r7, #12]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <vTaskStartScheduler+0xb4>
}
 8006c46:	bf00      	nop
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	08009c84 	.word	0x08009c84
 8006c54:	080072b9 	.word	0x080072b9
 8006c58:	20000f94 	.word	0x20000f94
 8006c5c:	20000a9c 	.word	0x20000a9c
 8006c60:	2000007c 	.word	0x2000007c
 8006c64:	20000f90 	.word	0x20000f90
 8006c68:	20000f7c 	.word	0x20000f7c
 8006c6c:	20000f74 	.word	0x20000f74

08006c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <vTaskSuspendAll+0x18>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	4a03      	ldr	r2, [pc, #12]	; (8006c88 <vTaskSuspendAll+0x18>)
 8006c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c7e:	bf00      	nop
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000f98 	.word	0x20000f98

08006c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c9a:	4b42      	ldr	r3, [pc, #264]	; (8006da4 <xTaskResumeAll+0x118>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	603b      	str	r3, [r7, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cb8:	f001 f934 	bl	8007f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cbc:	4b39      	ldr	r3, [pc, #228]	; (8006da4 <xTaskResumeAll+0x118>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	4a38      	ldr	r2, [pc, #224]	; (8006da4 <xTaskResumeAll+0x118>)
 8006cc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc6:	4b37      	ldr	r3, [pc, #220]	; (8006da4 <xTaskResumeAll+0x118>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d162      	bne.n	8006d94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cce:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <xTaskResumeAll+0x11c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d05e      	beq.n	8006d94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cd6:	e02f      	b.n	8006d38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd8:	4b34      	ldr	r3, [pc, #208]	; (8006dac <xTaskResumeAll+0x120>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3318      	adds	r3, #24
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fe ffd3 	bl	8005c90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe ffce 	bl	8005c90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf8:	4b2d      	ldr	r3, [pc, #180]	; (8006db0 <xTaskResumeAll+0x124>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d903      	bls.n	8006d08 <xTaskResumeAll+0x7c>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <xTaskResumeAll+0x124>)
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4a27      	ldr	r2, [pc, #156]	; (8006db4 <xTaskResumeAll+0x128>)
 8006d16:	441a      	add	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7fe ff59 	bl	8005bd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4b23      	ldr	r3, [pc, #140]	; (8006db8 <xTaskResumeAll+0x12c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d32:	4b22      	ldr	r3, [pc, #136]	; (8006dbc <xTaskResumeAll+0x130>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d38:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <xTaskResumeAll+0x120>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1cb      	bne.n	8006cd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d46:	f000 fb71 	bl	800742c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d4a:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <xTaskResumeAll+0x134>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d010      	beq.n	8006d78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d56:	f000 f859 	bl	8006e0c <xTaskIncrementTick>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006d60:	4b16      	ldr	r3, [pc, #88]	; (8006dbc <xTaskResumeAll+0x130>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f1      	bne.n	8006d56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <xTaskResumeAll+0x134>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d78:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <xTaskResumeAll+0x130>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d009      	beq.n	8006d94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d80:	2301      	movs	r3, #1
 8006d82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <xTaskResumeAll+0x138>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d94:	f001 f8f6 	bl	8007f84 <vPortExitCritical>

	return xAlreadyYielded;
 8006d98:	68bb      	ldr	r3, [r7, #8]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20000f98 	.word	0x20000f98
 8006da8:	20000f70 	.word	0x20000f70
 8006dac:	20000f30 	.word	0x20000f30
 8006db0:	20000f78 	.word	0x20000f78
 8006db4:	20000aa0 	.word	0x20000aa0
 8006db8:	20000a9c 	.word	0x20000a9c
 8006dbc:	20000f84 	.word	0x20000f84
 8006dc0:	20000f80 	.word	0x20000f80
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dce:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <xTaskGetTickCount+0x1c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006dd4:	687b      	ldr	r3, [r7, #4]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20000f74 	.word	0x20000f74

08006de8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dee:	f001 f97b 	bl	80080e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006df2:	2300      	movs	r3, #0
 8006df4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006df6:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <xTaskGetTickCountFromISR+0x20>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dfc:	683b      	ldr	r3, [r7, #0]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000f74 	.word	0x20000f74

08006e0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e16:	4b4f      	ldr	r3, [pc, #316]	; (8006f54 <xTaskIncrementTick+0x148>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 808f 	bne.w	8006f3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e20:	4b4d      	ldr	r3, [pc, #308]	; (8006f58 <xTaskIncrementTick+0x14c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e28:	4a4b      	ldr	r2, [pc, #300]	; (8006f58 <xTaskIncrementTick+0x14c>)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d120      	bne.n	8006e76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e34:	4b49      	ldr	r3, [pc, #292]	; (8006f5c <xTaskIncrementTick+0x150>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	603b      	str	r3, [r7, #0]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <xTaskIncrementTick+0x46>
 8006e54:	4b41      	ldr	r3, [pc, #260]	; (8006f5c <xTaskIncrementTick+0x150>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	4b41      	ldr	r3, [pc, #260]	; (8006f60 <xTaskIncrementTick+0x154>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a3f      	ldr	r2, [pc, #252]	; (8006f5c <xTaskIncrementTick+0x150>)
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	4a3f      	ldr	r2, [pc, #252]	; (8006f60 <xTaskIncrementTick+0x154>)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	4b3e      	ldr	r3, [pc, #248]	; (8006f64 <xTaskIncrementTick+0x158>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	4a3d      	ldr	r2, [pc, #244]	; (8006f64 <xTaskIncrementTick+0x158>)
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	f000 fadb 	bl	800742c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e76:	4b3c      	ldr	r3, [pc, #240]	; (8006f68 <xTaskIncrementTick+0x15c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d349      	bcc.n	8006f14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e80:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <xTaskIncrementTick+0x150>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8a:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <xTaskIncrementTick+0x15c>)
 8006e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e90:	601a      	str	r2, [r3, #0]
					break;
 8006e92:	e03f      	b.n	8006f14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e94:	4b31      	ldr	r3, [pc, #196]	; (8006f5c <xTaskIncrementTick+0x150>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d203      	bcs.n	8006eb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eac:	4a2e      	ldr	r2, [pc, #184]	; (8006f68 <xTaskIncrementTick+0x15c>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006eb2:	e02f      	b.n	8006f14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fee9 	bl	8005c90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	3318      	adds	r3, #24
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fee0 	bl	8005c90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4b25      	ldr	r3, [pc, #148]	; (8006f6c <xTaskIncrementTick+0x160>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d903      	bls.n	8006ee4 <xTaskIncrementTick+0xd8>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	4a22      	ldr	r2, [pc, #136]	; (8006f6c <xTaskIncrementTick+0x160>)
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <xTaskIncrementTick+0x164>)
 8006ef2:	441a      	add	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe fe6b 	bl	8005bd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4b1b      	ldr	r3, [pc, #108]	; (8006f74 <xTaskIncrementTick+0x168>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d3b8      	bcc.n	8006e80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f12:	e7b5      	b.n	8006e80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <xTaskIncrementTick+0x168>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1a:	4915      	ldr	r1, [pc, #84]	; (8006f70 <xTaskIncrementTick+0x164>)
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d901      	bls.n	8006f30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <xTaskIncrementTick+0x16c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	e004      	b.n	8006f48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <xTaskIncrementTick+0x170>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	4a0d      	ldr	r2, [pc, #52]	; (8006f7c <xTaskIncrementTick+0x170>)
 8006f46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f48:	697b      	ldr	r3, [r7, #20]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000f98 	.word	0x20000f98
 8006f58:	20000f74 	.word	0x20000f74
 8006f5c:	20000f28 	.word	0x20000f28
 8006f60:	20000f2c 	.word	0x20000f2c
 8006f64:	20000f88 	.word	0x20000f88
 8006f68:	20000f90 	.word	0x20000f90
 8006f6c:	20000f78 	.word	0x20000f78
 8006f70:	20000aa0 	.word	0x20000aa0
 8006f74:	20000a9c 	.word	0x20000a9c
 8006f78:	20000f84 	.word	0x20000f84
 8006f7c:	20000f80 	.word	0x20000f80

08006f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f86:	4b2a      	ldr	r3, [pc, #168]	; (8007030 <vTaskSwitchContext+0xb0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f8e:	4b29      	ldr	r3, [pc, #164]	; (8007034 <vTaskSwitchContext+0xb4>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f94:	e046      	b.n	8007024 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006f96:	4b27      	ldr	r3, [pc, #156]	; (8007034 <vTaskSwitchContext+0xb4>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f9c:	4b26      	ldr	r3, [pc, #152]	; (8007038 <vTaskSwitchContext+0xb8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	e010      	b.n	8006fc6 <vTaskSwitchContext+0x46>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	607b      	str	r3, [r7, #4]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <vTaskSwitchContext+0x3e>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	491d      	ldr	r1, [pc, #116]	; (800703c <vTaskSwitchContext+0xbc>)
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0e4      	beq.n	8006fa4 <vTaskSwitchContext+0x24>
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4a15      	ldr	r2, [pc, #84]	; (800703c <vTaskSwitchContext+0xbc>)
 8006fe6:	4413      	add	r3, r2
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	605a      	str	r2, [r3, #4]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d104      	bne.n	800700a <vTaskSwitchContext+0x8a>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4a0b      	ldr	r2, [pc, #44]	; (8007040 <vTaskSwitchContext+0xc0>)
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	4a08      	ldr	r2, [pc, #32]	; (8007038 <vTaskSwitchContext+0xb8>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <vTaskSwitchContext+0xc0>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3354      	adds	r3, #84	; 0x54
 8007020:	4a08      	ldr	r2, [pc, #32]	; (8007044 <vTaskSwitchContext+0xc4>)
 8007022:	6013      	str	r3, [r2, #0]
}
 8007024:	bf00      	nop
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	20000f98 	.word	0x20000f98
 8007034:	20000f84 	.word	0x20000f84
 8007038:	20000f78 	.word	0x20000f78
 800703c:	20000aa0 	.word	0x20000aa0
 8007040:	20000a9c 	.word	0x20000a9c
 8007044:	2000007c 	.word	0x2000007c

08007048 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	60fb      	str	r3, [r7, #12]
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800706e:	4b07      	ldr	r3, [pc, #28]	; (800708c <vTaskPlaceOnEventList+0x44>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3318      	adds	r3, #24
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fe fdd1 	bl	8005c1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800707c:	2101      	movs	r1, #1
 800707e:	6838      	ldr	r0, [r7, #0]
 8007080:	f000 fa80 	bl	8007584 <prvAddCurrentTaskToDelayedList>
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000a9c 	.word	0x20000a9c

08007090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	617b      	str	r3, [r7, #20]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3318      	adds	r3, #24
 80070be:	4619      	mov	r1, r3
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7fe fd88 	bl	8005bd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295
 80070d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	68b8      	ldr	r0, [r7, #8]
 80070d6:	f000 fa55 	bl	8007584 <prvAddCurrentTaskToDelayedList>
	}
 80070da:	bf00      	nop
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000a9c 	.word	0x20000a9c

080070e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	60fb      	str	r3, [r7, #12]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3318      	adds	r3, #24
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fdb9 	bl	8005c90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800711e:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <xTaskRemoveFromEventList+0xb0>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d11d      	bne.n	8007162 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3304      	adds	r3, #4
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fdb0 	bl	8005c90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007134:	4b19      	ldr	r3, [pc, #100]	; (800719c <xTaskRemoveFromEventList+0xb4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d903      	bls.n	8007144 <xTaskRemoveFromEventList+0x5c>
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	4a16      	ldr	r2, [pc, #88]	; (800719c <xTaskRemoveFromEventList+0xb4>)
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <xTaskRemoveFromEventList+0xb8>)
 8007152:	441a      	add	r2, r3
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7fe fd3b 	bl	8005bd6 <vListInsertEnd>
 8007160:	e005      	b.n	800716e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3318      	adds	r3, #24
 8007166:	4619      	mov	r1, r3
 8007168:	480e      	ldr	r0, [pc, #56]	; (80071a4 <xTaskRemoveFromEventList+0xbc>)
 800716a:	f7fe fd34 	bl	8005bd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <xTaskRemoveFromEventList+0xc0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	429a      	cmp	r2, r3
 800717a:	d905      	bls.n	8007188 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007180:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <xTaskRemoveFromEventList+0xc4>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e001      	b.n	800718c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800718c:	697b      	ldr	r3, [r7, #20]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000f98 	.word	0x20000f98
 800719c:	20000f78 	.word	0x20000f78
 80071a0:	20000aa0 	.word	0x20000aa0
 80071a4:	20000f30 	.word	0x20000f30
 80071a8:	20000a9c 	.word	0x20000a9c
 80071ac:	20000f84 	.word	0x20000f84

080071b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071b8:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <vTaskInternalSetTimeOutState+0x24>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <vTaskInternalSetTimeOutState+0x28>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	605a      	str	r2, [r3, #4]
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	20000f88 	.word	0x20000f88
 80071d8:	20000f74 	.word	0x20000f74

080071dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	613b      	str	r3, [r7, #16]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	60fb      	str	r3, [r7, #12]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800721e:	f000 fe81 	bl	8007f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007222:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <xTaskCheckForTimeOut+0xbc>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d102      	bne.n	8007242 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	e023      	b.n	800728a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b15      	ldr	r3, [pc, #84]	; (800729c <xTaskCheckForTimeOut+0xc0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d007      	beq.n	800725e <xTaskCheckForTimeOut+0x82>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	429a      	cmp	r2, r3
 8007256:	d302      	bcc.n	800725e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	e015      	b.n	800728a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	429a      	cmp	r2, r3
 8007266:	d20b      	bcs.n	8007280 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ff9b 	bl	80071b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	e004      	b.n	800728a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800728a:	f000 fe7b 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 800728e:	69fb      	ldr	r3, [r7, #28]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	20000f74 	.word	0x20000f74
 800729c:	20000f88 	.word	0x20000f88

080072a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072a4:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <vTaskMissedYield+0x14>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
}
 80072aa:	bf00      	nop
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	20000f84 	.word	0x20000f84

080072b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072c0:	f000 f852 	bl	8007368 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <prvIdleTask+0x28>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d9f9      	bls.n	80072c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <prvIdleTask+0x2c>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072dc:	e7f0      	b.n	80072c0 <prvIdleTask+0x8>
 80072de:	bf00      	nop
 80072e0:	20000aa0 	.word	0x20000aa0
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072ee:	2300      	movs	r3, #0
 80072f0:	607b      	str	r3, [r7, #4]
 80072f2:	e00c      	b.n	800730e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4a12      	ldr	r2, [pc, #72]	; (8007348 <prvInitialiseTaskLists+0x60>)
 8007300:	4413      	add	r3, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fc3a 	bl	8005b7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3301      	adds	r3, #1
 800730c:	607b      	str	r3, [r7, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b37      	cmp	r3, #55	; 0x37
 8007312:	d9ef      	bls.n	80072f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007314:	480d      	ldr	r0, [pc, #52]	; (800734c <prvInitialiseTaskLists+0x64>)
 8007316:	f7fe fc31 	bl	8005b7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800731a:	480d      	ldr	r0, [pc, #52]	; (8007350 <prvInitialiseTaskLists+0x68>)
 800731c:	f7fe fc2e 	bl	8005b7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007320:	480c      	ldr	r0, [pc, #48]	; (8007354 <prvInitialiseTaskLists+0x6c>)
 8007322:	f7fe fc2b 	bl	8005b7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007326:	480c      	ldr	r0, [pc, #48]	; (8007358 <prvInitialiseTaskLists+0x70>)
 8007328:	f7fe fc28 	bl	8005b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800732c:	480b      	ldr	r0, [pc, #44]	; (800735c <prvInitialiseTaskLists+0x74>)
 800732e:	f7fe fc25 	bl	8005b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <prvInitialiseTaskLists+0x78>)
 8007334:	4a05      	ldr	r2, [pc, #20]	; (800734c <prvInitialiseTaskLists+0x64>)
 8007336:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <prvInitialiseTaskLists+0x7c>)
 800733a:	4a05      	ldr	r2, [pc, #20]	; (8007350 <prvInitialiseTaskLists+0x68>)
 800733c:	601a      	str	r2, [r3, #0]
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000aa0 	.word	0x20000aa0
 800734c:	20000f00 	.word	0x20000f00
 8007350:	20000f14 	.word	0x20000f14
 8007354:	20000f30 	.word	0x20000f30
 8007358:	20000f44 	.word	0x20000f44
 800735c:	20000f5c 	.word	0x20000f5c
 8007360:	20000f28 	.word	0x20000f28
 8007364:	20000f2c 	.word	0x20000f2c

08007368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800736e:	e019      	b.n	80073a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007370:	f000 fdd8 	bl	8007f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007374:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <prvCheckTasksWaitingTermination+0x50>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3304      	adds	r3, #4
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fc85 	bl	8005c90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007386:	4b0d      	ldr	r3, [pc, #52]	; (80073bc <prvCheckTasksWaitingTermination+0x54>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3b01      	subs	r3, #1
 800738c:	4a0b      	ldr	r2, [pc, #44]	; (80073bc <prvCheckTasksWaitingTermination+0x54>)
 800738e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <prvCheckTasksWaitingTermination+0x58>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3b01      	subs	r3, #1
 8007396:	4a0a      	ldr	r2, [pc, #40]	; (80073c0 <prvCheckTasksWaitingTermination+0x58>)
 8007398:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800739a:	f000 fdf3 	bl	8007f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f810 	bl	80073c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <prvCheckTasksWaitingTermination+0x58>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e1      	bne.n	8007370 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000f44 	.word	0x20000f44
 80073bc:	20000f70 	.word	0x20000f70
 80073c0:	20000f58 	.word	0x20000f58

080073c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3354      	adds	r3, #84	; 0x54
 80073d0:	4618      	mov	r0, r3
 80073d2:	f002 fb63 	bl	8009a9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d108      	bne.n	80073f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 ff8b 	bl	8008300 <vPortFree>
				vPortFree( pxTCB );
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 ff88 	bl	8008300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073f0:	e018      	b.n	8007424 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d103      	bne.n	8007404 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 ff7f 	bl	8008300 <vPortFree>
	}
 8007402:	e00f      	b.n	8007424 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800740a:	2b02      	cmp	r3, #2
 800740c:	d00a      	beq.n	8007424 <prvDeleteTCB+0x60>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	60fb      	str	r3, [r7, #12]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <prvDeleteTCB+0x5e>
	}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007432:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <prvResetNextTaskUnblockTime+0x38>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <prvResetNextTaskUnblockTime+0x3c>)
 800743e:	f04f 32ff 	mov.w	r2, #4294967295
 8007442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007444:	e008      	b.n	8007458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007446:	4b07      	ldr	r3, [pc, #28]	; (8007464 <prvResetNextTaskUnblockTime+0x38>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	4a04      	ldr	r2, [pc, #16]	; (8007468 <prvResetNextTaskUnblockTime+0x3c>)
 8007456:	6013      	str	r3, [r2, #0]
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	20000f28 	.word	0x20000f28
 8007468:	20000f90 	.word	0x20000f90

0800746c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007472:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <xTaskGetSchedulerState+0x34>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d102      	bne.n	8007480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800747a:	2301      	movs	r3, #1
 800747c:	607b      	str	r3, [r7, #4]
 800747e:	e008      	b.n	8007492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007480:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <xTaskGetSchedulerState+0x38>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007488:	2302      	movs	r3, #2
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	e001      	b.n	8007492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800748e:	2300      	movs	r3, #0
 8007490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007492:	687b      	ldr	r3, [r7, #4]
	}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20000f7c 	.word	0x20000f7c
 80074a4:	20000f98 	.word	0x20000f98

080074a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d056      	beq.n	800756c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074be:	4b2e      	ldr	r3, [pc, #184]	; (8007578 <xTaskPriorityDisinherit+0xd0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d00a      	beq.n	80074de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	60bb      	str	r3, [r7, #8]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007500:	1e5a      	subs	r2, r3, #1
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750e:	429a      	cmp	r2, r3
 8007510:	d02c      	beq.n	800756c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007516:	2b00      	cmp	r3, #0
 8007518:	d128      	bne.n	800756c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3304      	adds	r3, #4
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fbb6 	bl	8005c90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	4b0f      	ldr	r3, [pc, #60]	; (800757c <xTaskPriorityDisinherit+0xd4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d903      	bls.n	800754c <xTaskPriorityDisinherit+0xa4>
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	4a0c      	ldr	r2, [pc, #48]	; (800757c <xTaskPriorityDisinherit+0xd4>)
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4a09      	ldr	r2, [pc, #36]	; (8007580 <xTaskPriorityDisinherit+0xd8>)
 800755a:	441a      	add	r2, r3
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	3304      	adds	r3, #4
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f7fe fb37 	bl	8005bd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007568:	2301      	movs	r3, #1
 800756a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800756c:	697b      	ldr	r3, [r7, #20]
	}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000a9c 	.word	0x20000a9c
 800757c:	20000f78 	.word	0x20000f78
 8007580:	20000aa0 	.word	0x20000aa0

08007584 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800758e:	4b21      	ldr	r3, [pc, #132]	; (8007614 <prvAddCurrentTaskToDelayedList+0x90>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007594:	4b20      	ldr	r3, [pc, #128]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3304      	adds	r3, #4
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fb78 	bl	8005c90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d10a      	bne.n	80075be <prvAddCurrentTaskToDelayedList+0x3a>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ae:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	4819      	ldr	r0, [pc, #100]	; (800761c <prvAddCurrentTaskToDelayedList+0x98>)
 80075b8:	f7fe fb0d 	bl	8005bd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075bc:	e026      	b.n	800760c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4413      	add	r3, r2
 80075c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d209      	bcs.n	80075ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d6:	4b12      	ldr	r3, [pc, #72]	; (8007620 <prvAddCurrentTaskToDelayedList+0x9c>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fb1b 	bl	8005c1e <vListInsert>
}
 80075e8:	e010      	b.n	800760c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <prvAddCurrentTaskToDelayedList+0xa0>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7fe fb11 	bl	8005c1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	429a      	cmp	r2, r3
 8007604:	d202      	bcs.n	800760c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007606:	4a08      	ldr	r2, [pc, #32]	; (8007628 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	6013      	str	r3, [r2, #0]
}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20000f74 	.word	0x20000f74
 8007618:	20000a9c 	.word	0x20000a9c
 800761c:	20000f5c 	.word	0x20000f5c
 8007620:	20000f2c 	.word	0x20000f2c
 8007624:	20000f28 	.word	0x20000f28
 8007628:	20000f90 	.word	0x20000f90

0800762c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08a      	sub	sp, #40	; 0x28
 8007630:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007636:	f000 fb07 	bl	8007c48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800763a:	4b1c      	ldr	r3, [pc, #112]	; (80076ac <xTimerCreateTimerTask+0x80>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d021      	beq.n	8007686 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800764a:	1d3a      	adds	r2, r7, #4
 800764c:	f107 0108 	add.w	r1, r7, #8
 8007650:	f107 030c 	add.w	r3, r7, #12
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe fa77 	bl	8005b48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	9202      	str	r2, [sp, #8]
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	2302      	movs	r3, #2
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	2300      	movs	r3, #0
 800766a:	460a      	mov	r2, r1
 800766c:	4910      	ldr	r1, [pc, #64]	; (80076b0 <xTimerCreateTimerTask+0x84>)
 800766e:	4811      	ldr	r0, [pc, #68]	; (80076b4 <xTimerCreateTimerTask+0x88>)
 8007670:	f7ff f824 	bl	80066bc <xTaskCreateStatic>
 8007674:	4603      	mov	r3, r0
 8007676:	4a10      	ldr	r2, [pc, #64]	; (80076b8 <xTimerCreateTimerTask+0x8c>)
 8007678:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <xTimerCreateTimerTask+0x8c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007682:	2301      	movs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	613b      	str	r3, [r7, #16]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076a2:	697b      	ldr	r3, [r7, #20]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000fcc 	.word	0x20000fcc
 80076b0:	08009c8c 	.word	0x08009c8c
 80076b4:	080077f1 	.word	0x080077f1
 80076b8:	20000fd0 	.word	0x20000fd0

080076bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	; 0x28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	623b      	str	r3, [r7, #32]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076ea:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <xTimerGenericCommand+0x98>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d02a      	beq.n	8007748 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b05      	cmp	r3, #5
 8007702:	dc18      	bgt.n	8007736 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007704:	f7ff feb2 	bl	800746c <xTaskGetSchedulerState>
 8007708:	4603      	mov	r3, r0
 800770a:	2b02      	cmp	r3, #2
 800770c:	d109      	bne.n	8007722 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <xTimerGenericCommand+0x98>)
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	f107 0110 	add.w	r1, r7, #16
 8007716:	2300      	movs	r3, #0
 8007718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771a:	f7fe fbe7 	bl	8005eec <xQueueGenericSend>
 800771e:	6278      	str	r0, [r7, #36]	; 0x24
 8007720:	e012      	b.n	8007748 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <xTimerGenericCommand+0x98>)
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f107 0110 	add.w	r1, r7, #16
 800772a:	2300      	movs	r3, #0
 800772c:	2200      	movs	r2, #0
 800772e:	f7fe fbdd 	bl	8005eec <xQueueGenericSend>
 8007732:	6278      	str	r0, [r7, #36]	; 0x24
 8007734:	e008      	b.n	8007748 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007736:	4b07      	ldr	r3, [pc, #28]	; (8007754 <xTimerGenericCommand+0x98>)
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	f107 0110 	add.w	r1, r7, #16
 800773e:	2300      	movs	r3, #0
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	f7fe fcd1 	bl	80060e8 <xQueueGenericSendFromISR>
 8007746:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800774a:	4618      	mov	r0, r3
 800774c:	3728      	adds	r7, #40	; 0x28
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000fcc 	.word	0x20000fcc

08007758 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af02      	add	r7, sp, #8
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007762:	4b22      	ldr	r3, [pc, #136]	; (80077ec <prvProcessExpiredTimer+0x94>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3304      	adds	r3, #4
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe fa8d 	bl	8005c90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d022      	beq.n	80077ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	699a      	ldr	r2, [r3, #24]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	18d1      	adds	r1, r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	6978      	ldr	r0, [r7, #20]
 8007792:	f000 f8d1 	bl	8007938 <prvInsertTimerInActiveList>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01f      	beq.n	80077dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800779c:	2300      	movs	r3, #0
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	2300      	movs	r3, #0
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	2100      	movs	r1, #0
 80077a6:	6978      	ldr	r0, [r7, #20]
 80077a8:	f7ff ff88 	bl	80076bc <xTimerGenericCommand>
 80077ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d113      	bne.n	80077dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	60fb      	str	r3, [r7, #12]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	6978      	ldr	r0, [r7, #20]
 80077e2:	4798      	blx	r3
}
 80077e4:	bf00      	nop
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20000fc4 	.word	0x20000fc4

080077f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077f8:	f107 0308 	add.w	r3, r7, #8
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 f857 	bl	80078b0 <prvGetNextExpireTime>
 8007802:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4619      	mov	r1, r3
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 f803 	bl	8007814 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800780e:	f000 f8d5 	bl	80079bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007812:	e7f1      	b.n	80077f8 <prvTimerTask+0x8>

08007814 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800781e:	f7ff fa27 	bl	8006c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007822:	f107 0308 	add.w	r3, r7, #8
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f866 	bl	80078f8 <prvSampleTimeNow>
 800782c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d130      	bne.n	8007896 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <prvProcessTimerOrBlockTask+0x3c>
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	429a      	cmp	r2, r3
 8007840:	d806      	bhi.n	8007850 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007842:	f7ff fa23 	bl	8006c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff ff85 	bl	8007758 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800784e:	e024      	b.n	800789a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d008      	beq.n	8007868 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <prvProcessTimerOrBlockTask+0x90>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <prvProcessTimerOrBlockTask+0x50>
 8007860:	2301      	movs	r3, #1
 8007862:	e000      	b.n	8007866 <prvProcessTimerOrBlockTask+0x52>
 8007864:	2300      	movs	r3, #0
 8007866:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <prvProcessTimerOrBlockTask+0x94>)
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	4619      	mov	r1, r3
 8007876:	f7fe feed 	bl	8006654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800787a:	f7ff fa07 	bl	8006c8c <xTaskResumeAll>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007884:	4b09      	ldr	r3, [pc, #36]	; (80078ac <prvProcessTimerOrBlockTask+0x98>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
}
 8007894:	e001      	b.n	800789a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007896:	f7ff f9f9 	bl	8006c8c <xTaskResumeAll>
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000fc8 	.word	0x20000fc8
 80078a8:	20000fcc 	.word	0x20000fcc
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078b8:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <prvGetNextExpireTime+0x44>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <prvGetNextExpireTime+0x16>
 80078c2:	2201      	movs	r2, #1
 80078c4:	e000      	b.n	80078c8 <prvGetNextExpireTime+0x18>
 80078c6:	2200      	movs	r2, #0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d105      	bne.n	80078e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078d4:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <prvGetNextExpireTime+0x44>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	e001      	b.n	80078e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078e4:	68fb      	ldr	r3, [r7, #12]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000fc4 	.word	0x20000fc4

080078f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007900:	f7ff fa62 	bl	8006dc8 <xTaskGetTickCount>
 8007904:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007906:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <prvSampleTimeNow+0x3c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	429a      	cmp	r2, r3
 800790e:	d205      	bcs.n	800791c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007910:	f000 f936 	bl	8007b80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	e002      	b.n	8007922 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007922:	4a04      	ldr	r2, [pc, #16]	; (8007934 <prvSampleTimeNow+0x3c>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007928:	68fb      	ldr	r3, [r7, #12]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000fd4 	.word	0x20000fd4

08007938 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	429a      	cmp	r2, r3
 800795c:	d812      	bhi.n	8007984 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	1ad2      	subs	r2, r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	429a      	cmp	r2, r3
 800796a:	d302      	bcc.n	8007972 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800796c:	2301      	movs	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e01b      	b.n	80079aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007972:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <prvInsertTimerInActiveList+0x7c>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f7fe f94e 	bl	8005c1e <vListInsert>
 8007982:	e012      	b.n	80079aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d206      	bcs.n	800799a <prvInsertTimerInActiveList+0x62>
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e007      	b.n	80079aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800799a:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <prvInsertTimerInActiveList+0x80>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7fe f93a 	bl	8005c1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079aa:	697b      	ldr	r3, [r7, #20]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000fc8 	.word	0x20000fc8
 80079b8:	20000fc4 	.word	0x20000fc4

080079bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08e      	sub	sp, #56	; 0x38
 80079c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079c2:	e0ca      	b.n	8007b5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da18      	bge.n	80079fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079ca:	1d3b      	adds	r3, r7, #4
 80079cc:	3304      	adds	r3, #4
 80079ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	61fb      	str	r3, [r7, #28]
}
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f2:	6850      	ldr	r0, [r2, #4]
 80079f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f6:	6892      	ldr	r2, [r2, #8]
 80079f8:	4611      	mov	r1, r2
 80079fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f2c0 80ab 	blt.w	8007b5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	3304      	adds	r3, #4
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fe f93b 	bl	8005c90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff ff6b 	bl	80078f8 <prvSampleTimeNow>
 8007a22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b09      	cmp	r3, #9
 8007a28:	f200 8096 	bhi.w	8007b58 <prvProcessReceivedCommands+0x19c>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <prvProcessReceivedCommands+0x78>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a5d 	.word	0x08007a5d
 8007a38:	08007a5d 	.word	0x08007a5d
 8007a3c:	08007a5d 	.word	0x08007a5d
 8007a40:	08007ad1 	.word	0x08007ad1
 8007a44:	08007ae5 	.word	0x08007ae5
 8007a48:	08007b2f 	.word	0x08007b2f
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a5d 	.word	0x08007a5d
 8007a54:	08007ad1 	.word	0x08007ad1
 8007a58:	08007ae5 	.word	0x08007ae5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	18d1      	adds	r1, r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7c:	f7ff ff5c 	bl	8007938 <prvInsertTimerInActiveList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d069      	beq.n	8007b5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d05e      	beq.n	8007b5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	441a      	add	r2, r3
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aae:	f7ff fe05 	bl	80076bc <xTimerGenericCommand>
 8007ab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d14f      	bne.n	8007b5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	61bb      	str	r3, [r7, #24]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007ae2:	e03a      	b.n	8007b5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aea:	f043 0301 	orr.w	r3, r3, #1
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	617b      	str	r3, [r7, #20]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	18d1      	adds	r1, r2, r3
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b28:	f7ff ff06 	bl	8007938 <prvInsertTimerInActiveList>
					break;
 8007b2c:	e015      	b.n	8007b5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b3e:	f000 fbdf 	bl	8008300 <vPortFree>
 8007b42:	e00a      	b.n	8007b5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b4a:	f023 0301 	bic.w	r3, r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b56:	e000      	b.n	8007b5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007b58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b5a:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <prvProcessReceivedCommands+0x1c0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1d39      	adds	r1, r7, #4
 8007b60:	2200      	movs	r2, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fb5c 	bl	8006220 <xQueueReceive>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f47f af2a 	bne.w	80079c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	3730      	adds	r7, #48	; 0x30
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000fcc 	.word	0x20000fcc

08007b80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b86:	e048      	b.n	8007c1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b88:	4b2d      	ldr	r3, [pc, #180]	; (8007c40 <prvSwitchTimerLists+0xc0>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b92:	4b2b      	ldr	r3, [pc, #172]	; (8007c40 <prvSwitchTimerLists+0xc0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe f875 	bl	8005c90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02e      	beq.n	8007c1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d90e      	bls.n	8007bec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bda:	4b19      	ldr	r3, [pc, #100]	; (8007c40 <prvSwitchTimerLists+0xc0>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3304      	adds	r3, #4
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7fe f81a 	bl	8005c1e <vListInsert>
 8007bea:	e016      	b.n	8007c1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bec:	2300      	movs	r3, #0
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fd60 	bl	80076bc <xTimerGenericCommand>
 8007bfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	603b      	str	r3, [r7, #0]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <prvSwitchTimerLists+0xc0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1b1      	bne.n	8007b88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c24:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <prvSwitchTimerLists+0xc0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c2a:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <prvSwitchTimerLists+0xc4>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <prvSwitchTimerLists+0xc0>)
 8007c30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c32:	4a04      	ldr	r2, [pc, #16]	; (8007c44 <prvSwitchTimerLists+0xc4>)
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	6013      	str	r3, [r2, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000fc4 	.word	0x20000fc4
 8007c44:	20000fc8 	.word	0x20000fc8

08007c48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c4e:	f000 f969 	bl	8007f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <prvCheckForValidListAndQueue+0x60>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d120      	bne.n	8007c9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c5a:	4814      	ldr	r0, [pc, #80]	; (8007cac <prvCheckForValidListAndQueue+0x64>)
 8007c5c:	f7fd ff8e 	bl	8005b7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c60:	4813      	ldr	r0, [pc, #76]	; (8007cb0 <prvCheckForValidListAndQueue+0x68>)
 8007c62:	f7fd ff8b 	bl	8005b7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c66:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <prvCheckForValidListAndQueue+0x6c>)
 8007c68:	4a10      	ldr	r2, [pc, #64]	; (8007cac <prvCheckForValidListAndQueue+0x64>)
 8007c6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c6c:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <prvCheckForValidListAndQueue+0x70>)
 8007c6e:	4a10      	ldr	r2, [pc, #64]	; (8007cb0 <prvCheckForValidListAndQueue+0x68>)
 8007c70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c72:	2300      	movs	r3, #0
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <prvCheckForValidListAndQueue+0x74>)
 8007c78:	4a11      	ldr	r2, [pc, #68]	; (8007cc0 <prvCheckForValidListAndQueue+0x78>)
 8007c7a:	2110      	movs	r1, #16
 8007c7c:	200a      	movs	r0, #10
 8007c7e:	f7fe f899 	bl	8005db4 <xQueueGenericCreateStatic>
 8007c82:	4603      	mov	r3, r0
 8007c84:	4a08      	ldr	r2, [pc, #32]	; (8007ca8 <prvCheckForValidListAndQueue+0x60>)
 8007c86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <prvCheckForValidListAndQueue+0x60>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <prvCheckForValidListAndQueue+0x60>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	490b      	ldr	r1, [pc, #44]	; (8007cc4 <prvCheckForValidListAndQueue+0x7c>)
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fcb2 	bl	8006600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c9c:	f000 f972 	bl	8007f84 <vPortExitCritical>
}
 8007ca0:	bf00      	nop
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000fcc 	.word	0x20000fcc
 8007cac:	20000f9c 	.word	0x20000f9c
 8007cb0:	20000fb0 	.word	0x20000fb0
 8007cb4:	20000fc4 	.word	0x20000fc4
 8007cb8:	20000fc8 	.word	0x20000fc8
 8007cbc:	20001078 	.word	0x20001078
 8007cc0:	20000fd8 	.word	0x20000fd8
 8007cc4:	08009c94 	.word	0x08009c94

08007cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3b04      	subs	r3, #4
 8007cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3b04      	subs	r3, #4
 8007ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 0201 	bic.w	r2, r3, #1
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3b04      	subs	r3, #4
 8007cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cf8:	4a0c      	ldr	r2, [pc, #48]	; (8007d2c <pxPortInitialiseStack+0x64>)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b14      	subs	r3, #20
 8007d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3b04      	subs	r3, #4
 8007d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f06f 0202 	mvn.w	r2, #2
 8007d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3b20      	subs	r3, #32
 8007d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	08007d31 	.word	0x08007d31

08007d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d3a:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <prvTaskExitError+0x54>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d00a      	beq.n	8007d5a <prvTaskExitError+0x2a>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	60fb      	str	r3, [r7, #12]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <prvTaskExitError+0x28>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	60bb      	str	r3, [r7, #8]
}
 8007d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d6e:	bf00      	nop
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0fc      	beq.n	8007d70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	2000000c 	.word	0x2000000c
	...

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	4770      	bx	lr
 8007dac:	f3af 8000 	nop.w

08007db0 <pxCurrentTCBConst2>:
 8007db0:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007db8:	4808      	ldr	r0, [pc, #32]	; (8007ddc <prvPortStartFirstTask+0x24>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f380 8814 	msr	CONTROL, r0
 8007dca:	b662      	cpsie	i
 8007dcc:	b661      	cpsie	f
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	df00      	svc	0
 8007dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dda:	bf00      	nop
 8007ddc:	e000ed08 	.word	0xe000ed08

08007de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007de6:	4b46      	ldr	r3, [pc, #280]	; (8007f00 <xPortStartScheduler+0x120>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a46      	ldr	r2, [pc, #280]	; (8007f04 <xPortStartScheduler+0x124>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10a      	bne.n	8007e06 <xPortStartScheduler+0x26>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e06:	4b3e      	ldr	r3, [pc, #248]	; (8007f00 <xPortStartScheduler+0x120>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a3f      	ldr	r2, [pc, #252]	; (8007f08 <xPortStartScheduler+0x128>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d10a      	bne.n	8007e26 <xPortStartScheduler+0x46>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	60fb      	str	r3, [r7, #12]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e26:	4b39      	ldr	r3, [pc, #228]	; (8007f0c <xPortStartScheduler+0x12c>)
 8007e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	22ff      	movs	r2, #255	; 0xff
 8007e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4b31      	ldr	r3, [pc, #196]	; (8007f10 <xPortStartScheduler+0x130>)
 8007e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e4e:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e50:	2207      	movs	r2, #7
 8007e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e54:	e009      	b.n	8007e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e56:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	4a2d      	ldr	r2, [pc, #180]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b80      	cmp	r3, #128	; 0x80
 8007e74:	d0ef      	beq.n	8007e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e76:	4b27      	ldr	r3, [pc, #156]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1c3 0307 	rsb	r3, r3, #7
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d00a      	beq.n	8007e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	60bb      	str	r3, [r7, #8]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <xPortStartScheduler+0x134>)
 8007ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <xPortStartScheduler+0x134>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	; (8007f14 <xPortStartScheduler+0x134>)
 8007eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eb6:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <xPortStartScheduler+0x138>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ec2:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ece:	f000 f8dd 	bl	800808c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <xPortStartScheduler+0x13c>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ed8:	f000 f8fc 	bl	80080d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007edc:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <xPortStartScheduler+0x140>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <xPortStartScheduler+0x140>)
 8007ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ee8:	f7ff ff66 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007eec:	f7ff f848 	bl	8006f80 <vTaskSwitchContext>
	prvTaskExitError();
 8007ef0:	f7ff ff1e 	bl	8007d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	e000ed00 	.word	0xe000ed00
 8007f04:	410fc271 	.word	0x410fc271
 8007f08:	410fc270 	.word	0x410fc270
 8007f0c:	e000e400 	.word	0xe000e400
 8007f10:	200010c8 	.word	0x200010c8
 8007f14:	200010cc 	.word	0x200010cc
 8007f18:	e000ed20 	.word	0xe000ed20
 8007f1c:	2000000c 	.word	0x2000000c
 8007f20:	e000ef34 	.word	0xe000ef34

08007f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	607b      	str	r3, [r7, #4]
}
 8007f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	4a0d      	ldr	r2, [pc, #52]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f48:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d10f      	bne.n	8007f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f50:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <vPortEnterCritical+0x5c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	603b      	str	r3, [r7, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <vPortEnterCritical+0x4a>
	}
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	2000000c 	.word	0x2000000c
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <vPortExitCritical+0x50>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <vPortExitCritical+0x24>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	607b      	str	r3, [r7, #4]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <vPortExitCritical+0x50>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <vPortExitCritical+0x50>)
 8007fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <vPortExitCritical+0x50>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <vPortExitCritical+0x42>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f383 8811 	msr	BASEPRI, r3
}
 8007fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	2000000c 	.word	0x2000000c
	...

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008004:	f380 8811 	msr	BASEPRI, r0
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f7fe ffb6 	bl	8006f80 <vTaskSwitchContext>
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	bc09      	pop	{r0, r3}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	f01e 0f10 	tst.w	lr, #16
 800802a:	bf08      	it	eq
 800802c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008030:	f380 8809 	msr	PSP, r0
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst>:
 8008040:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
}
 8008060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008062:	f7fe fed3 	bl	8006e0c <xTaskIncrementTick>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <xPortSysTickHandler+0x40>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
}
 800807e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <vPortSetupTimerInterrupt+0x38>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <vPortSetupTimerInterrupt+0x3c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <vPortSetupTimerInterrupt+0x40>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <vPortSetupTimerInterrupt+0x44>)
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ae:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e010 	.word	0xe000e010
 80080c4:	e000e018 	.word	0xe000e018
 80080c8:	20000000 	.word	0x20000000
 80080cc:	10624dd3 	.word	0x10624dd3
 80080d0:	e000e014 	.word	0xe000e014

080080d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080e4 <vPortEnableVFP+0x10>
 80080d8:	6801      	ldr	r1, [r0, #0]
 80080da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080de:	6001      	str	r1, [r0, #0]
 80080e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed88 	.word	0xe000ed88

080080e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ee:	f3ef 8305 	mrs	r3, IPSR
 80080f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b0f      	cmp	r3, #15
 80080f8:	d914      	bls.n	8008124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080fa:	4a17      	ldr	r2, [pc, #92]	; (8008158 <vPortValidateInterruptPriority+0x70>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008104:	4b15      	ldr	r3, [pc, #84]	; (800815c <vPortValidateInterruptPriority+0x74>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	7afa      	ldrb	r2, [r7, #11]
 800810a:	429a      	cmp	r2, r3
 800810c:	d20a      	bcs.n	8008124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008124:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <vPortValidateInterruptPriority+0x78>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800812c:	4b0d      	ldr	r3, [pc, #52]	; (8008164 <vPortValidateInterruptPriority+0x7c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d90a      	bls.n	800814a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	603b      	str	r3, [r7, #0]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <vPortValidateInterruptPriority+0x60>
	}
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	e000e3f0 	.word	0xe000e3f0
 800815c:	200010c8 	.word	0x200010c8
 8008160:	e000ed0c 	.word	0xe000ed0c
 8008164:	200010cc 	.word	0x200010cc

08008168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008174:	f7fe fd7c 	bl	8006c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008178:	4b5b      	ldr	r3, [pc, #364]	; (80082e8 <pvPortMalloc+0x180>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008180:	f000 f920 	bl	80083c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008184:	4b59      	ldr	r3, [pc, #356]	; (80082ec <pvPortMalloc+0x184>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4013      	ands	r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8093 	bne.w	80082b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01d      	beq.n	80081d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008198:	2208      	movs	r2, #8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d014      	beq.n	80081d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f023 0307 	bic.w	r3, r3, #7
 80081b0:	3308      	adds	r3, #8
 80081b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <pvPortMalloc+0x6c>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	617b      	str	r3, [r7, #20]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d06e      	beq.n	80082b8 <pvPortMalloc+0x150>
 80081da:	4b45      	ldr	r3, [pc, #276]	; (80082f0 <pvPortMalloc+0x188>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d869      	bhi.n	80082b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081e4:	4b43      	ldr	r3, [pc, #268]	; (80082f4 <pvPortMalloc+0x18c>)
 80081e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081e8:	4b42      	ldr	r3, [pc, #264]	; (80082f4 <pvPortMalloc+0x18c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ee:	e004      	b.n	80081fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d903      	bls.n	800820c <pvPortMalloc+0xa4>
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1f1      	bne.n	80081f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800820c:	4b36      	ldr	r3, [pc, #216]	; (80082e8 <pvPortMalloc+0x180>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008212:	429a      	cmp	r2, r3
 8008214:	d050      	beq.n	80082b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2208      	movs	r2, #8
 800821c:	4413      	add	r3, r2
 800821e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	2308      	movs	r3, #8
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	429a      	cmp	r2, r3
 8008236:	d91f      	bls.n	8008278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <pvPortMalloc+0xf8>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	613b      	str	r3, [r7, #16]
}
 800825c:	bf00      	nop
 800825e:	e7fe      	b.n	800825e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008272:	69b8      	ldr	r0, [r7, #24]
 8008274:	f000 f908 	bl	8008488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008278:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <pvPortMalloc+0x188>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <pvPortMalloc+0x188>)
 8008284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008286:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <pvPortMalloc+0x188>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <pvPortMalloc+0x190>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d203      	bcs.n	800829a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008292:	4b17      	ldr	r3, [pc, #92]	; (80082f0 <pvPortMalloc+0x188>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <pvPortMalloc+0x190>)
 8008298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	4b13      	ldr	r3, [pc, #76]	; (80082ec <pvPortMalloc+0x184>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <pvPortMalloc+0x194>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3301      	adds	r3, #1
 80082b4:	4a11      	ldr	r2, [pc, #68]	; (80082fc <pvPortMalloc+0x194>)
 80082b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082b8:	f7fe fce8 	bl	8006c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <pvPortMalloc+0x174>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60fb      	str	r3, [r7, #12]
}
 80082d8:	bf00      	nop
 80082da:	e7fe      	b.n	80082da <pvPortMalloc+0x172>
	return pvReturn;
 80082dc:	69fb      	ldr	r3, [r7, #28]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20001c90 	.word	0x20001c90
 80082ec:	20001ca4 	.word	0x20001ca4
 80082f0:	20001c94 	.word	0x20001c94
 80082f4:	20001c88 	.word	0x20001c88
 80082f8:	20001c98 	.word	0x20001c98
 80082fc:	20001c9c 	.word	0x20001c9c

08008300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d04d      	beq.n	80083ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008312:	2308      	movs	r3, #8
 8008314:	425b      	negs	r3, r3
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4413      	add	r3, r2
 800831a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <vPortFree+0xb8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4013      	ands	r3, r2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <vPortFree+0x44>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	60fb      	str	r3, [r7, #12]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <vPortFree+0x62>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	60bb      	str	r3, [r7, #8]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <vPortFree+0xb8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01e      	beq.n	80083ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11a      	bne.n	80083ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <vPortFree+0xb8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	43db      	mvns	r3, r3
 8008382:	401a      	ands	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008388:	f7fe fc72 	bl	8006c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <vPortFree+0xbc>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4413      	add	r3, r2
 8008396:	4a09      	ldr	r2, [pc, #36]	; (80083bc <vPortFree+0xbc>)
 8008398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800839a:	6938      	ldr	r0, [r7, #16]
 800839c:	f000 f874 	bl	8008488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <vPortFree+0xc0>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	4a06      	ldr	r2, [pc, #24]	; (80083c0 <vPortFree+0xc0>)
 80083a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083aa:	f7fe fc6f 	bl	8006c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083ae:	bf00      	nop
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20001ca4 	.word	0x20001ca4
 80083bc:	20001c94 	.word	0x20001c94
 80083c0:	20001ca0 	.word	0x20001ca0

080083c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80083ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083d0:	4b27      	ldr	r3, [pc, #156]	; (8008470 <prvHeapInit+0xac>)
 80083d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00c      	beq.n	80083f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3307      	adds	r3, #7
 80083e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0307 	bic.w	r3, r3, #7
 80083ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	4a1f      	ldr	r2, [pc, #124]	; (8008470 <prvHeapInit+0xac>)
 80083f4:	4413      	add	r3, r2
 80083f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083fc:	4a1d      	ldr	r2, [pc, #116]	; (8008474 <prvHeapInit+0xb0>)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008402:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <prvHeapInit+0xb0>)
 8008404:	2200      	movs	r2, #0
 8008406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	4413      	add	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008410:	2208      	movs	r2, #8
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 0307 	bic.w	r3, r3, #7
 800841e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4a15      	ldr	r2, [pc, #84]	; (8008478 <prvHeapInit+0xb4>)
 8008424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008426:	4b14      	ldr	r3, [pc, #80]	; (8008478 <prvHeapInit+0xb4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800842e:	4b12      	ldr	r3, [pc, #72]	; (8008478 <prvHeapInit+0xb4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008444:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <prvHeapInit+0xb4>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4a0a      	ldr	r2, [pc, #40]	; (800847c <prvHeapInit+0xb8>)
 8008452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4a09      	ldr	r2, [pc, #36]	; (8008480 <prvHeapInit+0xbc>)
 800845a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800845c:	4b09      	ldr	r3, [pc, #36]	; (8008484 <prvHeapInit+0xc0>)
 800845e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008462:	601a      	str	r2, [r3, #0]
}
 8008464:	bf00      	nop
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	200010d0 	.word	0x200010d0
 8008474:	20001c88 	.word	0x20001c88
 8008478:	20001c90 	.word	0x20001c90
 800847c:	20001c98 	.word	0x20001c98
 8008480:	20001c94 	.word	0x20001c94
 8008484:	20001ca4 	.word	0x20001ca4

08008488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008490:	4b28      	ldr	r3, [pc, #160]	; (8008534 <prvInsertBlockIntoFreeList+0xac>)
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e002      	b.n	800849c <prvInsertBlockIntoFreeList+0x14>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d8f7      	bhi.n	8008496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	4413      	add	r3, r2
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d108      	bne.n	80084ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	441a      	add	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	441a      	add	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d118      	bne.n	8008510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b15      	ldr	r3, [pc, #84]	; (8008538 <prvInsertBlockIntoFreeList+0xb0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d00d      	beq.n	8008506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	441a      	add	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e008      	b.n	8008518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008506:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <prvInsertBlockIntoFreeList+0xb0>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	e003      	b.n	8008518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	429a      	cmp	r2, r3
 800851e:	d002      	beq.n	8008526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	20001c88 	.word	0x20001c88
 8008538:	20001c90 	.word	0x20001c90

0800853c <_Z5delaym>:

inline void nop(){

}

inline void delay(uint32_t msec){
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
#if CORE_CONFIG_USE_RTOS

	osKernelState_t state = osKernelGetState();
 8008544:	f7fd f9ae 	bl	80058a4 <osKernelGetState>
 8008548:	60f8      	str	r0, [r7, #12]
	if (state == osKernelRunning){
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b02      	cmp	r3, #2
 800854e:	d103      	bne.n	8008558 <_Z5delaym+0x1c>
		osDelay(msec);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7fd fa96 	bl	8005a82 <osDelay>
	}

#else
	HAL_Delay(msec);
#endif
}
 8008556:	e002      	b.n	800855e <_Z5delaym+0x22>
		HAL_Delay(msec);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7f8 ffd7 	bl	800150c <HAL_Delay>
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <_ZN13elapsedMillisC1Ev>:
	unsigned long ms;
public:
	void reset() {
		ms = millis();
	}
	elapsedMillis(void) {
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
		ms = millis();
 800856e:	f001 fa85 	bl	8009a7c <_Z6millisv>
 8008572:	4602      	mov	r2, r0
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	601a      	str	r2, [r3, #0]
	}
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <_ZNK13elapsedMilliscvmEv>:
		ms = millis() - val;
	}
	elapsedMillis(const elapsedMillis &orig) {
		ms = orig.ms;
	}
	operator unsigned long() const {
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
		return millis() - ms;
 800858a:	f001 fa77 	bl	8009a7c <_Z6millisv>
 800858e:	4602      	mov	r2, r0
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	1ad3      	subs	r3, r2, r3
	}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <_ZN13elapsedMillisaSEm>:
	elapsedMillis & operator =(const elapsedMillis &rhs) {
		ms = rhs.ms;
		return *this;
	}
	elapsedMillis & operator =(unsigned long val) {
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 80085a8:	f001 fa68 	bl	8009a7c <_Z6millisv>
 80085ac:	4602      	mov	r2, r0
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	1ad2      	subs	r2, r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	601a      	str	r2, [r3, #0]
		return *this;
 80085b6:	687b      	ldr	r3, [r7, #4]
	}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <firmware>:
		128 * 4, .priority = (osPriority_t) osPriorityNormal, };
//
const osThreadAttr_t comm_task_attributes = { .name = "comm_task", .stack_size =
		128 * 4, .priority = (osPriority_t) osPriorityHigh3, };

void firmware() {
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af02      	add	r7, sp, #8

	uint8_t ret = imu.init(imu_config);
 80085c6:	4b24      	ldr	r3, [pc, #144]	; (8008658 <firmware+0x98>)
 80085c8:	466c      	mov	r4, sp
 80085ca:	f103 020c 	add.w	r2, r3, #12
 80085ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80085d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085d8:	4820      	ldr	r0, [pc, #128]	; (800865c <firmware+0x9c>)
 80085da:	f000 faaf 	bl	8008b3c <_ZN6BMI1604initE15bmi160_config_t>
 80085de:	4603      	mov	r3, r0
 80085e0:	71fb      	strb	r3, [r7, #7]

	if (ret != 1) {
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d028      	beq.n	800863a <firmware+0x7a>
		while (true) {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80085e8:	2201      	movs	r2, #1
 80085ea:	2108      	movs	r1, #8
 80085ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085f0:	f7f9 fbe2 	bl	8001db8 <HAL_GPIO_WritePin>
			delay(100);
 80085f4:	2064      	movs	r0, #100	; 0x64
 80085f6:	f7ff ffa1 	bl	800853c <_Z5delaym>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80085fa:	2200      	movs	r2, #0
 80085fc:	2108      	movs	r1, #8
 80085fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008602:	f7f9 fbd9 	bl	8001db8 <HAL_GPIO_WritePin>
			delay(250);
 8008606:	20fa      	movs	r0, #250	; 0xfa
 8008608:	f7ff ff98 	bl	800853c <_Z5delaym>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800860c:	2201      	movs	r2, #1
 800860e:	2108      	movs	r1, #8
 8008610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008614:	f7f9 fbd0 	bl	8001db8 <HAL_GPIO_WritePin>
			delay(100);
 8008618:	2064      	movs	r0, #100	; 0x64
 800861a:	f7ff ff8f 	bl	800853c <_Z5delaym>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800861e:	2200      	movs	r2, #0
 8008620:	2108      	movs	r1, #8
 8008622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008626:	f7f9 fbc7 	bl	8001db8 <HAL_GPIO_WritePin>
			delay(250);
 800862a:	20fa      	movs	r0, #250	; 0xfa
 800862c:	f7ff ff86 	bl	800853c <_Z5delaym>
			delay(500);
 8008630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008634:	f7ff ff82 	bl	800853c <_Z5delaym>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8008638:	e7d6      	b.n	80085e8 <firmware+0x28>
		}
	}

	osThreadNew(imu_task, NULL, &imu_task_attributes);
 800863a:	4a09      	ldr	r2, [pc, #36]	; (8008660 <firmware+0xa0>)
 800863c:	2100      	movs	r1, #0
 800863e:	4809      	ldr	r0, [pc, #36]	; (8008664 <firmware+0xa4>)
 8008640:	f7fd f98d 	bl	800595e <osThreadNew>
	osThreadNew(communication_task, NULL, &comm_task_attributes);
 8008644:	4a08      	ldr	r2, [pc, #32]	; (8008668 <firmware+0xa8>)
 8008646:	2100      	movs	r1, #0
 8008648:	4808      	ldr	r0, [pc, #32]	; (800866c <firmware+0xac>)
 800864a:	f7fd f988 	bl	800595e <osThreadNew>

}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	bd90      	pop	{r4, r7, pc}
 8008656:	bf00      	nop
 8008658:	20000010 	.word	0x20000010
 800865c:	20001cb0 	.word	0x20001cb0
 8008660:	08009d20 	.word	0x08009d20
 8008664:	08008671 	.word	0x08008671
 8008668:	08009d44 	.word	0x08009d44
 800866c:	0800868d 	.word	0x0800868d

08008670 <_Z8imu_taskPv>:

void imu_task(void *attributes) {
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

	while (true) {
		imu.update();
 8008678:	4803      	ldr	r0, [pc, #12]	; (8008688 <_Z8imu_taskPv+0x18>)
 800867a:	f000 fb9d 	bl	8008db8 <_ZN6BMI1606updateEv>
		osDelay(IMU_UPDATE_TIME);
 800867e:	200a      	movs	r0, #10
 8008680:	f7fd f9ff 	bl	8005a82 <osDelay>
		imu.update();
 8008684:	e7f8      	b.n	8008678 <_Z8imu_taskPv+0x8>
 8008686:	bf00      	nop
 8008688:	20001cb0 	.word	0x20001cb0

0800868c <_Z18communication_taskPv>:
	}
}

void communication_task(void *attributes) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b0aa      	sub	sp, #168	; 0xa8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	float imu_gyr_x, imu_gyr_y, imu_gyr_z, imu_acc_x, imu_acc_y, imu_acc_z = 0;
 8008694:	f04f 0300 	mov.w	r3, #0
 8008698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint8_t data[28] = { 0 };
 800869c:	2300      	movs	r3, #0
 800869e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	605a      	str	r2, [r3, #4]
 80086aa:	609a      	str	r2, [r3, #8]
 80086ac:	60da      	str	r2, [r3, #12]
 80086ae:	611a      	str	r2, [r3, #16]
 80086b0:	615a      	str	r2, [r3, #20]
	uint8_t data_encoded[100] = { 0 };
 80086b2:	2300      	movs	r3, #0
 80086b4:	60bb      	str	r3, [r7, #8]
 80086b6:	f107 030c 	add.w	r3, r7, #12
 80086ba:	2260      	movs	r2, #96	; 0x60
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 f9e3 	bl	8009a8a <memset>
	uint32_t comm_rtos_tick = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	while (true) {
		comm_rtos_tick = osKernelGetTickCount();
 80086ca:	f7fd f933 	bl	8005934 <osKernelGetTickCount>
 80086ce:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		comm_tick++;
 80086d2:	4b48      	ldr	r3, [pc, #288]	; (80087f4 <_Z18communication_taskPv+0x168>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3301      	adds	r3, #1
 80086d8:	4a46      	ldr	r2, [pc, #280]	; (80087f4 <_Z18communication_taskPv+0x168>)
 80086da:	6013      	str	r3, [r2, #0]

		// Blink LED
		if (blinkTimer >= 500) {
 80086dc:	4846      	ldr	r0, [pc, #280]	; (80087f8 <_Z18communication_taskPv+0x16c>)
 80086de:	f7ff ff50 	bl	8008582 <_ZNK13elapsedMilliscvmEv>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80086e8:	4293      	cmp	r3, r2
 80086ea:	bf8c      	ite	hi
 80086ec:	2301      	movhi	r3, #1
 80086ee:	2300      	movls	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d008      	beq.n	8008708 <_Z18communication_taskPv+0x7c>
			blinkTimer = 0;
 80086f6:	2100      	movs	r1, #0
 80086f8:	483f      	ldr	r0, [pc, #252]	; (80087f8 <_Z18communication_taskPv+0x16c>)
 80086fa:	f7ff ff50 	bl	800859e <_ZN13elapsedMillisaSEm>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80086fe:	2108      	movs	r1, #8
 8008700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008704:	f7f9 fb70 	bl	8001de8 <HAL_GPIO_TogglePin>

		}

		// Get the IMU Data
		imu_gyr_x = imu.gyr.x;
 8008708:	4b3c      	ldr	r3, [pc, #240]	; (80087fc <_Z18communication_taskPv+0x170>)
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		imu_gyr_y = imu.gyr.y;
 8008710:	4b3a      	ldr	r3, [pc, #232]	; (80087fc <_Z18communication_taskPv+0x170>)
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		imu_gyr_z = imu.gyr.z;
 8008718:	4b38      	ldr	r3, [pc, #224]	; (80087fc <_Z18communication_taskPv+0x170>)
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		imu_acc_x = imu.acc.x;
 8008720:	4b36      	ldr	r3, [pc, #216]	; (80087fc <_Z18communication_taskPv+0x170>)
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		imu_acc_y = imu.acc.y;
 8008728:	4b34      	ldr	r3, [pc, #208]	; (80087fc <_Z18communication_taskPv+0x170>)
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		imu_acc_z = imu.acc.z;
 8008730:	4b32      	ldr	r3, [pc, #200]	; (80087fc <_Z18communication_taskPv+0x170>)
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		uint32_to_bytearray(comm_tick, &data[0]);
 8008738:	4b2e      	ldr	r3, [pc, #184]	; (80087f4 <_Z18communication_taskPv+0x168>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008740:	4611      	mov	r1, r2
 8008742:	4618      	mov	r0, r3
 8008744:	f001 f928 	bl	8009998 <_Z19uint32_to_bytearraymPh>
		float_to_bytearray(imu_gyr_x, &data[4]);
 8008748:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800874c:	3304      	adds	r3, #4
 800874e:	4618      	mov	r0, r3
 8008750:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 8008754:	f001 f941 	bl	80099da <_Z18float_to_bytearrayfPh>
		float_to_bytearray(imu_gyr_y, &data[8]);
 8008758:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800875c:	3308      	adds	r3, #8
 800875e:	4618      	mov	r0, r3
 8008760:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8008764:	f001 f939 	bl	80099da <_Z18float_to_bytearrayfPh>
		float_to_bytearray(imu_gyr_z, &data[12]);
 8008768:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800876c:	330c      	adds	r3, #12
 800876e:	4618      	mov	r0, r3
 8008770:	ed97 0a25 	vldr	s0, [r7, #148]	; 0x94
 8008774:	f001 f931 	bl	80099da <_Z18float_to_bytearrayfPh>
		float_to_bytearray(imu_acc_x, &data[16]);
 8008778:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800877c:	3310      	adds	r3, #16
 800877e:	4618      	mov	r0, r3
 8008780:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8008784:	f001 f929 	bl	80099da <_Z18float_to_bytearrayfPh>
		float_to_bytearray(imu_acc_y, &data[20]);
 8008788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800878c:	3314      	adds	r3, #20
 800878e:	4618      	mov	r0, r3
 8008790:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8008794:	f001 f921 	bl	80099da <_Z18float_to_bytearrayfPh>
		float_to_bytearray(imu_acc_z, &data[24]);
 8008798:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800879c:	3318      	adds	r3, #24
 800879e:	4618      	mov	r0, r3
 80087a0:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 80087a4:	f001 f919 	bl	80099da <_Z18float_to_bytearrayfPh>

		uint8_t encode_length = cobsEncode(data, 28, data_encoded);
 80087a8:	f107 0208 	add.w	r2, r7, #8
 80087ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80087b0:	211c      	movs	r1, #28
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 f889 	bl	80098ca <_Z10cobsEncodePhhS_>
 80087b8:	4603      	mov	r3, r0
 80087ba:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		data_encoded[encode_length] = 0x00;
 80087be:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80087c2:	33a8      	adds	r3, #168	; 0xa8
 80087c4:	443b      	add	r3, r7
 80087c6:	2200      	movs	r2, #0
 80087c8:	f803 2ca0 	strb.w	r2, [r3, #-160]

		HAL_UART_Transmit(&huart1, data_encoded, encode_length + 1,
 80087cc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3301      	adds	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	f107 0108 	add.w	r1, r7, #8
 80087da:	f04f 33ff 	mov.w	r3, #4294967295
 80087de:	4808      	ldr	r0, [pc, #32]	; (8008800 <_Z18communication_taskPv+0x174>)
 80087e0:	f7fb ff46 	bl	8004670 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		osDelayUntil(comm_rtos_tick + COMM_TIME);
 80087e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087e8:	3314      	adds	r3, #20
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fd f964 	bl	8005ab8 <osDelayUntil>

	}
 80087f0:	e76b      	b.n	80086ca <_Z18communication_taskPv+0x3e>
 80087f2:	bf00      	nop
 80087f4:	20001cac 	.word	0x20001cac
 80087f8:	20001ca8 	.word	0x20001ca8
 80087fc:	20001cb0 	.word	0x20001cb0
 8008800:	200001b4 	.word	0x200001b4

08008804 <_Z41__static_initialization_and_destruction_0ii>:

}
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d10a      	bne.n	800882a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800881a:	4293      	cmp	r3, r2
 800881c:	d105      	bne.n	800882a <_Z41__static_initialization_and_destruction_0ii+0x26>
elapsedMillis blinkTimer;
 800881e:	4805      	ldr	r0, [pc, #20]	; (8008834 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8008820:	f7ff fea1 	bl	8008566 <_ZN13elapsedMillisC1Ev>
BMI160 imu;
 8008824:	4804      	ldr	r0, [pc, #16]	; (8008838 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8008826:	f000 f949 	bl	8008abc <_ZN6BMI160C1Ev>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20001ca8 	.word	0x20001ca8
 8008838:	20001cb0 	.word	0x20001cb0

0800883c <_GLOBAL__sub_I_imu_config>:
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
 8008840:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008844:	2001      	movs	r0, #1
 8008846:	f7ff ffdd 	bl	8008804 <_Z41__static_initialization_and_destruction_0ii>
 800884a:	bd80      	pop	{r7, pc}

0800884c <_Z41__static_initialization_and_destruction_0ii>:
			socket->rx_function();
		}

	}
	vTaskDelete(socket->getTaskID());
}
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d108      	bne.n	800886e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008862:	4293      	cmp	r3, r2
 8008864:	d103      	bne.n	800886e <_Z41__static_initialization_and_destruction_0ii+0x22>
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };
 8008866:	4a05      	ldr	r2, [pc, #20]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6013      	str	r3, [r2, #0]
}
 800886e:	bf00      	nop
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000028 	.word	0x20000028
 8008880:	20000024 	.word	0x20000024

08008884 <_GLOBAL__sub_I_std_hardware_uart_config>:
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
 8008888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800888c:	2001      	movs	r0, #1
 800888e:	f7ff ffdd 	bl	800884c <_Z41__static_initialization_and_destruction_0ii>
 8008892:	bd80      	pop	{r7, pc}

08008894 <_ZN8CallbackC1Ev>:
#include "stdint.h"
#include "core_utils_functionpointer.h"

class Callback {
public:
	Callback(){
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	4a04      	ldr	r2, [pc, #16]	; (80088b0 <_ZN8CallbackC1Ev+0x1c>)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	601a      	str	r2, [r3, #0]

	}
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	08009d80 	.word	0x08009d80

080088b4 <_ZN8Callback4callEv>:

	virtual void call(){
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

	}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <_ZN8Callback4callEPv>:

	virtual void call(void* argument){
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]

	}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
	...

080088e0 <_ZN19core_utils_CallbackIvvEC1Ev>:


template<typename R>
class core_utils_Callback<R, void>: public Callback {
public:
	core_utils_Callback() {
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff ffd2 	bl	8008894 <_ZN8CallbackC1Ev>
 80088f0:	4a09      	ldr	r2, [pc, #36]	; (8008918 <_ZN19core_utils_CallbackIvvEC1Ev+0x38>)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	711a      	strb	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3308      	adds	r3, #8
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f817 	bl	8008936 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		this->registered = 0;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	711a      	strb	r2, [r3, #4]
	}
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	08009d70 	.word	0x08009d70

0800891c <_ZN19core_utils_CallbackIvvE4callEv>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
		_fp = core_utils_FunctionPointer<R,void>(object, member);
		this->registered = 1;
	}

	R call() {
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
		return this->_fp();
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3308      	adds	r3, #8
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f812 	bl	8008952 <_ZN26core_utils_FunctionPointerIvvEclEv>
 800892e:	bf00      	nop
	}
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>:
public:
    /** Create a FunctionPointer, attaching a static function
     *
     *  @param function The static function to attach (default is none)
     */
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
        attach(function);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f810 	bl	8008968 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>
    }
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <_ZN26core_utils_FunctionPointerIvvEclEv>:
    R(*get_function())() {
        return _membercaller ? (R(*)())0 : (R(*)())_p.function;
    }

#ifdef MBED_OPERATORS
    R operator ()(void) {
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
        return call();
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f815 	bl	800898a <_ZN26core_utils_FunctionPointerIvvE4callEv>
 8008960:	bf00      	nop
    }
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>:
    void attach(R (*function)(void)) {
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	615a      	str	r2, [r3, #20]
    }
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <_ZN26core_utils_FunctionPointerIvvE4callEv>:
    R call(){
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d107      	bne.n	80089aa <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
            return _p.function();
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4798      	blx	r3
 80089a8:	e011      	b.n	80089ce <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        } else if (_membercaller && _p.object) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00c      	beq.n	80089cc <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
            return _membercaller(_p.object, _member);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6810      	ldr	r0, [r2, #0]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	3204      	adds	r2, #4
 80089c6:	4611      	mov	r1, r2
 80089c8:	4798      	blx	r3
 80089ca:	e000      	b.n	80089ce <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        return (R)0;
 80089cc:	bf00      	nop
    }
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <_Z7deg2radf>:

#include "stdint.h"

const float pi = 3.14159265;

inline float deg2rad(float angle) {
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle * pi / 180.0;
 80089de:	edd7 7a01 	vldr	s15, [r7, #4]
 80089e2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8008a04 <_Z7deg2radf+0x30>
 80089e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089ea:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8008a08 <_Z7deg2radf+0x34>
 80089ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80089f2:	eef0 7a66 	vmov.f32	s15, s13
}
 80089f6:	eeb0 0a67 	vmov.f32	s0, s15
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	40490fdb 	.word	0x40490fdb
 8008a08:	43340000 	.word	0x43340000

08008a0c <_ZN18bmi160_gyr_calib_tC1Ev>:
	float x;
	float y;
	float z;
} bmi160_acc;

typedef struct bmi160_gyr_calib_t {
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f04f 0200 	mov.w	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f04f 0200 	mov.w	r2, #0
 8008a22:	605a      	str	r2, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f04f 0200 	mov.w	r2, #0
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <_ZN19bmi160_gyr_config_tC1Ev>:
	uint8_t bw = BMI160_ACCEL_BW_NORMAL_AVG4;
	uint8_t range = BMI160_ACCEL_RANGE_8G;
	uint8_t foc_enable = 0;
} bmi160_acc_config_t;

typedef struct bmi160_gyr_config_t {
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	220a      	movs	r2, #10
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	705a      	strb	r2, [r3, #1]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	709a      	strb	r2, [r3, #2]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	70da      	strb	r2, [r3, #3]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <_ZN19bmi160_acc_config_tC1Ev>:
typedef struct bmi160_acc_config_t {
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	220a      	movs	r2, #10
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	705a      	strb	r2, [r3, #1]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2208      	movs	r2, #8
 8008a80:	709a      	strb	r2, [r3, #2]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	70da      	strb	r2, [r3, #3]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <_ZN15bmi160_config_tC1Ev>:
	uint8_t bw = BMI160_GYRO_BW_NORMAL_MODE;
	uint8_t range = BMI160_GYRO_RANGE_1000_DPS;
	uint8_t foc_enable = 1;
} bmi160_gyr_config_t;

typedef struct bmi160_config_t {
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	330a      	adds	r3, #10
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff ffc9 	bl	8008a3a <_ZN19bmi160_gyr_config_tC1Ev>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	330e      	adds	r3, #14
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff ffdb 	bl	8008a68 <_ZN19bmi160_acc_config_tC1Ev>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <_ZN6BMI160C1Ev>:

#include "bmi160.h"

#if CORE_CONFIG_USE_SPI

BMI160::BMI160(){
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	332c      	adds	r3, #44	; 0x2c
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff ff9f 	bl	8008a0c <_ZN18bmi160_gyr_calib_tC1Ev>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3338      	adds	r3, #56	; 0x38
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff ffdf 	bl	8008a96 <_ZN15bmi160_config_tC1Ev>

}
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <_ZN6BMI16013writeRegisterEhh>:

/* ============================================================================= */
uint8_t BMI160::writeRegister(uint8_t reg, uint8_t data) {
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
 8008aee:	4613      	mov	r3, r2
 8008af0:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008afc:	2200      	movs	r2, #0
 8008afe:	4619      	mov	r1, r3
 8008b00:	f7f9 f95a 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008b08:	1cf9      	adds	r1, r7, #3
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f7fa fc15 	bl	800333c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(this->_config.hspi, &data, 1, 1);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008b16:	1cb9      	adds	r1, r7, #2
 8008b18:	2301      	movs	r3, #1
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f7fa fc0e 	bl	800333c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f7f9 f943 	bl	8001db8 <HAL_GPIO_WritePin>

	return CORE_OK;
 8008b32:	2301      	movs	r3, #1
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <_ZN6BMI1604initE15bmi160_config_t>:

/* ============================================================================= */
uint8_t BMI160::init(bmi160_config_t config) {
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	b5b0      	push	{r4, r5, r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->_config = config;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8008b54:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8008b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	6023      	str	r3, [r4, #0]
	// Make a dummy read to turn on SPI mode
//

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f7f9 f923 	bl	8001db8 <HAL_GPIO_WritePin>
	delay(100);
 8008b72:	2064      	movs	r0, #100	; 0x64
 8008b74:	f7ff fce2 	bl	800853c <_Z5delaym>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b82:	2201      	movs	r2, #1
 8008b84:	4619      	mov	r1, r3
 8008b86:	f7f9 f917 	bl	8001db8 <HAL_GPIO_WritePin>

	// Reset the IMU to delete all previously loaded registers
	this->readRegister(0x7F);
 8008b8a:	217f      	movs	r1, #127	; 0x7f
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f88a 	bl	8008ca6 <_ZN6BMI16012readRegisterEh>

	delay(250);
 8008b92:	20fa      	movs	r0, #250	; 0xfa
 8008b94:	f7ff fcd2 	bl	800853c <_Z5delaym>

	// Check if the IMU can be addressed
	if (not (this->check())) {
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f8ed 	bl	8008d78 <_ZN6BMI1605checkEv>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <_ZN6BMI1604initE15bmi160_config_t+0x76>
		return 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e072      	b.n	8008c98 <_ZN6BMI1604initE15bmi160_config_t+0x15c>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
	}


	this->reset();
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fe79 	bl	80098aa <_ZN6BMI1605resetEv>
	// Wait until the reset is finished
	delay(250);
 8008bb8:	20fa      	movs	r0, #250	; 0xfa
 8008bba:	f7ff fcbf 	bl	800853c <_Z5delaym>

	// Make a dummy read again to turn on SPI
	this->readRegister(0x7F);
 8008bbe:	217f      	movs	r1, #127	; 0x7f
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f870 	bl	8008ca6 <_ZN6BMI16012readRegisterEh>

	// Set the power mode to normal in order for all registers to be writable
	this->setPowerMode(BMI160_Power_Normal);
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fe39 	bl	8009840 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>

	// Set the accelerometer setting
	this->setAccConfig(this->_config.acc.odr | this->_config.acc.bw,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	b2d9      	uxtb	r1, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008be4:	461a      	mov	r2, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fe11 	bl	800980e <_ZN6BMI16012setAccConfigEhh>
			this->_config.acc.range);

	// Set the gyroscope setting
	this->setGyroConfig(this->_config.gyr.odr | this->_config.gyr.bw,
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	b2d9      	uxtb	r1, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c02:	461a      	mov	r2, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fde9 	bl	80097dc <_ZN6BMI16013setGyroConfigEhh>
			this->_config.gyr.range);

	// Check if the settings have been set correctly

	uint8_t acc_config_reg = this->readRegister(BMI160_REG_ACCEL_CONFIG);
 8008c0a:	2140      	movs	r1, #64	; 0x40
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f84a 	bl	8008ca6 <_ZN6BMI16012readRegisterEh>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]
	uint8_t acc_range_reg = this->readRegister(BMI160_REG_ACCEL_RANGE);
 8008c16:	2141      	movs	r1, #65	; 0x41
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f844 	bl	8008ca6 <_ZN6BMI16012readRegisterEh>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]
	uint8_t gyr_config_reg = this->readRegister(BMI160_REG_GYRO_CONFIG);
 8008c22:	2142      	movs	r1, #66	; 0x42
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f83e 	bl	8008ca6 <_ZN6BMI16012readRegisterEh>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	737b      	strb	r3, [r7, #13]
	uint8_t gyr_range_reg = this->readRegister(BMI160_REG_GYRO_RANGE);
 8008c2e:	2143      	movs	r1, #67	; 0x43
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f838 	bl	8008ca6 <_ZN6BMI16012readRegisterEh>
 8008c36:	4603      	mov	r3, r0
 8008c38:	733b      	strb	r3, [r7, #12]

	if (acc_config_reg != (this->_config.acc.odr | this->_config.acc.bw)) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008c46:	4313      	orrs	r3, r2
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	7bfa      	ldrb	r2, [r7, #15]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d002      	beq.n	8008c56 <_ZN6BMI1604initE15bmi160_config_t+0x11a>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8008c50:	2008      	movs	r0, #8
 8008c52:	f000 fee7 	bl	8009a24 <_Z17core_ErrorHandleri>
	}
	if (acc_range_reg != this->_config.acc.range) {
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008c5c:	7bba      	ldrb	r2, [r7, #14]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d002      	beq.n	8008c68 <_ZN6BMI1604initE15bmi160_config_t+0x12c>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8008c62:	2008      	movs	r0, #8
 8008c64:	f000 fede 	bl	8009a24 <_Z17core_ErrorHandleri>
	}
	if (gyr_config_reg != (this->_config.gyr.odr | this->_config.gyr.bw)) {
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c74:	4313      	orrs	r3, r2
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	7b7a      	ldrb	r2, [r7, #13]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d002      	beq.n	8008c84 <_ZN6BMI1604initE15bmi160_config_t+0x148>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8008c7e:	2008      	movs	r0, #8
 8008c80:	f000 fed0 	bl	8009a24 <_Z17core_ErrorHandleri>
	}
	if (gyr_range_reg != this->_config.gyr.range) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c8a:	7b3a      	ldrb	r2, [r7, #12]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d002      	beq.n	8008c96 <_ZN6BMI1604initE15bmi160_config_t+0x15a>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8008c90:	2008      	movs	r0, #8
 8008c92:	f000 fec7 	bl	8009a24 <_Z17core_ErrorHandleri>
	}

	return CORE_OK;
 8008c96:	2301      	movs	r3, #1
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008ca2:	b004      	add	sp, #16
 8008ca4:	4770      	bx	lr

08008ca6 <_ZN6BMI16012readRegisterEh>:

/* ============================================================================= */
uint8_t BMI160::readRegister(uint8_t reg) {
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
	reg |= 0x80;
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4619      	mov	r1, r3
 8008cce:	f7f9 f873 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 100);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008cd6:	1cf9      	adds	r1, r7, #3
 8008cd8:	2364      	movs	r3, #100	; 0x64
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f7fa fb2e 	bl	800333c <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, &ret, 1, 100);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ce4:	f107 010f 	add.w	r1, r7, #15
 8008ce8:	2364      	movs	r3, #100	; 0x64
 8008cea:	2201      	movs	r2, #1
 8008cec:	f7fa fc9b 	bl	8003626 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f7f9 f85b 	bl	8001db8 <HAL_GPIO_WritePin>

	return ret;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <_ZN6BMI16020readMultipleRegisterEhPhh>:

/* ============================================================================= */
uint8_t BMI160::readMultipleRegister(uint8_t reg, uint8_t *data, uint8_t len) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	607a      	str	r2, [r7, #4]
 8008d16:	461a      	mov	r2, r3
 8008d18:	460b      	mov	r3, r1
 8008d1a:	72fb      	strb	r3, [r7, #11]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	72bb      	strb	r3, [r7, #10]
//	reg += 0x80;
	reg |= 0x80;
 8008d20:	7afb      	ldrb	r3, [r7, #11]
 8008d22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d34:	2200      	movs	r2, #0
 8008d36:	4619      	mov	r1, r3
 8008d38:	f7f9 f83e 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 100);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008d40:	f107 010b 	add.w	r1, r7, #11
 8008d44:	2364      	movs	r3, #100	; 0x64
 8008d46:	2201      	movs	r2, #1
 8008d48:	f7fa faf8 	bl	800333c <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, data, len, 100);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008d50:	7abb      	ldrb	r3, [r7, #10]
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	2364      	movs	r3, #100	; 0x64
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	f7fa fc65 	bl	8003626 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d66:	2201      	movs	r2, #1
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f7f9 f825 	bl	8001db8 <HAL_GPIO_WritePin>

	return CORE_OK;
 8008d6e:	2301      	movs	r3, #1
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <_ZN6BMI1605checkEv>:

/* ============================================================================= */
uint8_t BMI160::check() {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
	uint8_t id = this->readID();
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f80c 	bl	8008d9e <_ZN6BMI1606readIDEv>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73fb      	strb	r3, [r7, #15]
	if (id != 209) {
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	2bd1      	cmp	r3, #209	; 0xd1
 8008d8e:	d001      	beq.n	8008d94 <_ZN6BMI1605checkEv+0x1c>
		return 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	e000      	b.n	8008d96 <_ZN6BMI1605checkEv+0x1e>
	}

	return CORE_OK;
 8008d94:	2301      	movs	r3, #1
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <_ZN6BMI1606readIDEv>:

/* ============================================================================= */
uint8_t BMI160::readID() {
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
	return this->readRegister(BMI160_REG_CHIP_ID);
 8008da6:	2100      	movs	r1, #0
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff ff7c 	bl	8008ca6 <_ZN6BMI16012readRegisterEh>
 8008dae:	4603      	mov	r3, r0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <_ZN6BMI1606updateEv>:

/* ============================================================================= */
void BMI160::update() {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	this->fetchData();
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f807 	bl	8008dd4 <_ZN6BMI1609fetchDataEv>
	this->processData();
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f816 	bl	8008df8 <_ZN6BMI16011processDataEv>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <_ZN6BMI1609fetchDataEv>:

/* ============================================================================= */
uint8_t BMI160::fetchData() {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
//	this->readSensorTime();
	this->readGyr();
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fc9b 	bl	8009718 <_ZN6BMI1607readGyrEv>
	this->readAcc();
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fcc9 	bl	800977a <_ZN6BMI1607readAccEv>

	return 1;
 8008de8:	2301      	movs	r3, #1
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	0000      	movs	r0, r0
 8008df4:	0000      	movs	r0, r0
	...

08008df8 <_ZN6BMI16011processDataEv>:

/* ============================================================================= */
uint8_t BMI160::processData() {
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]

	// Gyroscope
	switch (this->_config.gyr.range) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	f200 8282 	bhi.w	8009310 <_ZN6BMI16011processDataEv+0x518>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <_ZN6BMI16011processDataEv+0x1c>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08009219 	.word	0x08009219
 8008e18:	08009121 	.word	0x08009121
 8008e1c:	08009019 	.word	0x08009019
 8008e20:	08008f21 	.word	0x08008f21
 8008e24:	08008e29 	.word	0x08008e29
	case BMI160_GYRO_RANGE_125_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f7 fb20 	bl	8000474 <__aeabi_i2d>
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	4bb5      	ldr	r3, [pc, #724]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 8008e3a:	f7f7 fcaf 	bl	800079c <__aeabi_ddiv>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4610      	mov	r0, r2
 8008e44:	4619      	mov	r1, r3
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	4bb2      	ldr	r3, [pc, #712]	; (8009114 <_ZN6BMI16011processDataEv+0x31c>)
 8008e4c:	f7f7 fb7c 	bl	8000548 <__aeabi_dmul>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4610      	mov	r0, r2
 8008e56:	4619      	mov	r1, r3
 8008e58:	f7f7 fd88 	bl	800096c <__aeabi_d2f>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	ee00 3a10 	vmov	s0, r3
 8008e62:	f7ff fdb7 	bl	80089d4 <_Z7deg2radf>
 8008e66:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008e70:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7f7 faf7 	bl	8000474 <__aeabi_i2d>
 8008e86:	f04f 0200 	mov.w	r2, #0
 8008e8a:	4ba1      	ldr	r3, [pc, #644]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 8008e8c:	f7f7 fc86 	bl	800079c <__aeabi_ddiv>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4610      	mov	r0, r2
 8008e96:	4619      	mov	r1, r3
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	4b9d      	ldr	r3, [pc, #628]	; (8009114 <_ZN6BMI16011processDataEv+0x31c>)
 8008e9e:	f7f7 fb53 	bl	8000548 <__aeabi_dmul>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f7f7 fd5f 	bl	800096c <__aeabi_d2f>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	ee00 3a10 	vmov	s0, r3
 8008eb4:	f7ff fd8e 	bl	80089d4 <_Z7deg2radf>
 8008eb8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f7 face 	bl	8000474 <__aeabi_i2d>
 8008ed8:	f04f 0200 	mov.w	r2, #0
 8008edc:	4b8c      	ldr	r3, [pc, #560]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 8008ede:	f7f7 fc5d 	bl	800079c <__aeabi_ddiv>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	f04f 0200 	mov.w	r2, #0
 8008eee:	4b89      	ldr	r3, [pc, #548]	; (8009114 <_ZN6BMI16011processDataEv+0x31c>)
 8008ef0:	f7f7 fb2a 	bl	8000548 <__aeabi_dmul>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4619      	mov	r1, r3
 8008efc:	f7f7 fd36 	bl	800096c <__aeabi_d2f>
 8008f00:	4603      	mov	r3, r0
 8008f02:	ee00 3a10 	vmov	s0, r3
 8008f06:	f7ff fd65 	bl	80089d4 <_Z7deg2radf>
 8008f0a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008f14:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8008f1e:	e1f7      	b.n	8009310 <_ZN6BMI16011processDataEv+0x518>
	}
	case BMI160_GYRO_RANGE_250_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f7 faa4 	bl	8000474 <__aeabi_i2d>
 8008f2c:	f04f 0200 	mov.w	r2, #0
 8008f30:	4b77      	ldr	r3, [pc, #476]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 8008f32:	f7f7 fc33 	bl	800079c <__aeabi_ddiv>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f04f 0200 	mov.w	r2, #0
 8008f42:	4b75      	ldr	r3, [pc, #468]	; (8009118 <_ZN6BMI16011processDataEv+0x320>)
 8008f44:	f7f7 fb00 	bl	8000548 <__aeabi_dmul>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4619      	mov	r1, r3
 8008f50:	f7f7 fd0c 	bl	800096c <__aeabi_d2f>
 8008f54:	4603      	mov	r3, r0
 8008f56:	ee00 3a10 	vmov	s0, r3
 8008f5a:	f7ff fd3b 	bl	80089d4 <_Z7deg2radf>
 8008f5e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008f68:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7f7 fa7b 	bl	8000474 <__aeabi_i2d>
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	4b63      	ldr	r3, [pc, #396]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 8008f84:	f7f7 fc0a 	bl	800079c <__aeabi_ddiv>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4619      	mov	r1, r3
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	4b60      	ldr	r3, [pc, #384]	; (8009118 <_ZN6BMI16011processDataEv+0x320>)
 8008f96:	f7f7 fad7 	bl	8000548 <__aeabi_dmul>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f7f7 fce3 	bl	800096c <__aeabi_d2f>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	ee00 3a10 	vmov	s0, r3
 8008fac:	f7ff fd12 	bl	80089d4 <_Z7deg2radf>
 8008fb0:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008fba:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7f7 fa52 	bl	8000474 <__aeabi_i2d>
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	4b4e      	ldr	r3, [pc, #312]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 8008fd6:	f7f7 fbe1 	bl	800079c <__aeabi_ddiv>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	4b4c      	ldr	r3, [pc, #304]	; (8009118 <_ZN6BMI16011processDataEv+0x320>)
 8008fe8:	f7f7 faae 	bl	8000548 <__aeabi_dmul>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	f7f7 fcba 	bl	800096c <__aeabi_d2f>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	ee00 3a10 	vmov	s0, r3
 8008ffe:	f7ff fce9 	bl	80089d4 <_Z7deg2radf>
 8009002:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800900c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8009016:	e17b      	b.n	8009310 <_ZN6BMI16011processDataEv+0x518>
	}
	case BMI160_GYRO_RANGE_500_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800901e:	4618      	mov	r0, r3
 8009020:	f7f7 fa28 	bl	8000474 <__aeabi_i2d>
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	4b39      	ldr	r3, [pc, #228]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 800902a:	f7f7 fbb7 	bl	800079c <__aeabi_ddiv>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4610      	mov	r0, r2
 8009034:	4619      	mov	r1, r3
 8009036:	f04f 0200 	mov.w	r2, #0
 800903a:	4b38      	ldr	r3, [pc, #224]	; (800911c <_ZN6BMI16011processDataEv+0x324>)
 800903c:	f7f7 fa84 	bl	8000548 <__aeabi_dmul>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4610      	mov	r0, r2
 8009046:	4619      	mov	r1, r3
 8009048:	f7f7 fc90 	bl	800096c <__aeabi_d2f>
 800904c:	4603      	mov	r3, r0
 800904e:	ee00 3a10 	vmov	s0, r3
 8009052:	f7ff fcbf 	bl	80089d4 <_Z7deg2radf>
 8009056:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009060:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009070:	4618      	mov	r0, r3
 8009072:	f7f7 f9ff 	bl	8000474 <__aeabi_i2d>
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	4b25      	ldr	r3, [pc, #148]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 800907c:	f7f7 fb8e 	bl	800079c <__aeabi_ddiv>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4610      	mov	r0, r2
 8009086:	4619      	mov	r1, r3
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	4b23      	ldr	r3, [pc, #140]	; (800911c <_ZN6BMI16011processDataEv+0x324>)
 800908e:	f7f7 fa5b 	bl	8000548 <__aeabi_dmul>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4610      	mov	r0, r2
 8009098:	4619      	mov	r1, r3
 800909a:	f7f7 fc67 	bl	800096c <__aeabi_d2f>
 800909e:	4603      	mov	r3, r0
 80090a0:	ee00 3a10 	vmov	s0, r3
 80090a4:	f7ff fc96 	bl	80089d4 <_Z7deg2radf>
 80090a8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80090b2:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7f7 f9d6 	bl	8000474 <__aeabi_i2d>
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	4b10      	ldr	r3, [pc, #64]	; (8009110 <_ZN6BMI16011processDataEv+0x318>)
 80090ce:	f7f7 fb65 	bl	800079c <__aeabi_ddiv>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4610      	mov	r0, r2
 80090d8:	4619      	mov	r1, r3
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	4b0f      	ldr	r3, [pc, #60]	; (800911c <_ZN6BMI16011processDataEv+0x324>)
 80090e0:	f7f7 fa32 	bl	8000548 <__aeabi_dmul>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4610      	mov	r0, r2
 80090ea:	4619      	mov	r1, r3
 80090ec:	f7f7 fc3e 	bl	800096c <__aeabi_d2f>
 80090f0:	4603      	mov	r3, r0
 80090f2:	ee00 3a10 	vmov	s0, r3
 80090f6:	f7ff fc6d 	bl	80089d4 <_Z7deg2radf>
 80090fa:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009104:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 800910e:	e0ff      	b.n	8009310 <_ZN6BMI16011processDataEv+0x518>
 8009110:	40e00000 	.word	0x40e00000
 8009114:	405f4000 	.word	0x405f4000
 8009118:	406f4000 	.word	0x406f4000
 800911c:	407f4000 	.word	0x407f4000
	}
	case BMI160_GYRO_RANGE_1000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009126:	4618      	mov	r0, r3
 8009128:	f7f7 f9a4 	bl	8000474 <__aeabi_i2d>
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	4bc1      	ldr	r3, [pc, #772]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 8009132:	f7f7 fb33 	bl	800079c <__aeabi_ddiv>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4610      	mov	r0, r2
 800913c:	4619      	mov	r1, r3
 800913e:	f04f 0200 	mov.w	r2, #0
 8009142:	4bbe      	ldr	r3, [pc, #760]	; (800943c <_ZN6BMI16011processDataEv+0x644>)
 8009144:	f7f7 fa00 	bl	8000548 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4610      	mov	r0, r2
 800914e:	4619      	mov	r1, r3
 8009150:	f7f7 fc0c 	bl	800096c <__aeabi_d2f>
 8009154:	4603      	mov	r3, r0
 8009156:	ee00 3a10 	vmov	s0, r3
 800915a:	f7ff fc3b 	bl	80089d4 <_Z7deg2radf>
 800915e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009168:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009178:	4618      	mov	r0, r3
 800917a:	f7f7 f97b 	bl	8000474 <__aeabi_i2d>
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	4bad      	ldr	r3, [pc, #692]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 8009184:	f7f7 fb0a 	bl	800079c <__aeabi_ddiv>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4610      	mov	r0, r2
 800918e:	4619      	mov	r1, r3
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	4ba9      	ldr	r3, [pc, #676]	; (800943c <_ZN6BMI16011processDataEv+0x644>)
 8009196:	f7f7 f9d7 	bl	8000548 <__aeabi_dmul>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4610      	mov	r0, r2
 80091a0:	4619      	mov	r1, r3
 80091a2:	f7f7 fbe3 	bl	800096c <__aeabi_d2f>
 80091a6:	4603      	mov	r3, r0
 80091a8:	ee00 3a10 	vmov	s0, r3
 80091ac:	f7ff fc12 	bl	80089d4 <_Z7deg2radf>
 80091b0:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80091ba:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7f7 f952 	bl	8000474 <__aeabi_i2d>
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	4b98      	ldr	r3, [pc, #608]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 80091d6:	f7f7 fae1 	bl	800079c <__aeabi_ddiv>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4610      	mov	r0, r2
 80091e0:	4619      	mov	r1, r3
 80091e2:	f04f 0200 	mov.w	r2, #0
 80091e6:	4b95      	ldr	r3, [pc, #596]	; (800943c <_ZN6BMI16011processDataEv+0x644>)
 80091e8:	f7f7 f9ae 	bl	8000548 <__aeabi_dmul>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4610      	mov	r0, r2
 80091f2:	4619      	mov	r1, r3
 80091f4:	f7f7 fbba 	bl	800096c <__aeabi_d2f>
 80091f8:	4603      	mov	r3, r0
 80091fa:	ee00 3a10 	vmov	s0, r3
 80091fe:	f7ff fbe9 	bl	80089d4 <_Z7deg2radf>
 8009202:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800920c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8009216:	e07b      	b.n	8009310 <_ZN6BMI16011processDataEv+0x518>
	}
	case BMI160_GYRO_RANGE_2000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800921e:	4618      	mov	r0, r3
 8009220:	f7f7 f928 	bl	8000474 <__aeabi_i2d>
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	4b83      	ldr	r3, [pc, #524]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 800922a:	f7f7 fab7 	bl	800079c <__aeabi_ddiv>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4610      	mov	r0, r2
 8009234:	4619      	mov	r1, r3
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	4b81      	ldr	r3, [pc, #516]	; (8009440 <_ZN6BMI16011processDataEv+0x648>)
 800923c:	f7f7 f984 	bl	8000548 <__aeabi_dmul>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4610      	mov	r0, r2
 8009246:	4619      	mov	r1, r3
 8009248:	f7f7 fb90 	bl	800096c <__aeabi_d2f>
 800924c:	4603      	mov	r3, r0
 800924e:	ee00 3a10 	vmov	s0, r3
 8009252:	f7ff fbbf 	bl	80089d4 <_Z7deg2radf>
 8009256:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009260:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009270:	4618      	mov	r0, r3
 8009272:	f7f7 f8ff 	bl	8000474 <__aeabi_i2d>
 8009276:	f04f 0200 	mov.w	r2, #0
 800927a:	4b6f      	ldr	r3, [pc, #444]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 800927c:	f7f7 fa8e 	bl	800079c <__aeabi_ddiv>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4610      	mov	r0, r2
 8009286:	4619      	mov	r1, r3
 8009288:	f04f 0200 	mov.w	r2, #0
 800928c:	4b6c      	ldr	r3, [pc, #432]	; (8009440 <_ZN6BMI16011processDataEv+0x648>)
 800928e:	f7f7 f95b 	bl	8000548 <__aeabi_dmul>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4610      	mov	r0, r2
 8009298:	4619      	mov	r1, r3
 800929a:	f7f7 fb67 	bl	800096c <__aeabi_d2f>
 800929e:	4603      	mov	r3, r0
 80092a0:	ee00 3a10 	vmov	s0, r3
 80092a4:	f7ff fb96 	bl	80089d4 <_Z7deg2radf>
 80092a8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80092b2:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f7 f8d6 	bl	8000474 <__aeabi_i2d>
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	4b5a      	ldr	r3, [pc, #360]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 80092ce:	f7f7 fa65 	bl	800079c <__aeabi_ddiv>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4610      	mov	r0, r2
 80092d8:	4619      	mov	r1, r3
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	4b58      	ldr	r3, [pc, #352]	; (8009440 <_ZN6BMI16011processDataEv+0x648>)
 80092e0:	f7f7 f932 	bl	8000548 <__aeabi_dmul>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4610      	mov	r0, r2
 80092ea:	4619      	mov	r1, r3
 80092ec:	f7f7 fb3e 	bl	800096c <__aeabi_d2f>
 80092f0:	4603      	mov	r3, r0
 80092f2:	ee00 3a10 	vmov	s0, r3
 80092f6:	f7ff fb6d 	bl	80089d4 <_Z7deg2radf>
 80092fa:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009304:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 800930e:	bf00      	nop
	}
	}

	// Accelerometer
	switch (this->_config.acc.range) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009316:	3b03      	subs	r3, #3
 8009318:	2b09      	cmp	r3, #9
 800931a:	f200 81ec 	bhi.w	80096f6 <_ZN6BMI16011processDataEv+0x8fe>
 800931e:	a201      	add	r2, pc, #4	; (adr r2, 8009324 <_ZN6BMI16011processDataEv+0x52c>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	0800934d 	.word	0x0800934d
 8009328:	080096f7 	.word	0x080096f7
 800932c:	08009445 	.word	0x08009445
 8009330:	080096f7 	.word	0x080096f7
 8009334:	080096f7 	.word	0x080096f7
 8009338:	0800952b 	.word	0x0800952b
 800933c:	080096f7 	.word	0x080096f7
 8009340:	080096f7 	.word	0x080096f7
 8009344:	080096f7 	.word	0x080096f7
 8009348:	08009611 	.word	0x08009611
	case BMI160_ACCEL_RANGE_2G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 2.0 * 9.81;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009352:	4618      	mov	r0, r3
 8009354:	f7f7 f88e 	bl	8000474 <__aeabi_i2d>
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	4b36      	ldr	r3, [pc, #216]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 800935e:	f7f7 fa1d 	bl	800079c <__aeabi_ddiv>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4610      	mov	r0, r2
 8009368:	4619      	mov	r1, r3
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	f7f6 ff35 	bl	80001dc <__adddf3>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4610      	mov	r0, r2
 8009378:	4619      	mov	r1, r3
 800937a:	a32d      	add	r3, pc, #180	; (adr r3, 8009430 <_ZN6BMI16011processDataEv+0x638>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f7 f8e2 	bl	8000548 <__aeabi_dmul>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4610      	mov	r0, r2
 800938a:	4619      	mov	r1, r3
 800938c:	f7f7 faee 	bl	800096c <__aeabi_d2f>
 8009390:	4602      	mov	r2, r0
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	61da      	str	r2, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 2.0 * 9.81;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800939c:	4618      	mov	r0, r3
 800939e:	f7f7 f869 	bl	8000474 <__aeabi_i2d>
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	4b24      	ldr	r3, [pc, #144]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 80093a8:	f7f7 f9f8 	bl	800079c <__aeabi_ddiv>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4610      	mov	r0, r2
 80093b2:	4619      	mov	r1, r3
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	f7f6 ff10 	bl	80001dc <__adddf3>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4610      	mov	r0, r2
 80093c2:	4619      	mov	r1, r3
 80093c4:	a31a      	add	r3, pc, #104	; (adr r3, 8009430 <_ZN6BMI16011processDataEv+0x638>)
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	f7f7 f8bd 	bl	8000548 <__aeabi_dmul>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4610      	mov	r0, r2
 80093d4:	4619      	mov	r1, r3
 80093d6:	f7f7 fac9 	bl	800096c <__aeabi_d2f>
 80093da:	4602      	mov	r2, r0
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	621a      	str	r2, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 2.0 * 9.81;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7f7 f844 	bl	8000474 <__aeabi_i2d>
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <_ZN6BMI16011processDataEv+0x640>)
 80093f2:	f7f7 f9d3 	bl	800079c <__aeabi_ddiv>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4610      	mov	r0, r2
 80093fc:	4619      	mov	r1, r3
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	f7f6 feeb 	bl	80001dc <__adddf3>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4610      	mov	r0, r2
 800940c:	4619      	mov	r1, r3
 800940e:	a308      	add	r3, pc, #32	; (adr r3, 8009430 <_ZN6BMI16011processDataEv+0x638>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f7f7 f898 	bl	8000548 <__aeabi_dmul>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4610      	mov	r0, r2
 800941e:	4619      	mov	r1, r3
 8009420:	f7f7 faa4 	bl	800096c <__aeabi_d2f>
 8009424:	4602      	mov	r2, r0
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 800942a:	e164      	b.n	80096f6 <_ZN6BMI16011processDataEv+0x8fe>
 800942c:	f3af 8000 	nop.w
 8009430:	51eb851f 	.word	0x51eb851f
 8009434:	40239eb8 	.word	0x40239eb8
 8009438:	40e00000 	.word	0x40e00000
 800943c:	408f4000 	.word	0x408f4000
 8009440:	409f4000 	.word	0x409f4000
	}
	case BMI160_ACCEL_RANGE_4G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 4.0 * 9.81;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800944a:	4618      	mov	r0, r3
 800944c:	f7f7 f812 	bl	8000474 <__aeabi_i2d>
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	4bac      	ldr	r3, [pc, #688]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 8009456:	f7f7 f9a1 	bl	800079c <__aeabi_ddiv>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	4610      	mov	r0, r2
 8009460:	4619      	mov	r1, r3
 8009462:	f04f 0200 	mov.w	r2, #0
 8009466:	4ba9      	ldr	r3, [pc, #676]	; (800970c <_ZN6BMI16011processDataEv+0x914>)
 8009468:	f7f7 f86e 	bl	8000548 <__aeabi_dmul>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4610      	mov	r0, r2
 8009472:	4619      	mov	r1, r3
 8009474:	a3a2      	add	r3, pc, #648	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	f7f7 f865 	bl	8000548 <__aeabi_dmul>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4610      	mov	r0, r2
 8009484:	4619      	mov	r1, r3
 8009486:	f7f7 fa71 	bl	800096c <__aeabi_d2f>
 800948a:	4602      	mov	r2, r0
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	61da      	str	r2, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 4.0 * 9.81;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009496:	4618      	mov	r0, r3
 8009498:	f7f6 ffec 	bl	8000474 <__aeabi_i2d>
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	4b99      	ldr	r3, [pc, #612]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 80094a2:	f7f7 f97b 	bl	800079c <__aeabi_ddiv>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4610      	mov	r0, r2
 80094ac:	4619      	mov	r1, r3
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	4b96      	ldr	r3, [pc, #600]	; (800970c <_ZN6BMI16011processDataEv+0x914>)
 80094b4:	f7f7 f848 	bl	8000548 <__aeabi_dmul>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	4610      	mov	r0, r2
 80094be:	4619      	mov	r1, r3
 80094c0:	a38f      	add	r3, pc, #572	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	f7f7 f83f 	bl	8000548 <__aeabi_dmul>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4610      	mov	r0, r2
 80094d0:	4619      	mov	r1, r3
 80094d2:	f7f7 fa4b 	bl	800096c <__aeabi_d2f>
 80094d6:	4602      	mov	r2, r0
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	621a      	str	r2, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 4.0 * 9.81;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f6 ffc6 	bl	8000474 <__aeabi_i2d>
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	4b86      	ldr	r3, [pc, #536]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 80094ee:	f7f7 f955 	bl	800079c <__aeabi_ddiv>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4610      	mov	r0, r2
 80094f8:	4619      	mov	r1, r3
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	4b83      	ldr	r3, [pc, #524]	; (800970c <_ZN6BMI16011processDataEv+0x914>)
 8009500:	f7f7 f822 	bl	8000548 <__aeabi_dmul>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4610      	mov	r0, r2
 800950a:	4619      	mov	r1, r3
 800950c:	a37c      	add	r3, pc, #496	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f7 f819 	bl	8000548 <__aeabi_dmul>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4610      	mov	r0, r2
 800951c:	4619      	mov	r1, r3
 800951e:	f7f7 fa25 	bl	800096c <__aeabi_d2f>
 8009522:	4602      	mov	r2, r0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8009528:	e0e5      	b.n	80096f6 <_ZN6BMI16011processDataEv+0x8fe>
	}
	case BMI160_ACCEL_RANGE_8G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 8.0 * 9.81;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009530:	4618      	mov	r0, r3
 8009532:	f7f6 ff9f 	bl	8000474 <__aeabi_i2d>
 8009536:	f04f 0200 	mov.w	r2, #0
 800953a:	4b73      	ldr	r3, [pc, #460]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 800953c:	f7f7 f92e 	bl	800079c <__aeabi_ddiv>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4610      	mov	r0, r2
 8009546:	4619      	mov	r1, r3
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	4b70      	ldr	r3, [pc, #448]	; (8009710 <_ZN6BMI16011processDataEv+0x918>)
 800954e:	f7f6 fffb 	bl	8000548 <__aeabi_dmul>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4610      	mov	r0, r2
 8009558:	4619      	mov	r1, r3
 800955a:	a369      	add	r3, pc, #420	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f6 fff2 	bl	8000548 <__aeabi_dmul>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4610      	mov	r0, r2
 800956a:	4619      	mov	r1, r3
 800956c:	f7f7 f9fe 	bl	800096c <__aeabi_d2f>
 8009570:	4602      	mov	r2, r0
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	61da      	str	r2, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 8.0 * 9.81;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800957c:	4618      	mov	r0, r3
 800957e:	f7f6 ff79 	bl	8000474 <__aeabi_i2d>
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	4b60      	ldr	r3, [pc, #384]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 8009588:	f7f7 f908 	bl	800079c <__aeabi_ddiv>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4610      	mov	r0, r2
 8009592:	4619      	mov	r1, r3
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	4b5d      	ldr	r3, [pc, #372]	; (8009710 <_ZN6BMI16011processDataEv+0x918>)
 800959a:	f7f6 ffd5 	bl	8000548 <__aeabi_dmul>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4610      	mov	r0, r2
 80095a4:	4619      	mov	r1, r3
 80095a6:	a356      	add	r3, pc, #344	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f6 ffcc 	bl	8000548 <__aeabi_dmul>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4610      	mov	r0, r2
 80095b6:	4619      	mov	r1, r3
 80095b8:	f7f7 f9d8 	bl	800096c <__aeabi_d2f>
 80095bc:	4602      	mov	r2, r0
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	621a      	str	r2, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 8.0 * 9.81;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7f6 ff53 	bl	8000474 <__aeabi_i2d>
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	4b4d      	ldr	r3, [pc, #308]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 80095d4:	f7f7 f8e2 	bl	800079c <__aeabi_ddiv>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4610      	mov	r0, r2
 80095de:	4619      	mov	r1, r3
 80095e0:	f04f 0200 	mov.w	r2, #0
 80095e4:	4b4a      	ldr	r3, [pc, #296]	; (8009710 <_ZN6BMI16011processDataEv+0x918>)
 80095e6:	f7f6 ffaf 	bl	8000548 <__aeabi_dmul>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4610      	mov	r0, r2
 80095f0:	4619      	mov	r1, r3
 80095f2:	a343      	add	r3, pc, #268	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f7f6 ffa6 	bl	8000548 <__aeabi_dmul>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4610      	mov	r0, r2
 8009602:	4619      	mov	r1, r3
 8009604:	f7f7 f9b2 	bl	800096c <__aeabi_d2f>
 8009608:	4602      	mov	r2, r0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 800960e:	e072      	b.n	80096f6 <_ZN6BMI16011processDataEv+0x8fe>
	}
	case BMI160_ACCEL_RANGE_16G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 16.0 * 9.81;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009616:	4618      	mov	r0, r3
 8009618:	f7f6 ff2c 	bl	8000474 <__aeabi_i2d>
 800961c:	f04f 0200 	mov.w	r2, #0
 8009620:	4b39      	ldr	r3, [pc, #228]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 8009622:	f7f7 f8bb 	bl	800079c <__aeabi_ddiv>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4610      	mov	r0, r2
 800962c:	4619      	mov	r1, r3
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	4b38      	ldr	r3, [pc, #224]	; (8009714 <_ZN6BMI16011processDataEv+0x91c>)
 8009634:	f7f6 ff88 	bl	8000548 <__aeabi_dmul>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4610      	mov	r0, r2
 800963e:	4619      	mov	r1, r3
 8009640:	a32f      	add	r3, pc, #188	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 ff7f 	bl	8000548 <__aeabi_dmul>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4610      	mov	r0, r2
 8009650:	4619      	mov	r1, r3
 8009652:	f7f7 f98b 	bl	800096c <__aeabi_d2f>
 8009656:	4602      	mov	r2, r0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	61da      	str	r2, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 16.0 * 9.81;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009662:	4618      	mov	r0, r3
 8009664:	f7f6 ff06 	bl	8000474 <__aeabi_i2d>
 8009668:	f04f 0200 	mov.w	r2, #0
 800966c:	4b26      	ldr	r3, [pc, #152]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 800966e:	f7f7 f895 	bl	800079c <__aeabi_ddiv>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4610      	mov	r0, r2
 8009678:	4619      	mov	r1, r3
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	4b25      	ldr	r3, [pc, #148]	; (8009714 <_ZN6BMI16011processDataEv+0x91c>)
 8009680:	f7f6 ff62 	bl	8000548 <__aeabi_dmul>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4610      	mov	r0, r2
 800968a:	4619      	mov	r1, r3
 800968c:	a31c      	add	r3, pc, #112	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	f7f6 ff59 	bl	8000548 <__aeabi_dmul>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4610      	mov	r0, r2
 800969c:	4619      	mov	r1, r3
 800969e:	f7f7 f965 	bl	800096c <__aeabi_d2f>
 80096a2:	4602      	mov	r2, r0
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	621a      	str	r2, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 16.0 * 9.81;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f6 fee0 	bl	8000474 <__aeabi_i2d>
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	4b13      	ldr	r3, [pc, #76]	; (8009708 <_ZN6BMI16011processDataEv+0x910>)
 80096ba:	f7f7 f86f 	bl	800079c <__aeabi_ddiv>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4610      	mov	r0, r2
 80096c4:	4619      	mov	r1, r3
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	4b12      	ldr	r3, [pc, #72]	; (8009714 <_ZN6BMI16011processDataEv+0x91c>)
 80096cc:	f7f6 ff3c 	bl	8000548 <__aeabi_dmul>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4610      	mov	r0, r2
 80096d6:	4619      	mov	r1, r3
 80096d8:	a309      	add	r3, pc, #36	; (adr r3, 8009700 <_ZN6BMI16011processDataEv+0x908>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f7f6 ff33 	bl	8000548 <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4610      	mov	r0, r2
 80096e8:	4619      	mov	r1, r3
 80096ea:	f7f7 f93f 	bl	800096c <__aeabi_d2f>
 80096ee:	4602      	mov	r2, r0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80096f4:	bf00      	nop
	}
	}

	return 1;
 80096f6:	2301      	movs	r3, #1
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	51eb851f 	.word	0x51eb851f
 8009704:	40239eb8 	.word	0x40239eb8
 8009708:	40e00000 	.word	0x40e00000
 800970c:	40100000 	.word	0x40100000
 8009710:	40200000 	.word	0x40200000
 8009714:	40300000 	.word	0x40300000

08009718 <_ZN6BMI1607readGyrEv>:
	this->gyr_calib.y = gyr_y;
	this->gyr_calib.z = gyr_z;
}

/* ============================================================================= */
uint8_t BMI160::readGyr() {
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
	uint8_t gyr_data[6] = { 0 };
 8009720:	2300      	movs	r3, #0
 8009722:	60bb      	str	r3, [r7, #8]
 8009724:	2300      	movs	r3, #0
 8009726:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_GYR_X_LOW, gyr_data, 6);
 8009728:	f107 0208 	add.w	r2, r7, #8
 800972c:	2306      	movs	r3, #6
 800972e:	210c      	movs	r1, #12
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff faeb 	bl	8008d0c <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->gyr_raw.x = bytearray_to_int16(&gyr_data[0]);
 8009736:	f107 0308 	add.w	r3, r7, #8
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f916 	bl	800996c <_Z18bytearray_to_int16Ph>
 8009740:	4603      	mov	r3, r0
 8009742:	461a      	mov	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	801a      	strh	r2, [r3, #0]
	this->gyr_raw.y = bytearray_to_int16(&gyr_data[2]);
 8009748:	f107 0308 	add.w	r3, r7, #8
 800974c:	3302      	adds	r3, #2
 800974e:	4618      	mov	r0, r3
 8009750:	f000 f90c 	bl	800996c <_Z18bytearray_to_int16Ph>
 8009754:	4603      	mov	r3, r0
 8009756:	461a      	mov	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	805a      	strh	r2, [r3, #2]
	this->gyr_raw.z = bytearray_to_int16(&gyr_data[4]);
 800975c:	f107 0308 	add.w	r3, r7, #8
 8009760:	3304      	adds	r3, #4
 8009762:	4618      	mov	r0, r3
 8009764:	f000 f902 	bl	800996c <_Z18bytearray_to_int16Ph>
 8009768:	4603      	mov	r3, r0
 800976a:	461a      	mov	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	809a      	strh	r2, [r3, #4]

	return 1;
 8009770:	2301      	movs	r3, #1
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <_ZN6BMI1607readAccEv>:

/* ============================================================================= */
uint8_t BMI160::readAcc() {
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6] = { 0 };
 8009782:	2300      	movs	r3, #0
 8009784:	60bb      	str	r3, [r7, #8]
 8009786:	2300      	movs	r3, #0
 8009788:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_ACC_X_LOW, acc_data, 6);
 800978a:	f107 0208 	add.w	r2, r7, #8
 800978e:	2306      	movs	r3, #6
 8009790:	2112      	movs	r1, #18
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff faba 	bl	8008d0c <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->acc_raw.x = bytearray_to_int16(&acc_data[0]);
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f8e5 	bl	800996c <_Z18bytearray_to_int16Ph>
 80097a2:	4603      	mov	r3, r0
 80097a4:	461a      	mov	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	829a      	strh	r2, [r3, #20]
	this->acc_raw.y = bytearray_to_int16(&acc_data[2]);
 80097aa:	f107 0308 	add.w	r3, r7, #8
 80097ae:	3302      	adds	r3, #2
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 f8db 	bl	800996c <_Z18bytearray_to_int16Ph>
 80097b6:	4603      	mov	r3, r0
 80097b8:	461a      	mov	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	82da      	strh	r2, [r3, #22]
	this->acc_raw.z = bytearray_to_int16(&acc_data[4]);
 80097be:	f107 0308 	add.w	r3, r7, #8
 80097c2:	3304      	adds	r3, #4
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 f8d1 	bl	800996c <_Z18bytearray_to_int16Ph>
 80097ca:	4603      	mov	r3, r0
 80097cc:	461a      	mov	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	831a      	strh	r2, [r3, #24]

	return 1;
 80097d2:	2301      	movs	r3, #1
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZN6BMI16013setGyroConfigEhh>:
	this->sensortime = bytearray_to_uint32(sensortime_data);
	return CORE_OK;
}

/* ============================================================================= */
uint8_t BMI160::setGyroConfig(uint8_t config, uint8_t range) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
 80097e8:	4613      	mov	r3, r2
 80097ea:	70bb      	strb	r3, [r7, #2]

	this->writeRegister(BMI160_REG_GYRO_RANGE, range);
 80097ec:	78bb      	ldrb	r3, [r7, #2]
 80097ee:	461a      	mov	r2, r3
 80097f0:	2143      	movs	r1, #67	; 0x43
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff f975 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_GYRO_CONFIG, config);
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	461a      	mov	r2, r3
 80097fc:	2142      	movs	r1, #66	; 0x42
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff f96f 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 8009804:	2301      	movs	r3, #1
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <_ZN6BMI16012setAccConfigEhh>:

/* ============================================================================= */
uint8_t BMI160::setAccConfig(uint8_t config, uint8_t range) {
 800980e:	b580      	push	{r7, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	70fb      	strb	r3, [r7, #3]
 800981a:	4613      	mov	r3, r2
 800981c:	70bb      	strb	r3, [r7, #2]
	this->writeRegister(BMI160_REG_ACCEL_CONFIG, config);
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	461a      	mov	r2, r3
 8009822:	2140      	movs	r1, #64	; 0x40
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff f95c 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_ACCEL_RANGE, range);
 800982a:	78bb      	ldrb	r3, [r7, #2]
 800982c:	461a      	mov	r2, r3
 800982e:	2141      	movs	r1, #65	; 0x41
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff f956 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 8009836:	2301      	movs	r3, #1
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>:

/* ============================================================================= */
uint8_t BMI160::setPowerMode(BMI160_PowerMode mode) {
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	70fb      	strb	r3, [r7, #3]
	if (mode == BMI160_Power_Normal) {
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d113      	bne.n	800987a <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x3a>
		delay(100);
 8009852:	2064      	movs	r0, #100	; 0x64
 8009854:	f7fe fe72 	bl	800853c <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_NORMAL_MODE);
 8009858:	2215      	movs	r2, #21
 800985a:	217e      	movs	r1, #126	; 0x7e
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff f940 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 8009862:	20fa      	movs	r0, #250	; 0xfa
 8009864:	f7fe fe6a 	bl	800853c <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_NORMAL_MODE);
 8009868:	2211      	movs	r2, #17
 800986a:	217e      	movs	r1, #126	; 0x7e
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff f938 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 8009872:	20fa      	movs	r0, #250	; 0xfa
 8009874:	f7fe fe62 	bl	800853c <_Z5delaym>
 8009878:	e012      	b.n	80098a0 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
	} else if (mode == BMI160_Power_Suspend) {
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d10f      	bne.n	80098a0 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_SUSPEND_MODE);
 8009880:	2210      	movs	r2, #16
 8009882:	217e      	movs	r1, #126	; 0x7e
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff f92c 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 800988a:	2064      	movs	r0, #100	; 0x64
 800988c:	f7fe fe56 	bl	800853c <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_SUSPEND_MODE);
 8009890:	2214      	movs	r2, #20
 8009892:	217e      	movs	r1, #126	; 0x7e
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff f924 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 800989a:	2064      	movs	r0, #100	; 0x64
 800989c:	f7fe fe4e 	bl	800853c <_Z5delaym>
	}
	return CORE_OK;
 80098a0:	2301      	movs	r3, #1
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <_ZN6BMI1605resetEv>:
	this->writeRegister(0x77, offset_register);

}

/* ============================================================================= */
void BMI160::reset() {
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
	this->writeRegister(BMI160_REG_COMMAND, 0xB6);
 80098b2:	22b6      	movs	r2, #182	; 0xb6
 80098b4:	217e      	movs	r1, #126	; 0x7e
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff f913 	bl	8008ae2 <_ZN6BMI16013writeRegisterEhh>
	delay(10);
 80098bc:	200a      	movs	r0, #10
 80098be:	f7fe fe3d 	bl	800853c <_Z5delaym>
}
 80098c2:	bf00      	nop
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <_Z10cobsEncodePhhS_>:
	@param buffer Pointer to encoded output buffer
	@return Encoded buffer length in bytes
	@note Does not output delimiter byte
*/
uint8_t cobsEncode(uint8_t *data_in, uint8_t length, uint8_t *data_out)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b089      	sub	sp, #36	; 0x24
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	460b      	mov	r3, r1
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	72fb      	strb	r3, [r7, #11]

	uint8_t *encode = data_out; // Encoded byte pointer
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	61fb      	str	r3, [r7, #28]
	uint8_t *codep = encode++; // Output code pointer
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	61fa      	str	r2, [r7, #28]
 80098e2:	61bb      	str	r3, [r7, #24]
	uint8_t code = 1; // Code value
 80098e4:	2301      	movs	r3, #1
 80098e6:	75fb      	strb	r3, [r7, #23]

	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	613b      	str	r3, [r7, #16]
 80098ec:	e027      	b.n	800993e <_Z10cobsEncodePhhS_+0x74>
	{
		if (*byte) // Byte not zero, write it
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d008      	beq.n	8009908 <_Z10cobsEncodePhhS_+0x3e>
			*encode++ = *byte, ++code;
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	61fa      	str	r2, [r7, #28]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	7812      	ldrb	r2, [r2, #0]
 8009900:	701a      	strb	r2, [r3, #0]
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	3301      	adds	r3, #1
 8009906:	75fb      	strb	r3, [r7, #23]

		if (!*byte || code == 0xff) // Input is zero or block completed, restart
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <_Z10cobsEncodePhhS_+0x4c>
 8009910:	7dfb      	ldrb	r3, [r7, #23]
 8009912:	2bff      	cmp	r3, #255	; 0xff
 8009914:	d110      	bne.n	8009938 <_Z10cobsEncodePhhS_+0x6e>
		{
			*codep = code, code = 1, codep = encode;
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	7dfa      	ldrb	r2, [r7, #23]
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	2301      	movs	r3, #1
 800991e:	75fb      	strb	r3, [r7, #23]
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	61bb      	str	r3, [r7, #24]
			if (!*byte || length)
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <_Z10cobsEncodePhhS_+0x68>
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <_Z10cobsEncodePhhS_+0x6e>
				++encode;
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	3301      	adds	r3, #1
 8009936:	61fb      	str	r3, [r7, #28]
	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	3301      	adds	r3, #1
 800993c:	613b      	str	r3, [r7, #16]
 800993e:	7afb      	ldrb	r3, [r7, #11]
 8009940:	1e5a      	subs	r2, r3, #1
 8009942:	72fa      	strb	r2, [r7, #11]
 8009944:	2b00      	cmp	r3, #0
 8009946:	bf14      	ite	ne
 8009948:	2301      	movne	r3, #1
 800994a:	2300      	moveq	r3, #0
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1cd      	bne.n	80098ee <_Z10cobsEncodePhhS_+0x24>
		}
	}
	*codep = code; // Write final code value
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	7dfa      	ldrb	r2, [r7, #23]
 8009956:	701a      	strb	r2, [r3, #0]

	return (uint8_t)(encode - data_out);
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	b2db      	uxtb	r3, r3
}
 8009960:	4618      	mov	r0, r3
 8009962:	3724      	adds	r7, #36	; 0x24
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <_Z18bytearray_to_int16Ph>:
uint16_t bytearray_to_uint16(uint8_t *bytearray) {
	uint16_t out = bytearray[1] << 8 | bytearray[0];
	return out;
}

int16_t bytearray_to_int16(uint8_t *bytearray) {
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	int16_t out = bytearray[1] << 8 | bytearray[0];
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3301      	adds	r3, #1
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	b21a      	sxth	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	b21b      	sxth	r3, r3
 8009984:	4313      	orrs	r3, r2
 8009986:	81fb      	strh	r3, [r7, #14]
	return out;
 8009988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <_Z19uint32_to_bytearraymPh>:
	temp = ((bytearray[3] << 24) | (bytearray[2] << 16) | (bytearray[1] << 8)
			| bytearray[0]);
	return temp;
}

void uint32_to_bytearray(uint32_t value, uint8_t* bytearray) {
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
    bytearray[0] = value & 0x00FF;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	701a      	strb	r2, [r3, #0]
    bytearray[1] = (value >> 8) & 0x00FF;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	0a1a      	lsrs	r2, r3, #8
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	701a      	strb	r2, [r3, #0]
    bytearray[2] = (value >> 16) & 0x00FF;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	0c1a      	lsrs	r2, r3, #16
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	3302      	adds	r3, #2
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]
    bytearray[3] = value >> 24;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	0e1a      	lsrs	r2, r3, #24
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	3303      	adds	r3, #3
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	701a      	strb	r2, [r3, #0]
}
 80099ce:	bf00      	nop
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <_Z18float_to_bytearrayfPh>:


void float_to_bytearray(float value, uint8_t* bytearray) {
 80099da:	b480      	push	{r7}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80099e4:	6038      	str	r0, [r7, #0]
    uint32_t l = *(uint32_t*) &value;
 80099e6:	1d3b      	adds	r3, r7, #4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]

    bytearray[0] = l & 0x00FF;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	701a      	strb	r2, [r3, #0]
    bytearray[1] = (l >> 8) & 0x00FF;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	0a1a      	lsrs	r2, r3, #8
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	3301      	adds	r3, #1
 80099fc:	b2d2      	uxtb	r2, r2
 80099fe:	701a      	strb	r2, [r3, #0]
    bytearray[2] = (l >> 16) & 0x00FF;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	0c1a      	lsrs	r2, r3, #16
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	3302      	adds	r3, #2
 8009a08:	b2d2      	uxtb	r2, r2
 8009a0a:	701a      	strb	r2, [r3, #0]
    bytearray[3] = l >> 24;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	0e1a      	lsrs	r2, r3, #24
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	3303      	adds	r3, #3
 8009a14:	b2d2      	uxtb	r2, r2
 8009a16:	701a      	strb	r2, [r3, #0]
}
 8009a18:	bf00      	nop
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <_Z17core_ErrorHandleri>:
 */


#include "core_errors.h"

void core_ErrorHandler(int error_id) {
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	while(1);
 8009a2c:	e7fe      	b.n	8009a2c <_Z17core_ErrorHandleri+0x8>
	...

08009a30 <_Z41__static_initialization_and_destruction_0ii>:
	case GPIO_PIN_15: {
		callbacks[15].call();
		break;
	}
	}
}
 8009a30:	b5b0      	push	{r4, r5, r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d10f      	bne.n	8009a60 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d10a      	bne.n	8009a60 <_Z41__static_initialization_and_destruction_0ii+0x30>
static core_utils_Callback<void, void> callbacks[16];
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8009a4c:	240f      	movs	r4, #15
 8009a4e:	461d      	mov	r5, r3
 8009a50:	e004      	b.n	8009a5c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8009a52:	4628      	mov	r0, r5
 8009a54:	f7fe ff44 	bl	80088e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 8009a58:	3520      	adds	r5, #32
 8009a5a:	3c01      	subs	r4, #1
 8009a5c:	2c00      	cmp	r4, #0
 8009a5e:	daf8      	bge.n	8009a52 <_Z41__static_initialization_and_destruction_0ii+0x22>
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bdb0      	pop	{r4, r5, r7, pc}
 8009a68:	20001cfc 	.word	0x20001cfc

08009a6c <_GLOBAL__sub_I__ZN15core_utils_GPIOC2EP12GPIO_TypeDeft>:
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009a74:	2001      	movs	r0, #1
 8009a76:	f7ff ffdb 	bl	8009a30 <_Z41__static_initialization_and_destruction_0ii>
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <_Z6millisv>:

#include "../core_includes.h"

#include "elapsedMillis.h"

uint32_t millis() {
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
#if CORE_CONFIG_USE_RTOS
	return osKernelGetTickCount();
 8009a80:	f7fb ff58 	bl	8005934 <osKernelGetTickCount>
 8009a84:	4603      	mov	r3, r0
#else
	return HAL_GetTick();
#endif
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <memset>:
 8009a8a:	4402      	add	r2, r0
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d100      	bne.n	8009a94 <memset+0xa>
 8009a92:	4770      	bx	lr
 8009a94:	f803 1b01 	strb.w	r1, [r3], #1
 8009a98:	e7f9      	b.n	8009a8e <memset+0x4>
	...

08009a9c <_reclaim_reent>:
 8009a9c:	4b29      	ldr	r3, [pc, #164]	; (8009b44 <_reclaim_reent+0xa8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4283      	cmp	r3, r0
 8009aa2:	b570      	push	{r4, r5, r6, lr}
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	d04b      	beq.n	8009b40 <_reclaim_reent+0xa4>
 8009aa8:	69c3      	ldr	r3, [r0, #28]
 8009aaa:	b143      	cbz	r3, 8009abe <_reclaim_reent+0x22>
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d144      	bne.n	8009b3c <_reclaim_reent+0xa0>
 8009ab2:	69e3      	ldr	r3, [r4, #28]
 8009ab4:	6819      	ldr	r1, [r3, #0]
 8009ab6:	b111      	cbz	r1, 8009abe <_reclaim_reent+0x22>
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f000 f879 	bl	8009bb0 <_free_r>
 8009abe:	6961      	ldr	r1, [r4, #20]
 8009ac0:	b111      	cbz	r1, 8009ac8 <_reclaim_reent+0x2c>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f874 	bl	8009bb0 <_free_r>
 8009ac8:	69e1      	ldr	r1, [r4, #28]
 8009aca:	b111      	cbz	r1, 8009ad2 <_reclaim_reent+0x36>
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 f86f 	bl	8009bb0 <_free_r>
 8009ad2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009ad4:	b111      	cbz	r1, 8009adc <_reclaim_reent+0x40>
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f86a 	bl	8009bb0 <_free_r>
 8009adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ade:	b111      	cbz	r1, 8009ae6 <_reclaim_reent+0x4a>
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 f865 	bl	8009bb0 <_free_r>
 8009ae6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ae8:	b111      	cbz	r1, 8009af0 <_reclaim_reent+0x54>
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f860 	bl	8009bb0 <_free_r>
 8009af0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009af2:	b111      	cbz	r1, 8009afa <_reclaim_reent+0x5e>
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 f85b 	bl	8009bb0 <_free_r>
 8009afa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009afc:	b111      	cbz	r1, 8009b04 <_reclaim_reent+0x68>
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 f856 	bl	8009bb0 <_free_r>
 8009b04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009b06:	b111      	cbz	r1, 8009b0e <_reclaim_reent+0x72>
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 f851 	bl	8009bb0 <_free_r>
 8009b0e:	6a23      	ldr	r3, [r4, #32]
 8009b10:	b1b3      	cbz	r3, 8009b40 <_reclaim_reent+0xa4>
 8009b12:	4620      	mov	r0, r4
 8009b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b18:	4718      	bx	r3
 8009b1a:	5949      	ldr	r1, [r1, r5]
 8009b1c:	b941      	cbnz	r1, 8009b30 <_reclaim_reent+0x94>
 8009b1e:	3504      	adds	r5, #4
 8009b20:	69e3      	ldr	r3, [r4, #28]
 8009b22:	2d80      	cmp	r5, #128	; 0x80
 8009b24:	68d9      	ldr	r1, [r3, #12]
 8009b26:	d1f8      	bne.n	8009b1a <_reclaim_reent+0x7e>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 f841 	bl	8009bb0 <_free_r>
 8009b2e:	e7c0      	b.n	8009ab2 <_reclaim_reent+0x16>
 8009b30:	680e      	ldr	r6, [r1, #0]
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f83c 	bl	8009bb0 <_free_r>
 8009b38:	4631      	mov	r1, r6
 8009b3a:	e7ef      	b.n	8009b1c <_reclaim_reent+0x80>
 8009b3c:	2500      	movs	r5, #0
 8009b3e:	e7ef      	b.n	8009b20 <_reclaim_reent+0x84>
 8009b40:	bd70      	pop	{r4, r5, r6, pc}
 8009b42:	bf00      	nop
 8009b44:	2000007c 	.word	0x2000007c

08009b48 <__libc_init_array>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	4d0d      	ldr	r5, [pc, #52]	; (8009b80 <__libc_init_array+0x38>)
 8009b4c:	4c0d      	ldr	r4, [pc, #52]	; (8009b84 <__libc_init_array+0x3c>)
 8009b4e:	1b64      	subs	r4, r4, r5
 8009b50:	10a4      	asrs	r4, r4, #2
 8009b52:	2600      	movs	r6, #0
 8009b54:	42a6      	cmp	r6, r4
 8009b56:	d109      	bne.n	8009b6c <__libc_init_array+0x24>
 8009b58:	4d0b      	ldr	r5, [pc, #44]	; (8009b88 <__libc_init_array+0x40>)
 8009b5a:	4c0c      	ldr	r4, [pc, #48]	; (8009b8c <__libc_init_array+0x44>)
 8009b5c:	f000 f880 	bl	8009c60 <_init>
 8009b60:	1b64      	subs	r4, r4, r5
 8009b62:	10a4      	asrs	r4, r4, #2
 8009b64:	2600      	movs	r6, #0
 8009b66:	42a6      	cmp	r6, r4
 8009b68:	d105      	bne.n	8009b76 <__libc_init_array+0x2e>
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b70:	4798      	blx	r3
 8009b72:	3601      	adds	r6, #1
 8009b74:	e7ee      	b.n	8009b54 <__libc_init_array+0xc>
 8009b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7a:	4798      	blx	r3
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	e7f2      	b.n	8009b66 <__libc_init_array+0x1e>
 8009b80:	08009d90 	.word	0x08009d90
 8009b84:	08009d90 	.word	0x08009d90
 8009b88:	08009d90 	.word	0x08009d90
 8009b8c:	08009da0 	.word	0x08009da0

08009b90 <__retarget_lock_acquire_recursive>:
 8009b90:	4770      	bx	lr

08009b92 <__retarget_lock_release_recursive>:
 8009b92:	4770      	bx	lr

08009b94 <memcpy>:
 8009b94:	440a      	add	r2, r1
 8009b96:	4291      	cmp	r1, r2
 8009b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b9c:	d100      	bne.n	8009ba0 <memcpy+0xc>
 8009b9e:	4770      	bx	lr
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009baa:	4291      	cmp	r1, r2
 8009bac:	d1f9      	bne.n	8009ba2 <memcpy+0xe>
 8009bae:	bd10      	pop	{r4, pc}

08009bb0 <_free_r>:
 8009bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bb2:	2900      	cmp	r1, #0
 8009bb4:	d044      	beq.n	8009c40 <_free_r+0x90>
 8009bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bba:	9001      	str	r0, [sp, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8009bc2:	bfb8      	it	lt
 8009bc4:	18e4      	addlt	r4, r4, r3
 8009bc6:	f000 f83f 	bl	8009c48 <__malloc_lock>
 8009bca:	4a1e      	ldr	r2, [pc, #120]	; (8009c44 <_free_r+0x94>)
 8009bcc:	9801      	ldr	r0, [sp, #4]
 8009bce:	6813      	ldr	r3, [r2, #0]
 8009bd0:	b933      	cbnz	r3, 8009be0 <_free_r+0x30>
 8009bd2:	6063      	str	r3, [r4, #4]
 8009bd4:	6014      	str	r4, [r2, #0]
 8009bd6:	b003      	add	sp, #12
 8009bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bdc:	f000 b83a 	b.w	8009c54 <__malloc_unlock>
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	d908      	bls.n	8009bf6 <_free_r+0x46>
 8009be4:	6825      	ldr	r5, [r4, #0]
 8009be6:	1961      	adds	r1, r4, r5
 8009be8:	428b      	cmp	r3, r1
 8009bea:	bf01      	itttt	eq
 8009bec:	6819      	ldreq	r1, [r3, #0]
 8009bee:	685b      	ldreq	r3, [r3, #4]
 8009bf0:	1949      	addeq	r1, r1, r5
 8009bf2:	6021      	streq	r1, [r4, #0]
 8009bf4:	e7ed      	b.n	8009bd2 <_free_r+0x22>
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	b10b      	cbz	r3, 8009c00 <_free_r+0x50>
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	d9fa      	bls.n	8009bf6 <_free_r+0x46>
 8009c00:	6811      	ldr	r1, [r2, #0]
 8009c02:	1855      	adds	r5, r2, r1
 8009c04:	42a5      	cmp	r5, r4
 8009c06:	d10b      	bne.n	8009c20 <_free_r+0x70>
 8009c08:	6824      	ldr	r4, [r4, #0]
 8009c0a:	4421      	add	r1, r4
 8009c0c:	1854      	adds	r4, r2, r1
 8009c0e:	42a3      	cmp	r3, r4
 8009c10:	6011      	str	r1, [r2, #0]
 8009c12:	d1e0      	bne.n	8009bd6 <_free_r+0x26>
 8009c14:	681c      	ldr	r4, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	6053      	str	r3, [r2, #4]
 8009c1a:	440c      	add	r4, r1
 8009c1c:	6014      	str	r4, [r2, #0]
 8009c1e:	e7da      	b.n	8009bd6 <_free_r+0x26>
 8009c20:	d902      	bls.n	8009c28 <_free_r+0x78>
 8009c22:	230c      	movs	r3, #12
 8009c24:	6003      	str	r3, [r0, #0]
 8009c26:	e7d6      	b.n	8009bd6 <_free_r+0x26>
 8009c28:	6825      	ldr	r5, [r4, #0]
 8009c2a:	1961      	adds	r1, r4, r5
 8009c2c:	428b      	cmp	r3, r1
 8009c2e:	bf04      	itt	eq
 8009c30:	6819      	ldreq	r1, [r3, #0]
 8009c32:	685b      	ldreq	r3, [r3, #4]
 8009c34:	6063      	str	r3, [r4, #4]
 8009c36:	bf04      	itt	eq
 8009c38:	1949      	addeq	r1, r1, r5
 8009c3a:	6021      	streq	r1, [r4, #0]
 8009c3c:	6054      	str	r4, [r2, #4]
 8009c3e:	e7ca      	b.n	8009bd6 <_free_r+0x26>
 8009c40:	b003      	add	sp, #12
 8009c42:	bd30      	pop	{r4, r5, pc}
 8009c44:	20002038 	.word	0x20002038

08009c48 <__malloc_lock>:
 8009c48:	4801      	ldr	r0, [pc, #4]	; (8009c50 <__malloc_lock+0x8>)
 8009c4a:	f7ff bfa1 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 8009c4e:	bf00      	nop
 8009c50:	20002034 	.word	0x20002034

08009c54 <__malloc_unlock>:
 8009c54:	4801      	ldr	r0, [pc, #4]	; (8009c5c <__malloc_unlock+0x8>)
 8009c56:	f7ff bf9c 	b.w	8009b92 <__retarget_lock_release_recursive>
 8009c5a:	bf00      	nop
 8009c5c:	20002034 	.word	0x20002034

08009c60 <_init>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr

08009c6c <_fini>:
 8009c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6e:	bf00      	nop
 8009c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c72:	bc08      	pop	{r3}
 8009c74:	469e      	mov	lr, r3
 8009c76:	4770      	bx	lr
