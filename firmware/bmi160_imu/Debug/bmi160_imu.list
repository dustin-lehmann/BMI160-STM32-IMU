
bmi160_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba0  08008ba0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba8  08008ba8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee4  20000080  08008c3c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f64  08008c3c  00021f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000260b9  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005230  00000000  00000000  000461ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c68  00000000  00000000  0004b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015ee  00000000  00000000  0004d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008813  00000000  00000000  0004e636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023d5a  00000000  00000000  00056e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd562  00000000  00000000  0007aba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b50  00000000  00000000  00158108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0015fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a78 	.word	0x08008a78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008a78 	.word	0x08008a78

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 faeb 	bl	80012e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f81c 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f8da 	bl	8000ecc <MX_GPIO_Init>
  MX_SPI3_Init();
 8000d18:	f000 f86a 	bl	8000df0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000d1c:	f000 f8a6 	bl	8000e6c <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d20:	f003 fefe 	bl	8004b20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <main+0x38>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <main+0x3c>)
 8000d2a:	f003 ff7a 	bl	8004c22 <osThreadNew>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <main+0x40>)
 8000d32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  firmware();
 8000d34:	f006 fcc8 	bl	80076c8 <firmware>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d38:	f003 ff38 	bl	8004bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <main+0x34>
 8000d3e:	bf00      	nop
 8000d40:	08008acc 	.word	0x08008acc
 8000d44:	08000f75 	.word	0x08000f75
 8000d48:	200001e0 	.word	0x200001e0

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b096      	sub	sp, #88	; 0x58
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2244      	movs	r2, #68	; 0x44
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f007 fda1 	bl	80088a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	463b      	mov	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d72:	f000 fd87 	bl	8001884 <HAL_PWREx_ControlVoltageScaling>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d7c:	f000 f914 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d80:	2310      	movs	r3, #16
 8000d82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d8c:	2360      	movs	r3, #96	; 0x60
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d90:	2302      	movs	r3, #2
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d94:	2301      	movs	r3, #1
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d9c:	2328      	movs	r3, #40	; 0x28
 8000d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000da0:	2307      	movs	r3, #7
 8000da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fdbd 	bl	8001930 <HAL_RCC_OscConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000dbc:	f000 f8f4 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 f9bd 	bl	8002158 <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000de4:	f000 f8e0 	bl	8000fa8 <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3758      	adds	r7, #88	; 0x58
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <MX_SPI3_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e26:	2210      	movs	r2, #16
 8000e28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e3e:	2207      	movs	r2, #7
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e50:	f001 fec0 	bl	8002bd4 <HAL_SPI_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 f8a5 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000009c 	.word	0x2000009c
 8000e68:	40003c00 	.word	0x40003c00

08000e6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <MX_USART1_UART_Init+0x5c>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000eb0:	f003 f8a6 	bl	8004000 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eba:	f000 f875 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000128 	.word	0x20000128
 8000ec8:	40013800 	.word	0x40013800

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_GPIO_Init+0xa0>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_GPIO_Init+0xa0>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_GPIO_Init+0xa0>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_GPIO_Init+0xa0>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <MX_GPIO_Init+0xa0>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_GPIO_Init+0xa0>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2108      	movs	r1, #8
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f000 fc8d 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2140      	movs	r1, #64	; 0x40
 8000f22:	4813      	ldr	r0, [pc, #76]	; (8000f70 <MX_GPIO_Init+0xa4>)
 8000f24:	f000 fc88 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f000 fb0f 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_GPIO_Init+0xa4>)
 8000f5e:	f000 fb01 	bl	8001564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400

08000f74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f003 fee2 	bl	8004d46 <osDelay>
 8000f82:	e7fb      	b.n	8000f7c <StartDefaultTask+0x8>

08000f84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f96:	f000 f9bf 	bl	8001318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40001000 	.word	0x40001000

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler+0x8>
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_MspInit+0x4c>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_MspInit+0x4c>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_MspInit+0x4c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_MspInit+0x4c>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	210f      	movs	r1, #15
 8000fee:	f06f 0001 	mvn.w	r0, #1
 8000ff2:	f000 fa8d 	bl	8001510 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_SPI_MspInit+0x7c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d127      	bne.n	8001076 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_SPI_MspInit+0x80>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <HAL_SPI_MspInit+0x80>)
 800102c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_SPI_MspInit+0x80>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_SPI_MspInit+0x80>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <HAL_SPI_MspInit+0x80>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_SPI_MspInit+0x80>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001056:	2338      	movs	r3, #56	; 0x38
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001066:	2306      	movs	r3, #6
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <HAL_SPI_MspInit+0x84>)
 8001072:	f000 fa77 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40003c00 	.word	0x40003c00
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09e      	sub	sp, #120	; 0x78
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2254      	movs	r2, #84	; 0x54
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f007 fbf8 	bl	80088a2 <memset>
  if(huart->Instance==USART1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_UART_MspInit+0xa8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d137      	bne.n	800112c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010bc:	2301      	movs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fa9b 	bl	8002604 <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d4:	f7ff ff68 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_UART_MspInit+0xac>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010dc:	4a16      	ldr	r2, [pc, #88]	; (8001138 <HAL_UART_MspInit+0xac>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	6613      	str	r3, [r2, #96]	; 0x60
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_UART_MspInit+0xac>)
 80010e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UART_MspInit+0xac>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_UART_MspInit+0xac>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_UART_MspInit+0xac>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001108:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800110c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800111a:	2307      	movs	r3, #7
 800111c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f000 fa1c 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3778      	adds	r7, #120	; 0x78
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013800 	.word	0x40013800
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_InitTick+0xe0>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a33      	ldr	r2, [pc, #204]	; (800121c <HAL_InitTick+0xe0>)
 8001150:	f043 0310 	orr.w	r3, r3, #16
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_InitTick+0xe0>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001162:	f107 0210 	add.w	r2, r7, #16
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f001 f9b7 	bl	80024e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800117c:	f001 f984 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8001180:	6378      	str	r0, [r7, #52]	; 0x34
 8001182:	e004      	b.n	800118e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001184:	f001 f980 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8001188:	4603      	mov	r3, r0
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001190:	4a23      	ldr	r2, [pc, #140]	; (8001220 <HAL_InitTick+0xe4>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	3b01      	subs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_InitTick+0xe8>)
 800119e:	4a22      	ldr	r2, [pc, #136]	; (8001228 <HAL_InitTick+0xec>)
 80011a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_InitTick+0xe8>)
 80011a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_InitTick+0xe8>)
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_InitTick+0xe8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_InitTick+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_InitTick+0xe8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <HAL_InitTick+0xe8>)
 80011c4:	f002 fcba 	bl	8003b3c <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11b      	bne.n	800120e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011d6:	4813      	ldr	r0, [pc, #76]	; (8001224 <HAL_InitTick+0xe8>)
 80011d8:	f002 fd12 	bl	8003c00 <HAL_TIM_Base_Start_IT>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d111      	bne.n	800120e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ea:	2036      	movs	r0, #54	; 0x36
 80011ec:	f000 f9ac 	bl	8001548 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d808      	bhi.n	8001208 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011f6:	2200      	movs	r2, #0
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	2036      	movs	r0, #54	; 0x36
 80011fc:	f000 f988 	bl	8001510 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_InitTick+0xf0>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e002      	b.n	800120e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800120e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001212:	4618      	mov	r0, r3
 8001214:	3738      	adds	r7, #56	; 0x38
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	431bde83 	.word	0x431bde83
 8001224:	200001e4 	.word	0x200001e4
 8001228:	40001000 	.word	0x40001000
 800122c:	20000004 	.word	0x20000004

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <TIM6_DAC_IRQHandler+0x10>)
 8001262:	f002 fd21 	bl	8003ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001e4 	.word	0x200001e4

08001270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001298:	f7ff ffea 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopForever+0xe>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopForever+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f007 fb4d 	bl	8008960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c6:	f7ff fd1f 	bl	8000d08 <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012d8:	08008bbc 	.word	0x08008bbc
  ldr r2, =_sbss
 80012dc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012e0:	20001f64 	.word	0x20001f64

080012e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_IRQHandler>

080012e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f902 	bl	80014fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f6:	200f      	movs	r0, #15
 80012f8:	f7ff ff20 	bl	800113c <HAL_InitTick>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e001      	b.n	800130c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001308:	f7ff fe54 	bl	8000fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800130c:	79fb      	ldrb	r3, [r7, #7]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	20000230 	.word	0x20000230

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000230 	.word	0x20000230

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff ffee 	bl	8001340 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_Delay+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137e:	bf00      	nop
 8001380:	f7ff ffde 	bl	8001340 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <__NVIC_EnableIRQ+0x38>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff4c 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001522:	f7ff ff61 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 8001526:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7ff ffb1 	bl	8001494 <NVIC_EncodePriority>
 8001532:	4602      	mov	r2, r0
 8001534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff80 	bl	8001440 <__NVIC_SetPriority>
}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff54 	bl	8001404 <__NVIC_EnableIRQ>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e148      	b.n	8001806 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	4013      	ands	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 813a 	beq.w	8001800 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d005      	beq.n	80015a4 <HAL_GPIO_Init+0x40>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d130      	bne.n	8001606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015da:	2201      	movs	r2, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	f003 0201 	and.w	r2, r3, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b03      	cmp	r3, #3
 8001610:	d017      	beq.n	8001642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d123      	bne.n	8001696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	6939      	ldr	r1, [r7, #16]
 8001692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0203 	and.w	r2, r3, #3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8094 	beq.w	8001800 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d8:	4b52      	ldr	r3, [pc, #328]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80016da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016dc:	4a51      	ldr	r2, [pc, #324]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6613      	str	r3, [r2, #96]	; 0x60
 80016e4:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 80016e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016f0:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_GPIO_Init+0x2c4>)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1d4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a43      	ldr	r2, [pc, #268]	; (800182c <HAL_GPIO_Init+0x2c8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1d0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a42      	ldr	r2, [pc, #264]	; (8001830 <HAL_GPIO_Init+0x2cc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1cc>
 800172c:	2302      	movs	r3, #2
 800172e:	e004      	b.n	800173a <HAL_GPIO_Init+0x1d6>
 8001730:	2307      	movs	r3, #7
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x1d6>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_Init+0x1d6>
 8001738:	2300      	movs	r3, #0
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800174a:	4937      	ldr	r1, [pc, #220]	; (8001828 <HAL_GPIO_Init+0x2c4>)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800177c:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	f47f aeaf 	bne.w	8001574 <HAL_GPIO_Init+0x10>
  }
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000
 800182c:	48000400 	.word	0x48000400
 8001830:	48000800 	.word	0x48000800
 8001834:	40010400 	.word	0x40010400

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001854:	e002      	b.n	800185c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_PWREx_GetVoltageRange+0x18>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40007000 	.word	0x40007000

08001884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001892:	d130      	bne.n	80018f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800189c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a0:	d038      	beq.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2232      	movs	r2, #50	; 0x32
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0c9b      	lsrs	r3, r3, #18
 80018c4:	3301      	adds	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c8:	e002      	b.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018dc:	d102      	bne.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f2      	bne.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f0:	d110      	bne.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e00f      	b.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001902:	d007      	beq.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001912:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40007000 	.word	0x40007000
 8001928:	20000000 	.word	0x20000000
 800192c:	431bde83 	.word	0x431bde83

08001930 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	f000 bc02 	b.w	8002148 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001944:	4b96      	ldr	r3, [pc, #600]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800194e:	4b94      	ldr	r3, [pc, #592]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80e4 	beq.w	8001b2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_RCC_OscConfig+0x4c>
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	f040 808b 	bne.w	8001a8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b01      	cmp	r3, #1
 8001978:	f040 8087 	bne.w	8001a8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800197c:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_OscConfig+0x64>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e3d9      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <HAL_RCC_OscConfig+0x7e>
 80019a4:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ac:	e005      	b.n	80019ba <HAL_RCC_OscConfig+0x8a>
 80019ae:	4b7c      	ldr	r3, [pc, #496]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d223      	bcs.n	8001a06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fdbe 	bl	8002544 <RCC_SetFlashLatencyFromMSIRange>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e3ba      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d2:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a72      	ldr	r2, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	496d      	ldr	r1, [pc, #436]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f0:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	4968      	ldr	r1, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e025      	b.n	8001a52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a06:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4960      	ldr	r1, [pc, #384]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a24:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	495b      	ldr	r1, [pc, #364]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fd7e 	bl	8002544 <RCC_SetFlashLatencyFromMSIRange>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e37a      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a52:	f000 fc81 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	4950      	ldr	r1, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	4a4e      	ldr	r2, [pc, #312]	; (8001ba8 <HAL_RCC_OscConfig+0x278>)
 8001a70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a72:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_RCC_OscConfig+0x27c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb60 	bl	800113c <HAL_InitTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d052      	beq.n	8001b2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	e35e      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d032      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a42      	ldr	r2, [pc, #264]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fc4f 	bl	8001340 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fc4b 	bl	8001340 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e347      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab8:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a35      	ldr	r2, [pc, #212]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001aca:	f043 0308 	orr.w	r3, r3, #8
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4930      	ldr	r1, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	492b      	ldr	r1, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
 8001af6:	e01a      	b.n	8001b2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fc1c 	bl	8001340 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fc18 	bl	8001340 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e314      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1dc>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d073      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_OscConfig+0x21c>
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d10e      	bne.n	8001b64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d10b      	bne.n	8001b64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d063      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2f0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d15f      	bne.n	8001c20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e2f1      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6c:	d106      	bne.n	8001b7c <HAL_RCC_OscConfig+0x24c>
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e025      	b.n	8001bc8 <HAL_RCC_OscConfig+0x298>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b84:	d114      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x280>
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a02      	ldr	r2, [pc, #8]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e013      	b.n	8001bc8 <HAL_RCC_OscConfig+0x298>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08008af0 	.word	0x08008af0
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	4ba0      	ldr	r3, [pc, #640]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a9f      	ldr	r2, [pc, #636]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b9d      	ldr	r3, [pc, #628]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a9c      	ldr	r2, [pc, #624]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fbb6 	bl	8001340 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fbb2 	bl	8001340 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e2ae      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	4b92      	ldr	r3, [pc, #584]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x2a8>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fba2 	bl	8001340 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fb9e 	bl	8001340 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e29a      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c12:	4b88      	ldr	r3, [pc, #544]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2d0>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d060      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_OscConfig+0x310>
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d119      	bne.n	8001c6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d116      	bne.n	8001c6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c40:	4b7c      	ldr	r3, [pc, #496]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_OscConfig+0x328>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e277      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b76      	ldr	r3, [pc, #472]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	4973      	ldr	r1, [pc, #460]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c6c:	e040      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d023      	beq.n	8001cbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c76:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6e      	ldr	r2, [pc, #440]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff fb5d 	bl	8001340 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fb59 	bl	8001340 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e255      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9c:	4b65      	ldr	r3, [pc, #404]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b62      	ldr	r3, [pc, #392]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	495f      	ldr	r1, [pc, #380]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e018      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a5c      	ldr	r2, [pc, #368]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff fb39 	bl	8001340 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fb35 	bl	8001340 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e231      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d03c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0a:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff fb14 	bl	8001340 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fb10 	bl	8001340 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e20c      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d2e:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ef      	beq.n	8001d1c <HAL_RCC_OscConfig+0x3ec>
 8001d3c:	e01b      	b.n	8001d76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d44:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff faf7 	bl	8001340 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d56:	f7ff faf3 	bl	8001340 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1ef      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d68:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ef      	bne.n	8001d56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80a6 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10d      	bne.n	8001db0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <HAL_RCC_OscConfig+0x508>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d118      	bne.n	8001dee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_RCC_OscConfig+0x508>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x508>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc8:	f7ff faba 	bl	8001340 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7ff fab6 	bl	8001340 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1b2      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_RCC_OscConfig+0x508>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d108      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4d8>
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e06:	e029      	b.n	8001e5c <HAL_RCC_OscConfig+0x52c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d115      	bne.n	8001e3c <HAL_RCC_OscConfig+0x50c>
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <HAL_RCC_OscConfig+0x504>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x52c>
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	4b9a      	ldr	r3, [pc, #616]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a99      	ldr	r2, [pc, #612]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4c:	4b96      	ldr	r3, [pc, #600]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	4a95      	ldr	r2, [pc, #596]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d016      	beq.n	8001e92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7ff fa6c 	bl	8001340 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fa68 	bl	8001340 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e162      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e82:	4b89      	ldr	r3, [pc, #548]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ed      	beq.n	8001e6c <HAL_RCC_OscConfig+0x53c>
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff fa55 	bl	8001340 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff fa51 	bl	8001340 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e14b      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb0:	4b7d      	ldr	r3, [pc, #500]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ed      	bne.n	8001e9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a77      	ldr	r2, [pc, #476]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee4:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eea:	4a6f      	ldr	r2, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fa24 	bl	8001340 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001efc:	f7ff fa20 	bl	8001340 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e11c      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f0e:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ef      	beq.n	8001efc <HAL_RCC_OscConfig+0x5cc>
 8001f1c:	e01b      	b.n	8001f56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f1e:	4b62      	ldr	r3, [pc, #392]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fa07 	bl	8001340 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f36:	f7ff fa03 	bl	8001340 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0ff      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f48:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ef      	bne.n	8001f36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80f3 	beq.w	8002146 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	f040 80c9 	bne.w	80020fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f6a:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0203 	and.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d12c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d123      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d113      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d109      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d06b      	beq.n	80020b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d062      	beq.n	80020a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fde:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0ac      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8001ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ffa:	f7ff f9a1 	bl	8001340 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff f99d 	bl	8001340 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e099      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_RCC_OscConfig+0x77c>)
 8002026:	4013      	ands	r3, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002030:	3a01      	subs	r2, #1
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800203a:	0212      	lsls	r2, r2, #8
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002042:	0852      	lsrs	r2, r2, #1
 8002044:	3a01      	subs	r2, #1
 8002046:	0552      	lsls	r2, r2, #21
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800204e:	0852      	lsrs	r2, r2, #1
 8002050:	3a01      	subs	r2, #1
 8002052:	0652      	lsls	r2, r2, #25
 8002054:	4311      	orrs	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800205a:	06d2      	lsls	r2, r2, #27
 800205c:	430a      	orrs	r2, r1
 800205e:	4912      	ldr	r1, [pc, #72]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8002060:	4313      	orrs	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 800206a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800207c:	f7ff f960 	bl	8001340 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff f95c 	bl	8001340 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e058      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_RCC_OscConfig+0x778>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a2:	e050      	b.n	8002146 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e04f      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d144      	bne.n	8002146 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 80020c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c8:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a20      	ldr	r2, [pc, #128]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 80020ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020d4:	f7ff f934 	bl	8001340 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff f930 	bl	8001340 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e02c      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x7ac>
 80020fa:	e024      	b.n	8002146 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d01f      	beq.n	8002142 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 8002108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff f917 	bl	8001340 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff f913 	bl	8001340 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e00f      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4905      	ldr	r1, [pc, #20]	; (8002150 <HAL_RCC_OscConfig+0x820>)
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_RCC_OscConfig+0x824>)
 800213c:	4013      	ands	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
 8002140:	e001      	b.n	8002146 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	feeefffc 	.word	0xfeeefffc

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0e7      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b75      	ldr	r3, [pc, #468]	; (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b72      	ldr	r3, [pc, #456]	; (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4970      	ldr	r1, [pc, #448]	; (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0cf      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d010      	beq.n	80021ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d908      	bls.n	80021ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4960      	ldr	r1, [pc, #384]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d04c      	beq.n	8002270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	4b5a      	ldr	r3, [pc, #360]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d121      	bne.n	800222e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0a6      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f6:	4b54      	ldr	r3, [pc, #336]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d115      	bne.n	800222e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e09a      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800220e:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e08e      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e086      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4943      	ldr	r1, [pc, #268]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002240:	f7ff f87e 	bl	8001340 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7ff f87a 	bl	8001340 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e06e      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002288:	429a      	cmp	r2, r3
 800228a:	d208      	bcs.n	800229e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	492b      	ldr	r1, [pc, #172]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d210      	bcs.n	80022ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 0207 	bic.w	r2, r3, #7
 80022b4:	4923      	ldr	r1, [pc, #140]	; (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022bc:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e036      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4918      	ldr	r1, [pc, #96]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4910      	ldr	r1, [pc, #64]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800230c:	f000 f824 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	490b      	ldr	r1, [pc, #44]	; (800234c <HAL_RCC_ClockConfig+0x1f4>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1f8>)
 800232a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1fc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe ff03 	bl	800113c <HAL_InitTick>
 8002336:	4603      	mov	r3, r0
 8002338:	72fb      	strb	r3, [r7, #11]

  return status;
 800233a:	7afb      	ldrb	r3, [r7, #11]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	08008af0 	.word	0x08008af0
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x34>
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d121      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d11e      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002398:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e005      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023a8:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023b4:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10d      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <HAL_RCC_GetSysClockFreq+0x110>)
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e004      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCC_GetSysClockFreq+0x114>)
 80023de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d134      	bne.n	8002450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0xa6>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d003      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0xac>
 80023fc:	e005      	b.n	800240a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_RCC_GetSysClockFreq+0x110>)
 8002400:	617b      	str	r3, [r7, #20]
      break;
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_GetSysClockFreq+0x114>)
 8002406:	617b      	str	r3, [r7, #20]
      break;
 8002408:	e002      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	617b      	str	r3, [r7, #20]
      break;
 800240e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	3301      	adds	r3, #1
 800241c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	fb03 f202 	mul.w	r2, r3, r2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	0e5b      	lsrs	r3, r3, #25
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	3301      	adds	r3, #1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002450:	69bb      	ldr	r3, [r7, #24]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	08008b08 	.word	0x08008b08
 8002468:	00f42400 	.word	0x00f42400
 800246c:	007a1200 	.word	0x007a1200

08002470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_GetHCLKFreq+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800248c:	f7ff fff0 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	08008b00 	.word	0x08008b00

080024b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024b8:	f7ff ffda 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0adb      	lsrs	r3, r3, #11
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08008b00 	.word	0x08008b00

080024e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	220f      	movs	r2, #15
 80024ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_RCC_GetClockConfig+0x5c>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_RCC_GetClockConfig+0x5c>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_RCC_GetClockConfig+0x5c>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_GetClockConfig+0x5c>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <HAL_RCC_GetClockConfig+0x60>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0207 	and.w	r2, r3, #7
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	601a      	str	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	40022000 	.word	0x40022000

08002544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800255c:	f7ff f984 	bl	8001868 <HAL_PWREx_GetVoltageRange>
 8002560:	6178      	str	r0, [r7, #20]
 8002562:	e014      	b.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a24      	ldr	r2, [pc, #144]	; (80025fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800257c:	f7ff f974 	bl	8001868 <HAL_PWREx_GetVoltageRange>
 8002580:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002594:	d10b      	bne.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b80      	cmp	r3, #128	; 0x80
 800259a:	d919      	bls.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2ba0      	cmp	r3, #160	; 0xa0
 80025a0:	d902      	bls.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a2:	2302      	movs	r3, #2
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	e013      	b.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a8:	2301      	movs	r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	e010      	b.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d902      	bls.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025b4:	2303      	movs	r3, #3
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e00a      	b.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b80      	cmp	r3, #128	; 0x80
 80025be:	d102      	bne.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025c0:	2302      	movs	r3, #2
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	e004      	b.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b70      	cmp	r3, #112	; 0x70
 80025ca:	d101      	bne.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025cc:	2301      	movs	r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 0207 	bic.w	r2, r3, #7
 80025d8:	4909      	ldr	r1, [pc, #36]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	40022000 	.word	0x40022000

08002604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800260c:	2300      	movs	r3, #0
 800260e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002610:	2300      	movs	r3, #0
 8002612:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261c:	2b00      	cmp	r3, #0
 800261e:	d031      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002628:	d01a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800262a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800262e:	d814      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002638:	d10f      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a5c      	ldr	r2, [pc, #368]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002646:	e00c      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f9ce 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002658:	e003      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	74fb      	strb	r3, [r7, #19]
      break;
 800265e:	e000      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002668:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	494e      	ldr	r1, [pc, #312]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800267e:	e001      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 809e 	beq.w	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002696:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4a3f      	ldr	r2, [pc, #252]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
 80026b8:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fe34 	bl	8001340 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026da:	e009      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe fe30 	bl	8001340 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	74fb      	strb	r3, [r7, #19]
        break;
 80026ee:	e005      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d15a      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002702:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01e      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	429a      	cmp	r2, r3
 800271c:	d019      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fdf0 	bl	8001340 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	e00b      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fdec 	bl	8001340 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d902      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	74fb      	strb	r3, [r7, #19]
            break;
 800277a:	e006      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ec      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279e:	4904      	ldr	r1, [pc, #16]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027a6:	e009      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	74bb      	strb	r3, [r7, #18]
 80027ac:	e006      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027bc:	7c7b      	ldrb	r3, [r7, #17]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b8a      	ldr	r3, [pc, #552]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	4a89      	ldr	r2, [pc, #548]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027da:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 0203 	bic.w	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4980      	ldr	r1, [pc, #512]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027fc:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f023 020c 	bic.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	4978      	ldr	r1, [pc, #480]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800281e:	4b73      	ldr	r3, [pc, #460]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	496f      	ldr	r1, [pc, #444]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002840:	4b6a      	ldr	r3, [pc, #424]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	4967      	ldr	r1, [pc, #412]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002862:	4b62      	ldr	r3, [pc, #392]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	495e      	ldr	r1, [pc, #376]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	4956      	ldr	r1, [pc, #344]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a6:	4b51      	ldr	r3, [pc, #324]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	494d      	ldr	r1, [pc, #308]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d028      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c8:	4b48      	ldr	r3, [pc, #288]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4945      	ldr	r1, [pc, #276]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e6:	d106      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a3f      	ldr	r2, [pc, #252]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028f2:	60d3      	str	r3, [r2, #12]
 80028f4:	e011      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028fe:	d10c      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	2101      	movs	r1, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f872 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d028      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002926:	4b31      	ldr	r3, [pc, #196]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	492d      	ldr	r1, [pc, #180]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002944:	d106      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	4a28      	ldr	r2, [pc, #160]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002950:	60d3      	str	r3, [r2, #12]
 8002952:	e011      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295c:	d10c      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f843 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01c      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002992:	4916      	ldr	r1, [pc, #88]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029a2:	d10c      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	2102      	movs	r1, #2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f820 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	4904      	ldr	r1, [pc, #16]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000

080029f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029fe:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a0a:	4b71      	ldr	r3, [pc, #452]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10d      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a22:	4b6b      	ldr	r3, [pc, #428]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
       ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d047      	beq.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e044      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d018      	beq.n	8002a76 <RCCEx_PLLSAI1_Config+0x86>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d825      	bhi.n	8002a94 <RCCEx_PLLSAI1_Config+0xa4>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d002      	beq.n	8002a52 <RCCEx_PLLSAI1_Config+0x62>
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d009      	beq.n	8002a64 <RCCEx_PLLSAI1_Config+0x74>
 8002a50:	e020      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a52:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11d      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a62:	e01a      	b.n	8002a9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a64:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d116      	bne.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e013      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a76:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a82:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a92:	e006      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	e004      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e002      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e000      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aaa:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	4943      	ldr	r1, [pc, #268]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d17c      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002acc:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a3f      	ldr	r2, [pc, #252]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fc32 	bl	8001340 <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ade:	e009      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae0:	f7fe fc2e 	bl	8001340 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	73fb      	strb	r3, [r7, #15]
        break;
 8002af2:	e005      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ef      	bne.n	8002ae0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d15f      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d110      	bne.n	8002b2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b0c:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6892      	ldr	r2, [r2, #8]
 8002b1c:	0211      	lsls	r1, r2, #8
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	06d2      	lsls	r2, r2, #27
 8002b24:	430a      	orrs	r2, r1
 8002b26:	492a      	ldr	r1, [pc, #168]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	610b      	str	r3, [r1, #16]
 8002b2c:	e027      	b.n	8002b7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d112      	bne.n	8002b5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6892      	ldr	r2, [r2, #8]
 8002b44:	0211      	lsls	r1, r2, #8
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6912      	ldr	r2, [r2, #16]
 8002b4a:	0852      	lsrs	r2, r2, #1
 8002b4c:	3a01      	subs	r2, #1
 8002b4e:	0552      	lsls	r2, r2, #21
 8002b50:	430a      	orrs	r2, r1
 8002b52:	491f      	ldr	r1, [pc, #124]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	610b      	str	r3, [r1, #16]
 8002b58:	e011      	b.n	8002b7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6892      	ldr	r2, [r2, #8]
 8002b6a:	0211      	lsls	r1, r2, #8
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6952      	ldr	r2, [r2, #20]
 8002b70:	0852      	lsrs	r2, r2, #1
 8002b72:	3a01      	subs	r2, #1
 8002b74:	0652      	lsls	r2, r2, #25
 8002b76:	430a      	orrs	r2, r1
 8002b78:	4915      	ldr	r1, [pc, #84]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fbd9 	bl	8001340 <HAL_GetTick>
 8002b8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b90:	e009      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b92:	f7fe fbd5 	bl	8001340 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d902      	bls.n	8002ba6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ba4:	e005      	b.n	8002bb2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ef      	beq.n	8002b92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0b9      	b.n	8002d5a <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d108      	bne.n	8002c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bf6:	d009      	beq.n	8002c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
 8002bfe:	e005      	b.n	8002c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d12a      	bne.n	8002c74 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <HAL_SPI_Init+0x190>)
 8002c2a:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a4e      	ldr	r2, [pc, #312]	; (8002d68 <HAL_SPI_Init+0x194>)
 8002c30:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4d      	ldr	r2, [pc, #308]	; (8002d6c <HAL_SPI_Init+0x198>)
 8002c36:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a4d      	ldr	r2, [pc, #308]	; (8002d70 <HAL_SPI_Init+0x19c>)
 8002c3c:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4c      	ldr	r2, [pc, #304]	; (8002d74 <HAL_SPI_Init+0x1a0>)
 8002c42:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a4c      	ldr	r2, [pc, #304]	; (8002d78 <HAL_SPI_Init+0x1a4>)
 8002c48:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_SPI_Init+0x1a8>)
 8002c4e:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a4b      	ldr	r2, [pc, #300]	; (8002d80 <HAL_SPI_Init+0x1ac>)
 8002c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a47      	ldr	r2, [pc, #284]	; (8002d84 <HAL_SPI_Init+0x1b0>)
 8002c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c94:	d902      	bls.n	8002c9c <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e002      	b.n	8002ca2 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002caa:	d007      	beq.n	8002cbc <HAL_SPI_Init+0xe8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cb4:	d002      	beq.n	8002cbc <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	ea42 0103 	orr.w	r1, r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	f003 0204 	and.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d38:	ea42 0103 	orr.w	r1, r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	08003725 	.word	0x08003725
 8002d68:	08003739 	.word	0x08003739
 8002d6c:	0800374d 	.word	0x0800374d
 8002d70:	08003761 	.word	0x08003761
 8002d74:	08003775 	.word	0x08003775
 8002d78:	08003789 	.word	0x08003789
 8002d7c:	0800379d 	.word	0x0800379d
 8002d80:	080037b1 	.word	0x080037b1
 8002d84:	08001005 	.word	0x08001005

08002d88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_SPI_Transmit+0x22>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e15f      	b.n	800306a <HAL_SPI_Transmit+0x2e2>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db2:	f7fe fac5 	bl	8001340 <HAL_GetTick>
 8002db6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dcc:	e148      	b.n	8003060 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_SPI_Transmit+0x52>
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dde:	e13f      	b.n	8003060 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2203      	movs	r2, #3
 8002de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	88fa      	ldrh	r2, [r7, #6]
 8002dfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2a:	d10f      	bne.n	8002e4c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d007      	beq.n	8002e6a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e72:	d94f      	bls.n	8002f14 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_SPI_Transmit+0xfa>
 8002e7c:	8afb      	ldrh	r3, [r7, #22]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d142      	bne.n	8002f08 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	881a      	ldrh	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	1c9a      	adds	r2, r3, #2
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ea6:	e02f      	b.n	8002f08 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d112      	bne.n	8002edc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eda:	e015      	b.n	8002f08 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002edc:	f7fe fa30 	bl	8001340 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d803      	bhi.n	8002ef4 <HAL_SPI_Transmit+0x16c>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d102      	bne.n	8002efa <HAL_SPI_Transmit+0x172>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002f06:	e0ab      	b.n	8003060 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ca      	bne.n	8002ea8 <HAL_SPI_Transmit+0x120>
 8002f12:	e080      	b.n	8003016 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_SPI_Transmit+0x19a>
 8002f1c:	8afb      	ldrh	r3, [r7, #22]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d174      	bne.n	800300c <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d912      	bls.n	8002f52 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b02      	subs	r3, #2
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f50:	e05c      	b.n	800300c <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f78:	e048      	b.n	800300c <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d12b      	bne.n	8002fe0 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d912      	bls.n	8002fb8 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	881a      	ldrh	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	1c9a      	adds	r2, r3, #2
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b02      	subs	r3, #2
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb6:	e029      	b.n	800300c <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	7812      	ldrb	r2, [r2, #0]
 8002fc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fde:	e015      	b.n	800300c <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe0:	f7fe f9ae 	bl	8001340 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d803      	bhi.n	8002ff8 <HAL_SPI_Transmit+0x270>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Transmit+0x276>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800300a:	e029      	b.n	8003060 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1b1      	bne.n	8002f7a <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fd48 	bl	8003ab0 <SPI_EndRxTxTransaction>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e003      	b.n	8003060 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003068:	7ffb      	ldrb	r3, [r7, #31]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b088      	sub	sp, #32
 8003076:	af02      	add	r7, sp, #8
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d002      	beq.n	8003098 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003092:	2302      	movs	r3, #2
 8003094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003096:	e11a      	b.n	80032ce <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a0:	d112      	bne.n	80030c8 <HAL_SPI_Receive+0x56>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10e      	bne.n	80030c8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2204      	movs	r2, #4
 80030ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f90e 	bl	80032e0 <HAL_SPI_TransmitReceive>
 80030c4:	4603      	mov	r3, r0
 80030c6:	e107      	b.n	80032d8 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_SPI_Receive+0x64>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e100      	b.n	80032d8 <HAL_SPI_Receive+0x266>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030de:	f7fe f92f 	bl	8001340 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_SPI_Receive+0x7e>
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030f4:	e0eb      	b.n	80032ce <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2204      	movs	r2, #4
 80030fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003140:	d908      	bls.n	8003154 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e007      	b.n	8003164 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003162:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316c:	d10f      	bne.n	800318e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800317c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800318c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	d007      	beq.n	80031ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031b4:	d86f      	bhi.n	8003296 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031b6:	e034      	b.n	8003222 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d117      	bne.n	80031f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f103 020c 	add.w	r2, r3, #12
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	7812      	ldrb	r2, [r2, #0]
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031f4:	e015      	b.n	8003222 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031f6:	f7fe f8a3 	bl	8001340 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d803      	bhi.n	800320e <HAL_SPI_Receive+0x19c>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d102      	bne.n	8003214 <HAL_SPI_Receive+0x1a2>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003220:	e055      	b.n	80032ce <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1c4      	bne.n	80031b8 <HAL_SPI_Receive+0x146>
 800322e:	e038      	b.n	80032a2 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d115      	bne.n	800326a <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	b292      	uxth	r2, r2
 800324a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003268:	e015      	b.n	8003296 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800326a:	f7fe f869 	bl	8001340 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d803      	bhi.n	8003282 <HAL_SPI_Receive+0x210>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d102      	bne.n	8003288 <HAL_SPI_Receive+0x216>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003294:	e01b      	b.n	80032ce <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1c6      	bne.n	8003230 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fbaa 	bl	8003a00 <SPI_EndRxTransaction>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	75fb      	strb	r3, [r7, #23]
 80032c4:	e003      	b.n	80032ce <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032ee:	2301      	movs	r3, #1
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_SPI_TransmitReceive+0x26>
 8003302:	2302      	movs	r3, #2
 8003304:	e20a      	b.n	800371c <HAL_SPI_TransmitReceive+0x43c>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330e:	f7fe f817 	bl	8001340 <HAL_GetTick>
 8003312:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800331a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003326:	887b      	ldrh	r3, [r7, #2]
 8003328:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800332a:	7efb      	ldrb	r3, [r7, #27]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d00e      	beq.n	800334e <HAL_SPI_TransmitReceive+0x6e>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003336:	d106      	bne.n	8003346 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <HAL_SPI_TransmitReceive+0x66>
 8003340:	7efb      	ldrb	r3, [r7, #27]
 8003342:	2b04      	cmp	r3, #4
 8003344:	d003      	beq.n	800334e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003346:	2302      	movs	r3, #2
 8003348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800334c:	e1e0      	b.n	8003710 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x80>
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d103      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003366:	e1d3      	b.n	8003710 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b04      	cmp	r3, #4
 8003372:	d003      	beq.n	800337c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2205      	movs	r2, #5
 8003378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	887a      	ldrh	r2, [r7, #2]
 80033a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033be:	d802      	bhi.n	80033c6 <HAL_SPI_TransmitReceive+0xe6>
 80033c0:	8a3b      	ldrh	r3, [r7, #16]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d908      	bls.n	80033d8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e007      	b.n	80033e8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d007      	beq.n	8003406 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003404:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800340e:	f240 8081 	bls.w	8003514 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_SPI_TransmitReceive+0x140>
 800341a:	8a7b      	ldrh	r3, [r7, #18]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d16d      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	1c9a      	adds	r2, r3, #2
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003444:	e05a      	b.n	80034fc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b02      	cmp	r3, #2
 8003452:	d11b      	bne.n	800348c <HAL_SPI_TransmitReceive+0x1ac>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_SPI_TransmitReceive+0x1ac>
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2b01      	cmp	r3, #1
 8003462:	d113      	bne.n	800348c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	881a      	ldrh	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d11c      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x1f4>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	b292      	uxth	r2, r2
 80034b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	1c9a      	adds	r2, r3, #2
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034d0:	2301      	movs	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034d4:	f7fd ff34 	bl	8001340 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d80b      	bhi.n	80034fc <HAL_SPI_TransmitReceive+0x21c>
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d007      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80034fa:	e109      	b.n	8003710 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d19f      	bne.n	8003446 <HAL_SPI_TransmitReceive+0x166>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d199      	bne.n	8003446 <HAL_SPI_TransmitReceive+0x166>
 8003512:	e0e3      	b.n	80036dc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x244>
 800351c:	8a7b      	ldrh	r3, [r7, #18]
 800351e:	2b01      	cmp	r3, #1
 8003520:	f040 80cf 	bne.w	80036c2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d912      	bls.n	8003554 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	881a      	ldrh	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	1c9a      	adds	r2, r3, #2
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b02      	subs	r3, #2
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003552:	e0b6      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357a:	e0a2      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d134      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x314>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02f      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x314>
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	2b01      	cmp	r3, #1
 8003598:	d12c      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d912      	bls.n	80035ca <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b02      	subs	r3, #2
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c8:	e012      	b.n	80035f0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d148      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x3b4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d042      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d923      	bls.n	8003662 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	b292      	uxth	r2, r2
 8003626:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b02      	subs	r3, #2
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d81f      	bhi.n	8003690 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	e016      	b.n	8003690 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f103 020c 	add.w	r2, r3, #12
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003694:	f7fd fe54 	bl	8001340 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d803      	bhi.n	80036ac <HAL_SPI_TransmitReceive+0x3cc>
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d102      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x3d2>
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80036c0:	e026      	b.n	8003710 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f47f af57 	bne.w	800357c <HAL_SPI_TransmitReceive+0x29c>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f47f af50 	bne.w	800357c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f9e5 	bl	8003ab0 <SPI_EndRxTxTransaction>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e003      	b.n	8003710 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800371c:	4618      	mov	r0, r3
 800371e:	3728      	adds	r7, #40	; 0x28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037d4:	f7fd fdb4 	bl	8001340 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4413      	add	r3, r2
 80037e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037e4:	f7fd fdac 	bl	8001340 <HAL_GetTick>
 80037e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	015b      	lsls	r3, r3, #5
 80037f0:	0d1b      	lsrs	r3, r3, #20
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fa:	e054      	b.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d050      	beq.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003804:	f7fd fd9c 	bl	8001340 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	429a      	cmp	r2, r3
 8003812:	d902      	bls.n	800381a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d13d      	bne.n	8003896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003832:	d111      	bne.n	8003858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383c:	d004      	beq.n	8003848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d107      	bne.n	8003858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003860:	d10f      	bne.n	8003882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e017      	b.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4013      	ands	r3, r2
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	bf0c      	ite	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	2300      	movne	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d19b      	bne.n	80037fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000000 	.word	0x20000000

080038d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038e6:	f7fd fd2b 	bl	8001340 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	4413      	add	r3, r2
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80038f6:	f7fd fd23 	bl	8001340 <HAL_GetTick>
 80038fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003904:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00da      	lsls	r2, r3, #3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	0d1b      	lsrs	r3, r3, #20
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800391c:	e060      	b.n	80039e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003924:	d107      	bne.n	8003936 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003934:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d050      	beq.n	80039e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800393e:	f7fd fcff 	bl	8001340 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	429a      	cmp	r2, r3
 800394c:	d902      	bls.n	8003954 <SPI_WaitFifoStateUntilTimeout+0x80>
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13d      	bne.n	80039d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003962:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396c:	d111      	bne.n	8003992 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d004      	beq.n	8003982 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d107      	bne.n	8003992 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399a:	d10f      	bne.n	80039bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e010      	b.n	80039f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3b01      	subs	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d196      	bne.n	800391e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000

08003a00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a14:	d111      	bne.n	8003a3a <SPI_EndRxTransaction+0x3a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1e:	d004      	beq.n	8003a2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a28:	d107      	bne.n	8003a3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2180      	movs	r1, #128	; 0x80
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff febd 	bl	80037c4 <SPI_WaitFlagStateUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e023      	b.n	8003aa8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a68:	d11d      	bne.n	8003aa6 <SPI_EndRxTransaction+0xa6>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a72:	d004      	beq.n	8003a7e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7c:	d113      	bne.n	8003aa6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff ff22 	bl	80038d4 <SPI_WaitFifoStateUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e000      	b.n	8003aa8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff ff03 	bl	80038d4 <SPI_WaitFifoStateUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e027      	b.n	8003b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	2180      	movs	r1, #128	; 0x80
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff fe68 	bl	80037c4 <SPI_WaitFlagStateUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e014      	b.n	8003b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7ff fedc 	bl	80038d4 <SPI_WaitFifoStateUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e000      	b.n	8003b34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e049      	b.n	8003be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f841 	bl	8003bea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f000 f9be 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d001      	beq.n	8003c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e03b      	b.n	8003c90 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_TIM_Base_Start_IT+0x4e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c42:	d004      	beq.n	8003c4e <HAL_TIM_Base_Start_IT+0x4e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d115      	bne.n	8003c7a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d015      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x8c>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c66:	d011      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c78:	e008      	b.n	8003c8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e000      	b.n	8003c8e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40014000 	.word	0x40014000
 8003ca4:	00010007 	.word	0x00010007

08003ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0202 	mvn.w	r2, #2
 8003cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8e4 	bl	8003ec0 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8d6 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8e7 	bl	8003ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d020      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01b      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0204 	mvn.w	r2, #4
 8003d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8be 	bl	8003ec0 <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8b0 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8c1 	bl	8003ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d020      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0208 	mvn.w	r2, #8
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f898 	bl	8003ec0 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f88a 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f89b 	bl	8003ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d020      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0210 	mvn.w	r2, #16
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f872 	bl	8003ec0 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f864 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f875 	bl	8003ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0201 	mvn.w	r2, #1
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd f8b8 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8d0 	bl	8003fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8c8 	bl	8003fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f834 	bl	8003ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0220 	mvn.w	r2, #32
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f890 	bl	8003fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a2a      	ldr	r2, [pc, #168]	; (8003fb8 <TIM_Base_SetConfig+0xbc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0x20>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d108      	bne.n	8003f2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <TIM_Base_SetConfig+0xbc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <TIM_Base_SetConfig+0x52>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d007      	beq.n	8003f4e <TIM_Base_SetConfig+0x52>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <TIM_Base_SetConfig+0xc0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0x52>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <TIM_Base_SetConfig+0xc4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <TIM_Base_SetConfig+0xbc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_Base_SetConfig+0xa0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <TIM_Base_SetConfig+0xc0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_Base_SetConfig+0xa0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <TIM_Base_SetConfig+0xc4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d103      	bne.n	8003fa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	615a      	str	r2, [r3, #20]
}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400

08003fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e04e      	b.n	80040b0 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d114      	bne.n	8004044 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8a6 	bl	8004174 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <HAL_UART_Init+0xb8>)
 8004036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2224      	movs	r2, #36	; 0x24
 8004048:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 faf8 	bl	8004658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f8c9 	bl	8004200 <UART_SetConfig>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_UART_Init+0x78>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e01b      	b.n	80040b0 <HAL_UART_Init+0xb0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fb77 	bl	800479c <UART_CheckIdleState>
 80040ae:	4603      	mov	r3, r0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	0800108d 	.word	0x0800108d

080040bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <UART_InitCallbacksToDefault+0x64>)
 8004180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a15      	ldr	r2, [pc, #84]	; (80041dc <UART_InitCallbacksToDefault+0x68>)
 8004188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <UART_InitCallbacksToDefault+0x6c>)
 8004190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <UART_InitCallbacksToDefault+0x70>)
 8004198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <UART_InitCallbacksToDefault+0x74>)
 80041a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a11      	ldr	r2, [pc, #68]	; (80041ec <UART_InitCallbacksToDefault+0x78>)
 80041a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <UART_InitCallbacksToDefault+0x7c>)
 80041b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <UART_InitCallbacksToDefault+0x80>)
 80041b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <UART_InitCallbacksToDefault+0x84>)
 80041c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <UART_InitCallbacksToDefault+0x88>)
 80041c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	080040d1 	.word	0x080040d1
 80041dc:	080040bd 	.word	0x080040bd
 80041e0:	080040f9 	.word	0x080040f9
 80041e4:	080040e5 	.word	0x080040e5
 80041e8:	0800410d 	.word	0x0800410d
 80041ec:	08004121 	.word	0x08004121
 80041f0:	08004135 	.word	0x08004135
 80041f4:	08004149 	.word	0x08004149
 80041f8:	08004a83 	.word	0x08004a83
 80041fc:	0800415d 	.word	0x0800415d

08004200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004204:	b08a      	sub	sp, #40	; 0x28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	431a      	orrs	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4313      	orrs	r3, r2
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4bb4      	ldr	r3, [pc, #720]	; (8004500 <UART_SetConfig+0x300>)
 8004230:	4013      	ands	r3, r2
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004238:	430b      	orrs	r3, r1
 800423a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4aa9      	ldr	r2, [pc, #676]	; (8004504 <UART_SetConfig+0x304>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	4313      	orrs	r3, r2
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4aa0      	ldr	r2, [pc, #640]	; (8004508 <UART_SetConfig+0x308>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d126      	bne.n	80042d8 <UART_SetConfig+0xd8>
 800428a:	4ba0      	ldr	r3, [pc, #640]	; (800450c <UART_SetConfig+0x30c>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d81b      	bhi.n	80042d0 <UART_SetConfig+0xd0>
 8004298:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0xa0>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042c1 	.word	0x080042c1
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e080      	b.n	80043ba <UART_SetConfig+0x1ba>
 80042b8:	2302      	movs	r3, #2
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e07c      	b.n	80043ba <UART_SetConfig+0x1ba>
 80042c0:	2304      	movs	r3, #4
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e078      	b.n	80043ba <UART_SetConfig+0x1ba>
 80042c8:	2308      	movs	r3, #8
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ce:	e074      	b.n	80043ba <UART_SetConfig+0x1ba>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e070      	b.n	80043ba <UART_SetConfig+0x1ba>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a8c      	ldr	r2, [pc, #560]	; (8004510 <UART_SetConfig+0x310>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d138      	bne.n	8004354 <UART_SetConfig+0x154>
 80042e2:	4b8a      	ldr	r3, [pc, #552]	; (800450c <UART_SetConfig+0x30c>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d82d      	bhi.n	800434c <UART_SetConfig+0x14c>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0xf8>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	0800434d 	.word	0x0800434d
 8004304:	0800434d 	.word	0x0800434d
 8004308:	0800433d 	.word	0x0800433d
 800430c:	0800434d 	.word	0x0800434d
 8004310:	0800434d 	.word	0x0800434d
 8004314:	0800434d 	.word	0x0800434d
 8004318:	08004335 	.word	0x08004335
 800431c:	0800434d 	.word	0x0800434d
 8004320:	0800434d 	.word	0x0800434d
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004345 	.word	0x08004345
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e042      	b.n	80043ba <UART_SetConfig+0x1ba>
 8004334:	2302      	movs	r3, #2
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e03e      	b.n	80043ba <UART_SetConfig+0x1ba>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e03a      	b.n	80043ba <UART_SetConfig+0x1ba>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e036      	b.n	80043ba <UART_SetConfig+0x1ba>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e032      	b.n	80043ba <UART_SetConfig+0x1ba>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6a      	ldr	r2, [pc, #424]	; (8004504 <UART_SetConfig+0x304>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d12a      	bne.n	80043b4 <UART_SetConfig+0x1b4>
 800435e:	4b6b      	ldr	r3, [pc, #428]	; (800450c <UART_SetConfig+0x30c>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800436c:	d01a      	beq.n	80043a4 <UART_SetConfig+0x1a4>
 800436e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004372:	d81b      	bhi.n	80043ac <UART_SetConfig+0x1ac>
 8004374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004378:	d00c      	beq.n	8004394 <UART_SetConfig+0x194>
 800437a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437e:	d815      	bhi.n	80043ac <UART_SetConfig+0x1ac>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <UART_SetConfig+0x18c>
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004388:	d008      	beq.n	800439c <UART_SetConfig+0x19c>
 800438a:	e00f      	b.n	80043ac <UART_SetConfig+0x1ac>
 800438c:	2300      	movs	r3, #0
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e012      	b.n	80043ba <UART_SetConfig+0x1ba>
 8004394:	2302      	movs	r3, #2
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e00e      	b.n	80043ba <UART_SetConfig+0x1ba>
 800439c:	2304      	movs	r3, #4
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e00a      	b.n	80043ba <UART_SetConfig+0x1ba>
 80043a4:	2308      	movs	r3, #8
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e006      	b.n	80043ba <UART_SetConfig+0x1ba>
 80043ac:	2310      	movs	r3, #16
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e002      	b.n	80043ba <UART_SetConfig+0x1ba>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a51      	ldr	r2, [pc, #324]	; (8004504 <UART_SetConfig+0x304>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d17a      	bne.n	80044ba <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d824      	bhi.n	8004416 <UART_SetConfig+0x216>
 80043cc:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0x1d4>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004407 	.word	0x08004407
 80043e8:	08004417 	.word	0x08004417
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004417 	.word	0x08004417
 80043f4:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7fe f846 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 80043fc:	61f8      	str	r0, [r7, #28]
        break;
 80043fe:	e010      	b.n	8004422 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b44      	ldr	r3, [pc, #272]	; (8004514 <UART_SetConfig+0x314>)
 8004402:	61fb      	str	r3, [r7, #28]
        break;
 8004404:	e00d      	b.n	8004422 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fd ffa7 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800440a:	61f8      	str	r0, [r7, #28]
        break;
 800440c:	e009      	b.n	8004422 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	61fb      	str	r3, [r7, #28]
        break;
 8004414:	e005      	b.n	8004422 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8107 	beq.w	8004638 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	429a      	cmp	r2, r3
 8004438:	d305      	bcc.n	8004446 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800444c:	e0f4      	b.n	8004638 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2200      	movs	r2, #0
 8004452:	461c      	mov	r4, r3
 8004454:	4615      	mov	r5, r2
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	022b      	lsls	r3, r5, #8
 8004460:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004464:	0222      	lsls	r2, r4, #8
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	6849      	ldr	r1, [r1, #4]
 800446a:	0849      	lsrs	r1, r1, #1
 800446c:	2000      	movs	r0, #0
 800446e:	4688      	mov	r8, r1
 8004470:	4681      	mov	r9, r0
 8004472:	eb12 0a08 	adds.w	sl, r2, r8
 8004476:	eb43 0b09 	adc.w	fp, r3, r9
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004488:	4650      	mov	r0, sl
 800448a:	4659      	mov	r1, fp
 800448c:	f7fc fabe 	bl	8000a0c <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449e:	d308      	bcc.n	80044b2 <UART_SetConfig+0x2b2>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a6:	d204      	bcs.n	80044b2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	60da      	str	r2, [r3, #12]
 80044b0:	e0c2      	b.n	8004638 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044b8:	e0be      	b.n	8004638 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c2:	d16a      	bne.n	800459a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80044c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d834      	bhi.n	8004536 <UART_SetConfig+0x336>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x2d4>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004519 	.word	0x08004519
 80044dc:	08004521 	.word	0x08004521
 80044e0:	08004537 	.word	0x08004537
 80044e4:	08004527 	.word	0x08004527
 80044e8:	08004537 	.word	0x08004537
 80044ec:	08004537 	.word	0x08004537
 80044f0:	08004537 	.word	0x08004537
 80044f4:	0800452f 	.word	0x0800452f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7fd ffc6 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 80044fc:	61f8      	str	r0, [r7, #28]
        break;
 80044fe:	e020      	b.n	8004542 <UART_SetConfig+0x342>
 8004500:	efff69f3 	.word	0xefff69f3
 8004504:	40008000 	.word	0x40008000
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004518:	f7fd ffcc 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
 800451c:	61f8      	str	r0, [r7, #28]
        break;
 800451e:	e010      	b.n	8004542 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004520:	4b4c      	ldr	r3, [pc, #304]	; (8004654 <UART_SetConfig+0x454>)
 8004522:	61fb      	str	r3, [r7, #28]
        break;
 8004524:	e00d      	b.n	8004542 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004526:	f7fd ff17 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800452a:	61f8      	str	r0, [r7, #28]
        break;
 800452c:	e009      	b.n	8004542 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	61fb      	str	r3, [r7, #28]
        break;
 8004534:	e005      	b.n	8004542 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004540:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d077      	beq.n	8004638 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005a      	lsls	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	441a      	add	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2b0f      	cmp	r3, #15
 8004562:	d916      	bls.n	8004592 <UART_SetConfig+0x392>
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456a:	d212      	bcs.n	8004592 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f023 030f 	bic.w	r3, r3, #15
 8004574:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	b29b      	uxth	r3, r3
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	b29a      	uxth	r2, r3
 8004582:	8afb      	ldrh	r3, [r7, #22]
 8004584:	4313      	orrs	r3, r2
 8004586:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	8afa      	ldrh	r2, [r7, #22]
 800458e:	60da      	str	r2, [r3, #12]
 8004590:	e052      	b.n	8004638 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004598:	e04e      	b.n	8004638 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800459a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d827      	bhi.n	80045f2 <UART_SetConfig+0x3f2>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x3a8>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045cd 	.word	0x080045cd
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045dd 	.word	0x080045dd
 80045b4:	080045f3 	.word	0x080045f3
 80045b8:	080045e3 	.word	0x080045e3
 80045bc:	080045f3 	.word	0x080045f3
 80045c0:	080045f3 	.word	0x080045f3
 80045c4:	080045f3 	.word	0x080045f3
 80045c8:	080045eb 	.word	0x080045eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7fd ff5c 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 80045d0:	61f8      	str	r0, [r7, #28]
        break;
 80045d2:	e014      	b.n	80045fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d4:	f7fd ff6e 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
 80045d8:	61f8      	str	r0, [r7, #28]
        break;
 80045da:	e010      	b.n	80045fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045dc:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <UART_SetConfig+0x454>)
 80045de:	61fb      	str	r3, [r7, #28]
        break;
 80045e0:	e00d      	b.n	80045fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e2:	f7fd feb9 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 80045e6:	61f8      	str	r0, [r7, #28]
        break;
 80045e8:	e009      	b.n	80045fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ee:	61fb      	str	r3, [r7, #28]
        break;
 80045f0:	e005      	b.n	80045fe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045fc:	bf00      	nop
    }

    if (pclk != 0U)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d019      	beq.n	8004638 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	085a      	lsrs	r2, r3, #1
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	441a      	add	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b0f      	cmp	r3, #15
 800461c:	d909      	bls.n	8004632 <UART_SetConfig+0x432>
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d205      	bcs.n	8004632 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	e002      	b.n	8004638 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004644:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004648:	4618      	mov	r0, r3
 800464a:	3728      	adds	r7, #40	; 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004652:	bf00      	nop
 8004654:	00f42400 	.word	0x00f42400

08004658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01a      	beq.n	800476e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004756:	d10a      	bne.n	800476e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b098      	sub	sp, #96	; 0x60
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047ac:	f7fc fdc8 	bl	8001340 <HAL_GetTick>
 80047b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d12e      	bne.n	800481e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c8:	2200      	movs	r2, #0
 80047ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f88c 	bl	80048ec <UART_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d021      	beq.n	800481e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ee:	653b      	str	r3, [r7, #80]	; 0x50
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
 80047fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e062      	b.n	80048e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d149      	bne.n	80048c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800482c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004834:	2200      	movs	r2, #0
 8004836:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f856 	bl	80048ec <UART_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d03c      	beq.n	80048c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	623b      	str	r3, [r7, #32]
   return(result);
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 8004866:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800486a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e6      	bne.n	8004846 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	60fb      	str	r3, [r7, #12]
   return(result);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3308      	adds	r3, #8
 8004896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004898:	61fa      	str	r2, [r7, #28]
 800489a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	617b      	str	r3, [r7, #20]
   return(result);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e011      	b.n	80048e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3758      	adds	r7, #88	; 0x58
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fc:	e049      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d045      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fc fd1b 	bl	8001340 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <UART_WaitOnFlagUntilTimeout+0x30>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e048      	b.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d031      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b08      	cmp	r3, #8
 800493a:	d110      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2208      	movs	r2, #8
 8004942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f838 	bl	80049ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2208      	movs	r2, #8
 800494e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e029      	b.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496c:	d111      	bne.n	8004992 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f81e 	bl	80049ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e00f      	b.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4013      	ands	r3, r2
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d0a6      	beq.n	80048fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b095      	sub	sp, #84	; 0x54
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	643b      	str	r3, [r7, #64]	; 0x40
 80049e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e6      	bne.n	80049c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3308      	adds	r3, #8
 8004a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d118      	bne.n	8004a62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0310 	bic.w	r3, r3, #16
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4e:	61bb      	str	r3, [r7, #24]
 8004a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6979      	ldr	r1, [r7, #20]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e6      	bne.n	8004a30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a76:	bf00      	nop
 8004a78:	3754      	adds	r7, #84	; 0x54
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <__NVIC_SetPriority>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	6039      	str	r1, [r7, #0]
 8004aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	db0a      	blt.n	8004ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	490c      	ldr	r1, [pc, #48]	; (8004ae4 <__NVIC_SetPriority+0x4c>)
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	440b      	add	r3, r1
 8004abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ac0:	e00a      	b.n	8004ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	4908      	ldr	r1, [pc, #32]	; (8004ae8 <__NVIC_SetPriority+0x50>)
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	0112      	lsls	r2, r2, #4
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	761a      	strb	r2, [r3, #24]
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000e100 	.word	0xe000e100
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <SysTick_Handler+0x1c>)
 8004af2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004af4:	f001 fd70 	bl	80065d8 <xTaskGetSchedulerState>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d001      	beq.n	8004b02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004afe:	f002 fb5b 	bl	80071b8 <xPortSysTickHandler>
  }
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	e000e010 	.word	0xe000e010

08004b0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b10:	2100      	movs	r1, #0
 8004b12:	f06f 0004 	mvn.w	r0, #4
 8004b16:	f7ff ffbf 	bl	8004a98 <__NVIC_SetPriority>
#endif
}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b26:	f3ef 8305 	mrs	r3, IPSR
 8004b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b32:	f06f 0305 	mvn.w	r3, #5
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	e00c      	b.n	8004b54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <osKernelInitialize+0x44>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <osKernelInitialize+0x44>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	e002      	b.n	8004b54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b54:	687b      	ldr	r3, [r7, #4]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000234 	.word	0x20000234

08004b68 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8004b6e:	f001 fd33 	bl	80065d8 <xTaskGetSchedulerState>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <osKernelGetState+0x1a>
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d105      	bne.n	8004b88 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	607b      	str	r3, [r7, #4]
      break;
 8004b80:	e00c      	b.n	8004b9c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8004b82:	2303      	movs	r3, #3
 8004b84:	607b      	str	r3, [r7, #4]
      break;
 8004b86:	e009      	b.n	8004b9c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <osKernelGetState+0x40>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d102      	bne.n	8004b96 <osKernelGetState+0x2e>
        state = osKernelReady;
 8004b90:	2301      	movs	r3, #1
 8004b92:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8004b94:	e001      	b.n	8004b9a <osKernelGetState+0x32>
        state = osKernelInactive;
 8004b96:	2300      	movs	r3, #0
 8004b98:	607b      	str	r3, [r7, #4]
      break;
 8004b9a:	bf00      	nop
  }

  return (state);
 8004b9c:	687b      	ldr	r3, [r7, #4]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000234 	.word	0x20000234

08004bac <osKernelStart>:

osStatus_t osKernelStart (void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb2:	f3ef 8305 	mrs	r3, IPSR
 8004bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8004bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bbe:	f06f 0305 	mvn.w	r3, #5
 8004bc2:	607b      	str	r3, [r7, #4]
 8004bc4:	e010      	b.n	8004be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <osKernelStart+0x48>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d109      	bne.n	8004be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bce:	f7ff ff9d 	bl	8004b0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <osKernelStart+0x48>)
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bd8:	f001 f890 	bl	8005cfc <vTaskStartScheduler>
      stat = osOK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	e002      	b.n	8004be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004be8:	687b      	ldr	r3, [r7, #4]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000234 	.word	0x20000234

08004bf8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bfe:	f3ef 8305 	mrs	r3, IPSR
 8004c02:	603b      	str	r3, [r7, #0]
  return(result);
 8004c04:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004c0a:	f001 f9a3 	bl	8005f54 <xTaskGetTickCountFromISR>
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	e002      	b.n	8004c18 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004c12:	f001 f98f 	bl	8005f34 <xTaskGetTickCount>
 8004c16:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004c18:	687b      	ldr	r3, [r7, #4]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b08e      	sub	sp, #56	; 0x38
 8004c26:	af04      	add	r7, sp, #16
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c32:	f3ef 8305 	mrs	r3, IPSR
 8004c36:	617b      	str	r3, [r7, #20]
  return(result);
 8004c38:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d17e      	bne.n	8004d3c <osThreadNew+0x11a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d07b      	beq.n	8004d3c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c48:	2318      	movs	r3, #24
 8004c4a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004c50:	f04f 33ff 	mov.w	r3, #4294967295
 8004c54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d045      	beq.n	8004ce8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <osThreadNew+0x48>
        name = attr->name;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <osThreadNew+0x6e>
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2b38      	cmp	r3, #56	; 0x38
 8004c82:	d805      	bhi.n	8004c90 <osThreadNew+0x6e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <osThreadNew+0x72>
        return (NULL);
 8004c90:	2300      	movs	r3, #0
 8004c92:	e054      	b.n	8004d3e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <osThreadNew+0xa8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2ba7      	cmp	r3, #167	; 0xa7
 8004cb2:	d90a      	bls.n	8004cca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <osThreadNew+0xa8>
        mem = 1;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e010      	b.n	8004cec <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10c      	bne.n	8004cec <osThreadNew+0xca>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d108      	bne.n	8004cec <osThreadNew+0xca>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d104      	bne.n	8004cec <osThreadNew+0xca>
          mem = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e001      	b.n	8004cec <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d110      	bne.n	8004d14 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cfa:	9202      	str	r2, [sp, #8]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6a3a      	ldr	r2, [r7, #32]
 8004d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fe0b 	bl	8005924 <xTaskCreateStatic>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	e013      	b.n	8004d3c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d110      	bne.n	8004d3c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	f107 0310 	add.w	r3, r7, #16
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fe56 	bl	80059de <xTaskCreate>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d001      	beq.n	8004d3c <osThreadNew+0x11a>
            hTask = NULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d3c:	693b      	ldr	r3, [r7, #16]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3728      	adds	r7, #40	; 0x28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d4e:	f3ef 8305 	mrs	r3, IPSR
 8004d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <osDelay+0x1c>
    stat = osErrorISR;
 8004d5a:	f06f 0305 	mvn.w	r3, #5
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e007      	b.n	8004d72 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 ff91 	bl	8005c94 <vTaskDelay>
    }
  }

  return (stat);
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4a06      	ldr	r2, [pc, #24]	; (8004dac <vApplicationGetIdleTaskMemory+0x30>)
 8004d92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2280      	movs	r2, #128	; 0x80
 8004d98:	601a      	str	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000238 	.word	0x20000238
 8004dac:	200002e0 	.word	0x200002e0

08004db0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <vApplicationGetTimerTaskMemory+0x2c>)
 8004dc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a06      	ldr	r2, [pc, #24]	; (8004de0 <vApplicationGetTimerTaskMemory+0x30>)
 8004dc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dce:	601a      	str	r2, [r3, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	200004e0 	.word	0x200004e0
 8004de0:	20000588 	.word	0x20000588

08004de4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f103 0208 	add.w	r2, r3, #8
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f103 0208 	add.w	r2, r3, #8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f103 0208 	add.w	r2, r3, #8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d103      	bne.n	8004ea6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e00c      	b.n	8004ec0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	e002      	b.n	8004eb4 <vListInsert+0x2e>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d2f6      	bcs.n	8004eae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	601a      	str	r2, [r3, #0]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6892      	ldr	r2, [r2, #8]
 8004f0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6852      	ldr	r2, [r2, #4]
 8004f18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d103      	bne.n	8004f2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	1e5a      	subs	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f76:	f002 f88d 	bl	8007094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	441a      	add	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	68f9      	ldr	r1, [r7, #12]
 8004faa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	441a      	add	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	22ff      	movs	r2, #255	; 0xff
 8004fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	22ff      	movs	r2, #255	; 0xff
 8004fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d114      	bne.n	8004ff6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01a      	beq.n	800500a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 f93b 	bl	8006254 <xTaskRemoveFromEventList>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d012      	beq.n	800500a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <xQueueGenericReset+0xcc>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	e009      	b.n	800500a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fef2 	bl	8004de4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3324      	adds	r3, #36	; 0x24
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff feed 	bl	8004de4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800500a:	f002 f873 	bl	80070f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800500e:	2301      	movs	r3, #1
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08e      	sub	sp, #56	; 0x38
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800505e:	bf00      	nop
 8005060:	e7fe      	b.n	8005060 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <xQueueGenericCreateStatic+0x52>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <xQueueGenericCreateStatic+0x56>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <xQueueGenericCreateStatic+0x58>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	623b      	str	r3, [r7, #32]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <xQueueGenericCreateStatic+0x7e>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <xQueueGenericCreateStatic+0x82>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <xQueueGenericCreateStatic+0x84>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	61fb      	str	r3, [r7, #28]
}
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050ba:	2350      	movs	r3, #80	; 0x50
 80050bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b50      	cmp	r3, #80	; 0x50
 80050c2:	d00a      	beq.n	80050da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	61bb      	str	r3, [r7, #24]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80050f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f805 	bl	800510c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005104:	4618      	mov	r0, r3
 8005106:	3730      	adds	r7, #48	; 0x30
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e002      	b.n	800512e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800513a:	2101      	movs	r1, #1
 800513c:	69b8      	ldr	r0, [r7, #24]
 800513e:	f7ff ff05 	bl	8004f4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08e      	sub	sp, #56	; 0x38
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005162:	2300      	movs	r3, #0
 8005164:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xQueueGenericSend+0x32>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d103      	bne.n	8005194 <xQueueGenericSend+0x40>
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <xQueueGenericSend+0x44>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <xQueueGenericSend+0x46>
 8005198:	2300      	movs	r3, #0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <xQueueGenericSend+0x60>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d103      	bne.n	80051c2 <xQueueGenericSend+0x6e>
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <xQueueGenericSend+0x72>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueGenericSend+0x74>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	623b      	str	r3, [r7, #32]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051e2:	f001 f9f9 	bl	80065d8 <xTaskGetSchedulerState>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d102      	bne.n	80051f2 <xQueueGenericSend+0x9e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <xQueueGenericSend+0xa2>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <xQueueGenericSend+0xa4>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueGenericSend+0xbe>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	61fb      	str	r3, [r7, #28]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005212:	f001 ff3f 	bl	8007094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <xQueueGenericSend+0xd4>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d129      	bne.n	800527c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522e:	f000 fa0b 	bl	8005648 <prvCopyDataToQueue>
 8005232:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d010      	beq.n	800525e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	3324      	adds	r3, #36	; 0x24
 8005240:	4618      	mov	r0, r3
 8005242:	f001 f807 	bl	8006254 <xTaskRemoveFromEventList>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d013      	beq.n	8005274 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800524c:	4b3f      	ldr	r3, [pc, #252]	; (800534c <xQueueGenericSend+0x1f8>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	e00a      	b.n	8005274 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005264:	4b39      	ldr	r3, [pc, #228]	; (800534c <xQueueGenericSend+0x1f8>)
 8005266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005274:	f001 ff3e 	bl	80070f4 <vPortExitCritical>
				return pdPASS;
 8005278:	2301      	movs	r3, #1
 800527a:	e063      	b.n	8005344 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005282:	f001 ff37 	bl	80070f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005286:	2300      	movs	r3, #0
 8005288:	e05c      	b.n	8005344 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005290:	f107 0314 	add.w	r3, r7, #20
 8005294:	4618      	mov	r0, r3
 8005296:	f001 f841 	bl	800631c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800529a:	2301      	movs	r3, #1
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800529e:	f001 ff29 	bl	80070f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052a2:	f000 fd9b 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052a6:	f001 fef5 	bl	8007094 <vPortEnterCritical>
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b0:	b25b      	sxtb	r3, r3
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d103      	bne.n	80052c0 <xQueueGenericSend+0x16c>
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c6:	b25b      	sxtb	r3, r3
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d103      	bne.n	80052d6 <xQueueGenericSend+0x182>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d6:	f001 ff0d 	bl	80070f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052da:	1d3a      	adds	r2, r7, #4
 80052dc:	f107 0314 	add.w	r3, r7, #20
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 f830 	bl	8006348 <xTaskCheckForTimeOut>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d124      	bne.n	8005338 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052f0:	f000 faa2 	bl	8005838 <prvIsQueueFull>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d018      	beq.n	800532c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	3310      	adds	r3, #16
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f000 ff56 	bl	80061b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800530a:	f000 fa2d 	bl	8005768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800530e:	f000 fd73 	bl	8005df8 <xTaskResumeAll>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f af7c 	bne.w	8005212 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <xQueueGenericSend+0x1f8>)
 800531c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	e772      	b.n	8005212 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800532c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800532e:	f000 fa1b 	bl	8005768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005332:	f000 fd61 	bl	8005df8 <xTaskResumeAll>
 8005336:	e76c      	b.n	8005212 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800533a:	f000 fa15 	bl	8005768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800533e:	f000 fd5b 	bl	8005df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005342:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005344:	4618      	mov	r0, r3
 8005346:	3738      	adds	r7, #56	; 0x38
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b090      	sub	sp, #64	; 0x40
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <xQueueGenericSendFromISR+0x3c>
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <xQueueGenericSendFromISR+0x40>
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <xQueueGenericSendFromISR+0x42>
 8005390:	2300      	movs	r3, #0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d103      	bne.n	80053ba <xQueueGenericSendFromISR+0x6a>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <xQueueGenericSendFromISR+0x6e>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <xQueueGenericSendFromISR+0x70>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	623b      	str	r3, [r7, #32]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053da:	f001 ff3d 	bl	8007258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053de:	f3ef 8211 	mrs	r2, BASEPRI
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	61fa      	str	r2, [r7, #28]
 80053f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <xQueueGenericSendFromISR+0xbc>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d12f      	bne.n	800546c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005422:	f000 f911 	bl	8005648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005426:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d112      	bne.n	8005456 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	d016      	beq.n	8005466 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	3324      	adds	r3, #36	; 0x24
 800543c:	4618      	mov	r0, r3
 800543e:	f000 ff09 	bl	8006254 <xTaskRemoveFromEventList>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e007      	b.n	8005466 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005456:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800545a:	3301      	adds	r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	b25a      	sxtb	r2, r3
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005466:	2301      	movs	r3, #1
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800546a:	e001      	b.n	8005470 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800546c:	2300      	movs	r3, #0
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800547a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800547e:	4618      	mov	r0, r3
 8005480:	3740      	adds	r7, #64	; 0x40
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08c      	sub	sp, #48	; 0x30
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005494:	2300      	movs	r3, #0
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <xQueueReceive+0x30>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	623b      	str	r3, [r7, #32]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <xQueueReceive+0x3e>
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <xQueueReceive+0x42>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <xQueueReceive+0x44>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xQueueReceive+0x5e>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	61fb      	str	r3, [r7, #28]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054e6:	f001 f877 	bl	80065d8 <xTaskGetSchedulerState>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <xQueueReceive+0x6e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <xQueueReceive+0x72>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <xQueueReceive+0x74>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xQueueReceive+0x8e>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	61bb      	str	r3, [r7, #24]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005516:	f001 fdbd 	bl	8007094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01f      	beq.n	8005566 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552a:	f000 f8f7 	bl	800571c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	1e5a      	subs	r2, r3, #1
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00f      	beq.n	800555e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	3310      	adds	r3, #16
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fe86 	bl	8006254 <xTaskRemoveFromEventList>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800554e:	4b3d      	ldr	r3, [pc, #244]	; (8005644 <xQueueReceive+0x1bc>)
 8005550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800555e:	f001 fdc9 	bl	80070f4 <vPortExitCritical>
				return pdPASS;
 8005562:	2301      	movs	r3, #1
 8005564:	e069      	b.n	800563a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d103      	bne.n	8005574 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800556c:	f001 fdc2 	bl	80070f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005570:	2300      	movs	r3, #0
 8005572:	e062      	b.n	800563a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800557a:	f107 0310 	add.w	r3, r7, #16
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fecc 	bl	800631c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005584:	2301      	movs	r3, #1
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005588:	f001 fdb4 	bl	80070f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800558c:	f000 fc26 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005590:	f001 fd80 	bl	8007094 <vPortEnterCritical>
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800559a:	b25b      	sxtb	r3, r3
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d103      	bne.n	80055aa <xQueueReceive+0x122>
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b0:	b25b      	sxtb	r3, r3
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d103      	bne.n	80055c0 <xQueueReceive+0x138>
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c0:	f001 fd98 	bl	80070f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055c4:	1d3a      	adds	r2, r7, #4
 80055c6:	f107 0310 	add.w	r3, r7, #16
 80055ca:	4611      	mov	r1, r2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 febb 	bl	8006348 <xTaskCheckForTimeOut>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d123      	bne.n	8005620 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055da:	f000 f917 	bl	800580c <prvIsQueueEmpty>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d017      	beq.n	8005614 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	3324      	adds	r3, #36	; 0x24
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	4611      	mov	r1, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fde1 	bl	80061b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f4:	f000 f8b8 	bl	8005768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055f8:	f000 fbfe 	bl	8005df8 <xTaskResumeAll>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d189      	bne.n	8005516 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <xQueueReceive+0x1bc>)
 8005604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	e780      	b.n	8005516 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005616:	f000 f8a7 	bl	8005768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800561a:	f000 fbed 	bl	8005df8 <xTaskResumeAll>
 800561e:	e77a      	b.n	8005516 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005622:	f000 f8a1 	bl	8005768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005626:	f000 fbe7 	bl	8005df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800562a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562c:	f000 f8ee 	bl	800580c <prvIsQueueEmpty>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	f43f af6f 	beq.w	8005516 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800563a:	4618      	mov	r0, r3
 800563c:	3730      	adds	r7, #48	; 0x30
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d14d      	bne.n	800570a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 ffce 	bl	8006614 <xTaskPriorityDisinherit>
 8005678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	e043      	b.n	800570a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d119      	bne.n	80056bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6858      	ldr	r0, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	461a      	mov	r2, r3
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	f003 f98a 	bl	80089ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	441a      	add	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d32b      	bcc.n	800570a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	e026      	b.n	800570a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68d8      	ldr	r0, [r3, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	461a      	mov	r2, r3
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	f003 f970 	bl	80089ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	425b      	negs	r3, r3
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d207      	bcs.n	80056f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	425b      	negs	r3, r3
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d105      	bne.n	800570a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	3b01      	subs	r3, #1
 8005708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005712:	697b      	ldr	r3, [r7, #20]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	441a      	add	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	d303      	bcc.n	8005750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68d9      	ldr	r1, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	461a      	mov	r2, r3
 800575a:	6838      	ldr	r0, [r7, #0]
 800575c:	f003 f926 	bl	80089ac <memcpy>
	}
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005770:	f001 fc90 	bl	8007094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800577a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800577c:	e011      	b.n	80057a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3324      	adds	r3, #36	; 0x24
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fd62 	bl	8006254 <xTaskRemoveFromEventList>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005796:	f000 fe39 	bl	800640c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	3b01      	subs	r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	dce9      	bgt.n	800577e <prvUnlockQueue+0x16>
 80057aa:	e000      	b.n	80057ae <prvUnlockQueue+0x46>
					break;
 80057ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80057b6:	f001 fc9d 	bl	80070f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057ba:	f001 fc6b 	bl	8007094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057c6:	e011      	b.n	80057ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d012      	beq.n	80057f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3310      	adds	r3, #16
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fd3d 	bl	8006254 <xTaskRemoveFromEventList>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057e0:	f000 fe14 	bl	800640c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	dce9      	bgt.n	80057c8 <prvUnlockQueue+0x60>
 80057f4:	e000      	b.n	80057f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005800:	f001 fc78 	bl	80070f4 <vPortExitCritical>
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005814:	f001 fc3e 	bl	8007094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e001      	b.n	800582a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800582a:	f001 fc63 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005840:	f001 fc28 	bl	8007094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584c:	429a      	cmp	r2, r3
 800584e:	d102      	bne.n	8005856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e001      	b.n	800585a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800585a:	f001 fc4b 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e014      	b.n	80058a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005878:	4a0f      	ldr	r2, [pc, #60]	; (80058b8 <vQueueAddToRegistry+0x50>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005884:	490c      	ldr	r1, [pc, #48]	; (80058b8 <vQueueAddToRegistry+0x50>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800588e:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <vQueueAddToRegistry+0x50>)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4413      	add	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800589a:	e006      	b.n	80058aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b07      	cmp	r3, #7
 80058a6:	d9e7      	bls.n	8005878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000988 	.word	0x20000988

080058bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058cc:	f001 fbe2 	bl	8007094 <vPortEnterCritical>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058d6:	b25b      	sxtb	r3, r3
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d103      	bne.n	80058e6 <vQueueWaitForMessageRestricted+0x2a>
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ec:	b25b      	sxtb	r3, r3
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d103      	bne.n	80058fc <vQueueWaitForMessageRestricted+0x40>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058fc:	f001 fbfa 	bl	80070f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3324      	adds	r3, #36	; 0x24
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fc73 	bl	80061fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7ff ff26 	bl	8005768 <prvUnlockQueue>
	}
 800591c:	bf00      	nop
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08e      	sub	sp, #56	; 0x38
 8005928:	af04      	add	r7, sp, #16
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	623b      	str	r3, [r7, #32]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <xTaskCreateStatic+0x46>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	61fb      	str	r3, [r7, #28]
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800596a:	23a8      	movs	r3, #168	; 0xa8
 800596c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2ba8      	cmp	r3, #168	; 0xa8
 8005972:	d00a      	beq.n	800598a <xTaskCreateStatic+0x66>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	61bb      	str	r3, [r7, #24]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800598a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01e      	beq.n	80059d0 <xTaskCreateStatic+0xac>
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01b      	beq.n	80059d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059aa:	2300      	movs	r3, #0
 80059ac:	9303      	str	r3, [sp, #12]
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	9302      	str	r3, [sp, #8]
 80059b2:	f107 0314 	add.w	r3, r7, #20
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f850 	bl	8005a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059ca:	f000 f8f3 	bl	8005bb4 <prvAddNewTaskToReadyList>
 80059ce:	e001      	b.n	80059d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059d4:	697b      	ldr	r3, [r7, #20]
	}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3728      	adds	r7, #40	; 0x28
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b08c      	sub	sp, #48	; 0x30
 80059e2:	af04      	add	r7, sp, #16
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 fc70 	bl	80072d8 <pvPortMalloc>
 80059f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00e      	beq.n	8005a1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a00:	20a8      	movs	r0, #168	; 0xa8
 8005a02:	f001 fc69 	bl	80072d8 <pvPortMalloc>
 8005a06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
 8005a14:	e005      	b.n	8005a22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a16:	6978      	ldr	r0, [r7, #20]
 8005a18:	f001 fd2a 	bl	8007470 <vPortFree>
 8005a1c:	e001      	b.n	8005a22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d017      	beq.n	8005a58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a30:	88fa      	ldrh	r2, [r7, #6]
 8005a32:	2300      	movs	r3, #0
 8005a34:	9303      	str	r3, [sp, #12]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f80e 	bl	8005a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a4c:	69f8      	ldr	r0, [r7, #28]
 8005a4e:	f000 f8b1 	bl	8005bb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a52:	2301      	movs	r3, #1
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e002      	b.n	8005a5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
	}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	461a      	mov	r2, r3
 8005a80:	21a5      	movs	r1, #165	; 0xa5
 8005a82:	f002 ff0e 	bl	80088a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a90:	3b01      	subs	r3, #1
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	617b      	str	r3, [r7, #20]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01f      	beq.n	8005b06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	e012      	b.n	8005af2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	7819      	ldrb	r1, [r3, #0]
 8005ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	3334      	adds	r3, #52	; 0x34
 8005adc:	460a      	mov	r2, r1
 8005ade:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d006      	beq.n	8005afa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2b0f      	cmp	r3, #15
 8005af6:	d9e9      	bls.n	8005acc <prvInitialiseNewTask+0x64>
 8005af8:	e000      	b.n	8005afc <prvInitialiseNewTask+0x94>
			{
				break;
 8005afa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b04:	e003      	b.n	8005b0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	2b37      	cmp	r3, #55	; 0x37
 8005b12:	d901      	bls.n	8005b18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b14:	2337      	movs	r3, #55	; 0x37
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	2200      	movs	r2, #0
 8005b28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff f978 	bl	8004e24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	3318      	adds	r3, #24
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff f973 	bl	8004e24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	3354      	adds	r3, #84	; 0x54
 8005b68:	224c      	movs	r2, #76	; 0x4c
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f002 fe98 	bl	80088a2 <memset>
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <prvInitialiseNewTask+0x140>)
 8005b76:	659a      	str	r2, [r3, #88]	; 0x58
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	4a0c      	ldr	r2, [pc, #48]	; (8005bac <prvInitialiseNewTask+0x144>)
 8005b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	4a0b      	ldr	r2, [pc, #44]	; (8005bb0 <prvInitialiseNewTask+0x148>)
 8005b82:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	69b8      	ldr	r0, [r7, #24]
 8005b8a:	f001 f953 	bl	8006e34 <pxPortInitialiseStack>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba0:	bf00      	nop
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20001e24 	.word	0x20001e24
 8005bac:	20001e8c 	.word	0x20001e8c
 8005bb0:	20001ef4 	.word	0x20001ef4

08005bb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bbc:	f001 fa6a 	bl	8007094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bc0:	4b2d      	ldr	r3, [pc, #180]	; (8005c78 <prvAddNewTaskToReadyList+0xc4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	4a2c      	ldr	r2, [pc, #176]	; (8005c78 <prvAddNewTaskToReadyList+0xc4>)
 8005bc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bca:	4b2c      	ldr	r3, [pc, #176]	; (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bd2:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bd8:	4b27      	ldr	r3, [pc, #156]	; (8005c78 <prvAddNewTaskToReadyList+0xc4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d110      	bne.n	8005c02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005be0:	f000 fc38 	bl	8006454 <prvInitialiseTaskLists>
 8005be4:	e00d      	b.n	8005c02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <prvAddNewTaskToReadyList+0xcc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bee:	4b23      	ldr	r3, [pc, #140]	; (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d802      	bhi.n	8005c02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bfc:	4a1f      	ldr	r2, [pc, #124]	; (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c02:	4b20      	ldr	r3, [pc, #128]	; (8005c84 <prvAddNewTaskToReadyList+0xd0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <prvAddNewTaskToReadyList+0xd0>)
 8005c0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <prvAddNewTaskToReadyList+0xd0>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <prvAddNewTaskToReadyList+0xd4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d903      	bls.n	8005c28 <prvAddNewTaskToReadyList+0x74>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	4a18      	ldr	r2, [pc, #96]	; (8005c88 <prvAddNewTaskToReadyList+0xd4>)
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <prvAddNewTaskToReadyList+0xd8>)
 8005c36:	441a      	add	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f7ff f8fd 	bl	8004e3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c44:	f001 fa56 	bl	80070f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <prvAddNewTaskToReadyList+0xcc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00e      	beq.n	8005c6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d207      	bcs.n	8005c6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <prvAddNewTaskToReadyList+0xdc>)
 8005c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000e9c 	.word	0x20000e9c
 8005c7c:	200009c8 	.word	0x200009c8
 8005c80:	20000ea8 	.word	0x20000ea8
 8005c84:	20000eb8 	.word	0x20000eb8
 8005c88:	20000ea4 	.word	0x20000ea4
 8005c8c:	200009cc 	.word	0x200009cc
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d017      	beq.n	8005cd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ca6:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <vTaskDelay+0x60>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <vTaskDelay+0x30>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60bb      	str	r3, [r7, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005cc4:	f000 f88a 	bl	8005ddc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fd10 	bl	80066f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cd0:	f000 f892 	bl	8005df8 <xTaskResumeAll>
 8005cd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d107      	bne.n	8005cec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <vTaskDelay+0x64>)
 8005cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20000ec4 	.word	0x20000ec4
 8005cf8:	e000ed04 	.word	0xe000ed04

08005cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d0a:	463a      	mov	r2, r7
 8005d0c:	1d39      	adds	r1, r7, #4
 8005d0e:	f107 0308 	add.w	r3, r7, #8
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff f832 	bl	8004d7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	9202      	str	r2, [sp, #8]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	2300      	movs	r3, #0
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2300      	movs	r3, #0
 8005d28:	460a      	mov	r2, r1
 8005d2a:	4924      	ldr	r1, [pc, #144]	; (8005dbc <vTaskStartScheduler+0xc0>)
 8005d2c:	4824      	ldr	r0, [pc, #144]	; (8005dc0 <vTaskStartScheduler+0xc4>)
 8005d2e:	f7ff fdf9 	bl	8005924 <xTaskCreateStatic>
 8005d32:	4603      	mov	r3, r0
 8005d34:	4a23      	ldr	r2, [pc, #140]	; (8005dc4 <vTaskStartScheduler+0xc8>)
 8005d36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d38:	4b22      	ldr	r3, [pc, #136]	; (8005dc4 <vTaskStartScheduler+0xc8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d40:	2301      	movs	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	e001      	b.n	8005d4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d102      	bne.n	8005d56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d50:	f000 fd22 	bl	8006798 <xTimerCreateTimerTask>
 8005d54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d11b      	bne.n	8005d94 <vTaskStartScheduler+0x98>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	613b      	str	r3, [r7, #16]
}
 8005d6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d70:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <vTaskStartScheduler+0xcc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3354      	adds	r3, #84	; 0x54
 8005d76:	4a15      	ldr	r2, [pc, #84]	; (8005dcc <vTaskStartScheduler+0xd0>)
 8005d78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <vTaskStartScheduler+0xd4>)
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d82:	4b14      	ldr	r3, [pc, #80]	; (8005dd4 <vTaskStartScheduler+0xd8>)
 8005d84:	2201      	movs	r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d88:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <vTaskStartScheduler+0xdc>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d8e:	f001 f8df 	bl	8006f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d92:	e00e      	b.n	8005db2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d10a      	bne.n	8005db2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	60fb      	str	r3, [r7, #12]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <vTaskStartScheduler+0xb4>
}
 8005db2:	bf00      	nop
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	08008a9c 	.word	0x08008a9c
 8005dc0:	08006425 	.word	0x08006425
 8005dc4:	20000ec0 	.word	0x20000ec0
 8005dc8:	200009c8 	.word	0x200009c8
 8005dcc:	2000007c 	.word	0x2000007c
 8005dd0:	20000ebc 	.word	0x20000ebc
 8005dd4:	20000ea8 	.word	0x20000ea8
 8005dd8:	20000ea0 	.word	0x20000ea0

08005ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005de0:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <vTaskSuspendAll+0x18>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	4a03      	ldr	r2, [pc, #12]	; (8005df4 <vTaskSuspendAll+0x18>)
 8005de8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	20000ec4 	.word	0x20000ec4

08005df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e06:	4b42      	ldr	r3, [pc, #264]	; (8005f10 <xTaskResumeAll+0x118>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	603b      	str	r3, [r7, #0]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e24:	f001 f936 	bl	8007094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e28:	4b39      	ldr	r3, [pc, #228]	; (8005f10 <xTaskResumeAll+0x118>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	4a38      	ldr	r2, [pc, #224]	; (8005f10 <xTaskResumeAll+0x118>)
 8005e30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e32:	4b37      	ldr	r3, [pc, #220]	; (8005f10 <xTaskResumeAll+0x118>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d162      	bne.n	8005f00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e3a:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <xTaskResumeAll+0x11c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d05e      	beq.n	8005f00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e42:	e02f      	b.n	8005ea4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e44:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <xTaskResumeAll+0x120>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3318      	adds	r3, #24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff f851 	bl	8004ef8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff f84c 	bl	8004ef8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	4b2d      	ldr	r3, [pc, #180]	; (8005f1c <xTaskResumeAll+0x124>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d903      	bls.n	8005e74 <xTaskResumeAll+0x7c>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	4a2a      	ldr	r2, [pc, #168]	; (8005f1c <xTaskResumeAll+0x124>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a27      	ldr	r2, [pc, #156]	; (8005f20 <xTaskResumeAll+0x128>)
 8005e82:	441a      	add	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe ffd7 	bl	8004e3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	4b23      	ldr	r3, [pc, #140]	; (8005f24 <xTaskResumeAll+0x12c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d302      	bcc.n	8005ea4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005e9e:	4b22      	ldr	r3, [pc, #136]	; (8005f28 <xTaskResumeAll+0x130>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ea4:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <xTaskResumeAll+0x120>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1cb      	bne.n	8005e44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005eb2:	f000 fb71 	bl	8006598 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005eb6:	4b1d      	ldr	r3, [pc, #116]	; (8005f2c <xTaskResumeAll+0x134>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d010      	beq.n	8005ee4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ec2:	f000 f859 	bl	8005f78 <xTaskIncrementTick>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ecc:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <xTaskResumeAll+0x130>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f1      	bne.n	8005ec2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005ede:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <xTaskResumeAll+0x134>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ee4:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <xTaskResumeAll+0x130>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005eec:	2301      	movs	r3, #1
 8005eee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <xTaskResumeAll+0x138>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f00:	f001 f8f8 	bl	80070f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f04:	68bb      	ldr	r3, [r7, #8]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000ec4 	.word	0x20000ec4
 8005f14:	20000e9c 	.word	0x20000e9c
 8005f18:	20000e5c 	.word	0x20000e5c
 8005f1c:	20000ea4 	.word	0x20000ea4
 8005f20:	200009cc 	.word	0x200009cc
 8005f24:	200009c8 	.word	0x200009c8
 8005f28:	20000eb0 	.word	0x20000eb0
 8005f2c:	20000eac 	.word	0x20000eac
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <xTaskGetTickCount+0x1c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f40:	687b      	ldr	r3, [r7, #4]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000ea0 	.word	0x20000ea0

08005f54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f5a:	f001 f97d 	bl	8007258 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005f62:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <xTaskGetTickCountFromISR+0x20>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f68:	683b      	ldr	r3, [r7, #0]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000ea0 	.word	0x20000ea0

08005f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f82:	4b4f      	ldr	r3, [pc, #316]	; (80060c0 <xTaskIncrementTick+0x148>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 808f 	bne.w	80060aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f8c:	4b4d      	ldr	r3, [pc, #308]	; (80060c4 <xTaskIncrementTick+0x14c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f94:	4a4b      	ldr	r2, [pc, #300]	; (80060c4 <xTaskIncrementTick+0x14c>)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d120      	bne.n	8005fe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fa0:	4b49      	ldr	r3, [pc, #292]	; (80060c8 <xTaskIncrementTick+0x150>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	603b      	str	r3, [r7, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <xTaskIncrementTick+0x46>
 8005fc0:	4b41      	ldr	r3, [pc, #260]	; (80060c8 <xTaskIncrementTick+0x150>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	4b41      	ldr	r3, [pc, #260]	; (80060cc <xTaskIncrementTick+0x154>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3f      	ldr	r2, [pc, #252]	; (80060c8 <xTaskIncrementTick+0x150>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4a3f      	ldr	r2, [pc, #252]	; (80060cc <xTaskIncrementTick+0x154>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	4b3e      	ldr	r3, [pc, #248]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	4a3d      	ldr	r2, [pc, #244]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	f000 fadb 	bl	8006598 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fe2:	4b3c      	ldr	r3, [pc, #240]	; (80060d4 <xTaskIncrementTick+0x15c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d349      	bcc.n	8006080 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fec:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <xTaskIncrementTick+0x150>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d104      	bne.n	8006000 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff6:	4b37      	ldr	r3, [pc, #220]	; (80060d4 <xTaskIncrementTick+0x15c>)
 8005ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffc:	601a      	str	r2, [r3, #0]
					break;
 8005ffe:	e03f      	b.n	8006080 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006000:	4b31      	ldr	r3, [pc, #196]	; (80060c8 <xTaskIncrementTick+0x150>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d203      	bcs.n	8006020 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006018:	4a2e      	ldr	r2, [pc, #184]	; (80060d4 <xTaskIncrementTick+0x15c>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800601e:	e02f      	b.n	8006080 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	3304      	adds	r3, #4
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe ff67 	bl	8004ef8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	3318      	adds	r3, #24
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe ff5e 	bl	8004ef8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b25      	ldr	r3, [pc, #148]	; (80060d8 <xTaskIncrementTick+0x160>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d903      	bls.n	8006050 <xTaskIncrementTick+0xd8>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a22      	ldr	r2, [pc, #136]	; (80060d8 <xTaskIncrementTick+0x160>)
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <xTaskIncrementTick+0x164>)
 800605e:	441a      	add	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7fe fee9 	bl	8004e3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006070:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <xTaskIncrementTick+0x168>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	429a      	cmp	r2, r3
 8006078:	d3b8      	bcc.n	8005fec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800607e:	e7b5      	b.n	8005fec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006080:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <xTaskIncrementTick+0x168>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006086:	4915      	ldr	r1, [pc, #84]	; (80060dc <xTaskIncrementTick+0x164>)
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d901      	bls.n	800609c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800609c:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <xTaskIncrementTick+0x16c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80060a4:	2301      	movs	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e004      	b.n	80060b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060aa:	4b0f      	ldr	r3, [pc, #60]	; (80060e8 <xTaskIncrementTick+0x170>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	4a0d      	ldr	r2, [pc, #52]	; (80060e8 <xTaskIncrementTick+0x170>)
 80060b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060b4:	697b      	ldr	r3, [r7, #20]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000ec4 	.word	0x20000ec4
 80060c4:	20000ea0 	.word	0x20000ea0
 80060c8:	20000e54 	.word	0x20000e54
 80060cc:	20000e58 	.word	0x20000e58
 80060d0:	20000eb4 	.word	0x20000eb4
 80060d4:	20000ebc 	.word	0x20000ebc
 80060d8:	20000ea4 	.word	0x20000ea4
 80060dc:	200009cc 	.word	0x200009cc
 80060e0:	200009c8 	.word	0x200009c8
 80060e4:	20000eb0 	.word	0x20000eb0
 80060e8:	20000eac 	.word	0x20000eac

080060ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060f2:	4b2a      	ldr	r3, [pc, #168]	; (800619c <vTaskSwitchContext+0xb0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060fa:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <vTaskSwitchContext+0xb4>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006100:	e046      	b.n	8006190 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006102:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <vTaskSwitchContext+0xb4>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006108:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <vTaskSwitchContext+0xb8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e010      	b.n	8006132 <vTaskSwitchContext+0x46>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <vTaskSwitchContext+0x40>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	607b      	str	r3, [r7, #4]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <vTaskSwitchContext+0x3e>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3b01      	subs	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	491d      	ldr	r1, [pc, #116]	; (80061a8 <vTaskSwitchContext+0xbc>)
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	440b      	add	r3, r1
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0e4      	beq.n	8006110 <vTaskSwitchContext+0x24>
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <vTaskSwitchContext+0xbc>)
 8006152:	4413      	add	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	3308      	adds	r3, #8
 8006168:	429a      	cmp	r2, r3
 800616a:	d104      	bne.n	8006176 <vTaskSwitchContext+0x8a>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a0b      	ldr	r2, [pc, #44]	; (80061ac <vTaskSwitchContext+0xc0>)
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <vTaskSwitchContext+0xb8>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <vTaskSwitchContext+0xc0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3354      	adds	r3, #84	; 0x54
 800618c:	4a08      	ldr	r2, [pc, #32]	; (80061b0 <vTaskSwitchContext+0xc4>)
 800618e:	6013      	str	r3, [r2, #0]
}
 8006190:	bf00      	nop
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20000ec4 	.word	0x20000ec4
 80061a0:	20000eb0 	.word	0x20000eb0
 80061a4:	20000ea4 	.word	0x20000ea4
 80061a8:	200009cc 	.word	0x200009cc
 80061ac:	200009c8 	.word	0x200009c8
 80061b0:	2000007c 	.word	0x2000007c

080061b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	60fb      	str	r3, [r7, #12]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <vTaskPlaceOnEventList+0x44>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3318      	adds	r3, #24
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fe fe4f 	bl	8004e86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061e8:	2101      	movs	r1, #1
 80061ea:	6838      	ldr	r0, [r7, #0]
 80061ec:	f000 fa80 	bl	80066f0 <prvAddCurrentTaskToDelayedList>
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	200009c8 	.word	0x200009c8

080061fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	617b      	str	r3, [r7, #20]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <vTaskPlaceOnEventListRestricted+0x54>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3318      	adds	r3, #24
 800622a:	4619      	mov	r1, r3
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7fe fe06 	bl	8004e3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006238:	f04f 33ff 	mov.w	r3, #4294967295
 800623c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	68b8      	ldr	r0, [r7, #8]
 8006242:	f000 fa55 	bl	80066f0 <prvAddCurrentTaskToDelayedList>
	}
 8006246:	bf00      	nop
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	200009c8 	.word	0x200009c8

08006254 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60fb      	str	r3, [r7, #12]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	3318      	adds	r3, #24
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fe37 	bl	8004ef8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800628a:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <xTaskRemoveFromEventList+0xb0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d11d      	bne.n	80062ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	3304      	adds	r3, #4
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fe2e 	bl	8004ef8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a0:	4b19      	ldr	r3, [pc, #100]	; (8006308 <xTaskRemoveFromEventList+0xb4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d903      	bls.n	80062b0 <xTaskRemoveFromEventList+0x5c>
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	4a16      	ldr	r2, [pc, #88]	; (8006308 <xTaskRemoveFromEventList+0xb4>)
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4a13      	ldr	r2, [pc, #76]	; (800630c <xTaskRemoveFromEventList+0xb8>)
 80062be:	441a      	add	r2, r3
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f7fe fdb9 	bl	8004e3e <vListInsertEnd>
 80062cc:	e005      	b.n	80062da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	3318      	adds	r3, #24
 80062d2:	4619      	mov	r1, r3
 80062d4:	480e      	ldr	r0, [pc, #56]	; (8006310 <xTaskRemoveFromEventList+0xbc>)
 80062d6:	f7fe fdb2 	bl	8004e3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <xTaskRemoveFromEventList+0xc0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d905      	bls.n	80062f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <xTaskRemoveFromEventList+0xc4>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e001      	b.n	80062f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062f8:	697b      	ldr	r3, [r7, #20]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000ec4 	.word	0x20000ec4
 8006308:	20000ea4 	.word	0x20000ea4
 800630c:	200009cc 	.word	0x200009cc
 8006310:	20000e5c 	.word	0x20000e5c
 8006314:	200009c8 	.word	0x200009c8
 8006318:	20000eb0 	.word	0x20000eb0

0800631c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <vTaskInternalSetTimeOutState+0x24>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <vTaskInternalSetTimeOutState+0x28>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	605a      	str	r2, [r3, #4]
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	20000eb4 	.word	0x20000eb4
 8006344:	20000ea0 	.word	0x20000ea0

08006348 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	613b      	str	r3, [r7, #16]
}
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	60fb      	str	r3, [r7, #12]
}
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800638a:	f000 fe83 	bl	8007094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800638e:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <xTaskCheckForTimeOut+0xbc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a6:	d102      	bne.n	80063ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	e023      	b.n	80063f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b15      	ldr	r3, [pc, #84]	; (8006408 <xTaskCheckForTimeOut+0xc0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d007      	beq.n	80063ca <xTaskCheckForTimeOut+0x82>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d302      	bcc.n	80063ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e015      	b.n	80063f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d20b      	bcs.n	80063ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	1ad2      	subs	r2, r2, r3
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff ff9b 	bl	800631c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e004      	b.n	80063f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063f2:	2301      	movs	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063f6:	f000 fe7d 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 80063fa:	69fb      	ldr	r3, [r7, #28]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3720      	adds	r7, #32
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	20000ea0 	.word	0x20000ea0
 8006408:	20000eb4 	.word	0x20000eb4

0800640c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006410:	4b03      	ldr	r3, [pc, #12]	; (8006420 <vTaskMissedYield+0x14>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
}
 8006416:	bf00      	nop
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20000eb0 	.word	0x20000eb0

08006424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800642c:	f000 f852 	bl	80064d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <prvIdleTask+0x28>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d9f9      	bls.n	800642c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <prvIdleTask+0x2c>)
 800643a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006448:	e7f0      	b.n	800642c <prvIdleTask+0x8>
 800644a:	bf00      	nop
 800644c:	200009cc 	.word	0x200009cc
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	e00c      	b.n	800647a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4a12      	ldr	r2, [pc, #72]	; (80064b4 <prvInitialiseTaskLists+0x60>)
 800646c:	4413      	add	r3, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fcb8 	bl	8004de4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3301      	adds	r3, #1
 8006478:	607b      	str	r3, [r7, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b37      	cmp	r3, #55	; 0x37
 800647e:	d9ef      	bls.n	8006460 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006480:	480d      	ldr	r0, [pc, #52]	; (80064b8 <prvInitialiseTaskLists+0x64>)
 8006482:	f7fe fcaf 	bl	8004de4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006486:	480d      	ldr	r0, [pc, #52]	; (80064bc <prvInitialiseTaskLists+0x68>)
 8006488:	f7fe fcac 	bl	8004de4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800648c:	480c      	ldr	r0, [pc, #48]	; (80064c0 <prvInitialiseTaskLists+0x6c>)
 800648e:	f7fe fca9 	bl	8004de4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006492:	480c      	ldr	r0, [pc, #48]	; (80064c4 <prvInitialiseTaskLists+0x70>)
 8006494:	f7fe fca6 	bl	8004de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006498:	480b      	ldr	r0, [pc, #44]	; (80064c8 <prvInitialiseTaskLists+0x74>)
 800649a:	f7fe fca3 	bl	8004de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <prvInitialiseTaskLists+0x78>)
 80064a0:	4a05      	ldr	r2, [pc, #20]	; (80064b8 <prvInitialiseTaskLists+0x64>)
 80064a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064a4:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <prvInitialiseTaskLists+0x7c>)
 80064a6:	4a05      	ldr	r2, [pc, #20]	; (80064bc <prvInitialiseTaskLists+0x68>)
 80064a8:	601a      	str	r2, [r3, #0]
}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200009cc 	.word	0x200009cc
 80064b8:	20000e2c 	.word	0x20000e2c
 80064bc:	20000e40 	.word	0x20000e40
 80064c0:	20000e5c 	.word	0x20000e5c
 80064c4:	20000e70 	.word	0x20000e70
 80064c8:	20000e88 	.word	0x20000e88
 80064cc:	20000e54 	.word	0x20000e54
 80064d0:	20000e58 	.word	0x20000e58

080064d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064da:	e019      	b.n	8006510 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064dc:	f000 fdda 	bl	8007094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <prvCheckTasksWaitingTermination+0x50>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe fd03 	bl	8004ef8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064f2:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <prvCheckTasksWaitingTermination+0x54>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	4a0b      	ldr	r2, [pc, #44]	; (8006528 <prvCheckTasksWaitingTermination+0x54>)
 80064fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064fc:	4b0b      	ldr	r3, [pc, #44]	; (800652c <prvCheckTasksWaitingTermination+0x58>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3b01      	subs	r3, #1
 8006502:	4a0a      	ldr	r2, [pc, #40]	; (800652c <prvCheckTasksWaitingTermination+0x58>)
 8006504:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006506:	f000 fdf5 	bl	80070f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f810 	bl	8006530 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <prvCheckTasksWaitingTermination+0x58>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e1      	bne.n	80064dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000e70 	.word	0x20000e70
 8006528:	20000e9c 	.word	0x20000e9c
 800652c:	20000e84 	.word	0x20000e84

08006530 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3354      	adds	r3, #84	; 0x54
 800653c:	4618      	mov	r0, r3
 800653e:	f002 f9b9 	bl	80088b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006548:	2b00      	cmp	r3, #0
 800654a:	d108      	bne.n	800655e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006550:	4618      	mov	r0, r3
 8006552:	f000 ff8d 	bl	8007470 <vPortFree>
				vPortFree( pxTCB );
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 ff8a 	bl	8007470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800655c:	e018      	b.n	8006590 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006564:	2b01      	cmp	r3, #1
 8006566:	d103      	bne.n	8006570 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 ff81 	bl	8007470 <vPortFree>
	}
 800656e:	e00f      	b.n	8006590 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006576:	2b02      	cmp	r3, #2
 8006578:	d00a      	beq.n	8006590 <prvDeleteTCB+0x60>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	60fb      	str	r3, [r7, #12]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <prvDeleteTCB+0x5e>
	}
 8006590:	bf00      	nop
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <prvResetNextTaskUnblockTime+0x38>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <prvResetNextTaskUnblockTime+0x3c>)
 80065aa:	f04f 32ff 	mov.w	r2, #4294967295
 80065ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065b0:	e008      	b.n	80065c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <prvResetNextTaskUnblockTime+0x38>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <prvResetNextTaskUnblockTime+0x3c>)
 80065c2:	6013      	str	r3, [r2, #0]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	20000e54 	.word	0x20000e54
 80065d4:	20000ebc 	.word	0x20000ebc

080065d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065de:	4b0b      	ldr	r3, [pc, #44]	; (800660c <xTaskGetSchedulerState+0x34>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065e6:	2301      	movs	r3, #1
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	e008      	b.n	80065fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ec:	4b08      	ldr	r3, [pc, #32]	; (8006610 <xTaskGetSchedulerState+0x38>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065f4:	2302      	movs	r3, #2
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	e001      	b.n	80065fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065fe:	687b      	ldr	r3, [r7, #4]
	}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	20000ea8 	.word	0x20000ea8
 8006610:	20000ec4 	.word	0x20000ec4

08006614 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006620:	2300      	movs	r3, #0
 8006622:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d056      	beq.n	80066d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800662a:	4b2e      	ldr	r3, [pc, #184]	; (80066e4 <xTaskPriorityDisinherit+0xd0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	429a      	cmp	r2, r3
 8006632:	d00a      	beq.n	800664a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	60fb      	str	r3, [r7, #12]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	60bb      	str	r3, [r7, #8]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666c:	1e5a      	subs	r2, r3, #1
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667a:	429a      	cmp	r2, r3
 800667c:	d02c      	beq.n	80066d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006682:	2b00      	cmp	r3, #0
 8006684:	d128      	bne.n	80066d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3304      	adds	r3, #4
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fc34 	bl	8004ef8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a8:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <xTaskPriorityDisinherit+0xd4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d903      	bls.n	80066b8 <xTaskPriorityDisinherit+0xa4>
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <xTaskPriorityDisinherit+0xd4>)
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4a09      	ldr	r2, [pc, #36]	; (80066ec <xTaskPriorityDisinherit+0xd8>)
 80066c6:	441a      	add	r2, r3
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7fe fbb5 	bl	8004e3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066d8:	697b      	ldr	r3, [r7, #20]
	}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	200009c8 	.word	0x200009c8
 80066e8:	20000ea4 	.word	0x20000ea4
 80066ec:	200009cc 	.word	0x200009cc

080066f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066fa:	4b21      	ldr	r3, [pc, #132]	; (8006780 <prvAddCurrentTaskToDelayedList+0x90>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006700:	4b20      	ldr	r3, [pc, #128]	; (8006784 <prvAddCurrentTaskToDelayedList+0x94>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3304      	adds	r3, #4
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fbf6 	bl	8004ef8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d10a      	bne.n	800672a <prvAddCurrentTaskToDelayedList+0x3a>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800671a:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <prvAddCurrentTaskToDelayedList+0x94>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4819      	ldr	r0, [pc, #100]	; (8006788 <prvAddCurrentTaskToDelayedList+0x98>)
 8006724:	f7fe fb8b 	bl	8004e3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006728:	e026      	b.n	8006778 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4413      	add	r3, r2
 8006730:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <prvAddCurrentTaskToDelayedList+0x94>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	429a      	cmp	r2, r3
 8006740:	d209      	bcs.n	8006756 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006742:	4b12      	ldr	r3, [pc, #72]	; (800678c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <prvAddCurrentTaskToDelayedList+0x94>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fe fb99 	bl	8004e86 <vListInsert>
}
 8006754:	e010      	b.n	8006778 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006756:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <prvAddCurrentTaskToDelayedList+0x94>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3304      	adds	r3, #4
 8006760:	4619      	mov	r1, r3
 8006762:	4610      	mov	r0, r2
 8006764:	f7fe fb8f 	bl	8004e86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006768:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <prvAddCurrentTaskToDelayedList+0xa4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	429a      	cmp	r2, r3
 8006770:	d202      	bcs.n	8006778 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006772:	4a08      	ldr	r2, [pc, #32]	; (8006794 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	6013      	str	r3, [r2, #0]
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000ea0 	.word	0x20000ea0
 8006784:	200009c8 	.word	0x200009c8
 8006788:	20000e88 	.word	0x20000e88
 800678c:	20000e58 	.word	0x20000e58
 8006790:	20000e54 	.word	0x20000e54
 8006794:	20000ebc 	.word	0x20000ebc

08006798 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08a      	sub	sp, #40	; 0x28
 800679c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800679e:	2300      	movs	r3, #0
 80067a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067a2:	f000 fb07 	bl	8006db4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067a6:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <xTimerCreateTimerTask+0x80>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d021      	beq.n	80067f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067b6:	1d3a      	adds	r2, r7, #4
 80067b8:	f107 0108 	add.w	r1, r7, #8
 80067bc:	f107 030c 	add.w	r3, r7, #12
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe faf5 	bl	8004db0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	9202      	str	r2, [sp, #8]
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	2302      	movs	r3, #2
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	460a      	mov	r2, r1
 80067d8:	4910      	ldr	r1, [pc, #64]	; (800681c <xTimerCreateTimerTask+0x84>)
 80067da:	4811      	ldr	r0, [pc, #68]	; (8006820 <xTimerCreateTimerTask+0x88>)
 80067dc:	f7ff f8a2 	bl	8005924 <xTaskCreateStatic>
 80067e0:	4603      	mov	r3, r0
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <xTimerCreateTimerTask+0x8c>)
 80067e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067e6:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <xTimerCreateTimerTask+0x8c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067ee:	2301      	movs	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	613b      	str	r3, [r7, #16]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800680e:	697b      	ldr	r3, [r7, #20]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000ef8 	.word	0x20000ef8
 800681c:	08008aa4 	.word	0x08008aa4
 8006820:	0800695d 	.word	0x0800695d
 8006824:	20000efc 	.word	0x20000efc

08006828 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006836:	2300      	movs	r3, #0
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	623b      	str	r3, [r7, #32]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006856:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <xTimerGenericCommand+0x98>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d02a      	beq.n	80068b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b05      	cmp	r3, #5
 800686e:	dc18      	bgt.n	80068a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006870:	f7ff feb2 	bl	80065d8 <xTaskGetSchedulerState>
 8006874:	4603      	mov	r3, r0
 8006876:	2b02      	cmp	r3, #2
 8006878:	d109      	bne.n	800688e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800687a:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <xTimerGenericCommand+0x98>)
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f107 0110 	add.w	r1, r7, #16
 8006882:	2300      	movs	r3, #0
 8006884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006886:	f7fe fc65 	bl	8005154 <xQueueGenericSend>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24
 800688c:	e012      	b.n	80068b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800688e:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <xTimerGenericCommand+0x98>)
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	f107 0110 	add.w	r1, r7, #16
 8006896:	2300      	movs	r3, #0
 8006898:	2200      	movs	r2, #0
 800689a:	f7fe fc5b 	bl	8005154 <xQueueGenericSend>
 800689e:	6278      	str	r0, [r7, #36]	; 0x24
 80068a0:	e008      	b.n	80068b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068a2:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <xTimerGenericCommand+0x98>)
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	f107 0110 	add.w	r1, r7, #16
 80068aa:	2300      	movs	r3, #0
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	f7fe fd4f 	bl	8005350 <xQueueGenericSendFromISR>
 80068b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3728      	adds	r7, #40	; 0x28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000ef8 	.word	0x20000ef8

080068c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ce:	4b22      	ldr	r3, [pc, #136]	; (8006958 <prvProcessExpiredTimer+0x94>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3304      	adds	r3, #4
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fb0b 	bl	8004ef8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d022      	beq.n	8006936 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	18d1      	adds	r1, r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	6978      	ldr	r0, [r7, #20]
 80068fe:	f000 f8d1 	bl	8006aa4 <prvInsertTimerInActiveList>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01f      	beq.n	8006948 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006908:	2300      	movs	r3, #0
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	2300      	movs	r3, #0
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	2100      	movs	r1, #0
 8006912:	6978      	ldr	r0, [r7, #20]
 8006914:	f7ff ff88 	bl	8006828 <xTimerGenericCommand>
 8006918:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d113      	bne.n	8006948 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	b2da      	uxtb	r2, r3
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	6978      	ldr	r0, [r7, #20]
 800694e:	4798      	blx	r3
}
 8006950:	bf00      	nop
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20000ef0 	.word	0x20000ef0

0800695c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006964:	f107 0308 	add.w	r3, r7, #8
 8006968:	4618      	mov	r0, r3
 800696a:	f000 f857 	bl	8006a1c <prvGetNextExpireTime>
 800696e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4619      	mov	r1, r3
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f803 	bl	8006980 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800697a:	f000 f8d5 	bl	8006b28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800697e:	e7f1      	b.n	8006964 <prvTimerTask+0x8>

08006980 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800698a:	f7ff fa27 	bl	8005ddc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f866 	bl	8006a64 <prvSampleTimeNow>
 8006998:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d130      	bne.n	8006a02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <prvProcessTimerOrBlockTask+0x3c>
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d806      	bhi.n	80069bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069ae:	f7ff fa23 	bl	8005df8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff ff85 	bl	80068c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069ba:	e024      	b.n	8006a06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d008      	beq.n	80069d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069c2:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <prvProcessTimerOrBlockTask+0x90>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <prvProcessTimerOrBlockTask+0x50>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <prvProcessTimerOrBlockTask+0x52>
 80069d0:	2300      	movs	r3, #0
 80069d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <prvProcessTimerOrBlockTask+0x94>)
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	f7fe ff6b 	bl	80058bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80069e6:	f7ff fa07 	bl	8005df8 <xTaskResumeAll>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069f0:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <prvProcessTimerOrBlockTask+0x98>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
}
 8006a00:	e001      	b.n	8006a06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a02:	f7ff f9f9 	bl	8005df8 <xTaskResumeAll>
}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000ef4 	.word	0x20000ef4
 8006a14:	20000ef8 	.word	0x20000ef8
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a24:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <prvGetNextExpireTime+0x44>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <prvGetNextExpireTime+0x16>
 8006a2e:	2201      	movs	r2, #1
 8006a30:	e000      	b.n	8006a34 <prvGetNextExpireTime+0x18>
 8006a32:	2200      	movs	r2, #0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <prvGetNextExpireTime+0x44>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	e001      	b.n	8006a50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a50:	68fb      	ldr	r3, [r7, #12]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20000ef0 	.word	0x20000ef0

08006a64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a6c:	f7ff fa62 	bl	8005f34 <xTaskGetTickCount>
 8006a70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a72:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <prvSampleTimeNow+0x3c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d205      	bcs.n	8006a88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a7c:	f000 f936 	bl	8006cec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	e002      	b.n	8006a8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a8e:	4a04      	ldr	r2, [pc, #16]	; (8006aa0 <prvSampleTimeNow+0x3c>)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000f00 	.word	0x20000f00

08006aa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d812      	bhi.n	8006af0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e01b      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ade:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <prvInsertTimerInActiveList+0x7c>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe f9cc 	bl	8004e86 <vListInsert>
 8006aee:	e012      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d206      	bcs.n	8006b06 <prvInsertTimerInActiveList+0x62>
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d302      	bcc.n	8006b06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e007      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <prvInsertTimerInActiveList+0x80>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7fe f9b8 	bl	8004e86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b16:	697b      	ldr	r3, [r7, #20]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000ef4 	.word	0x20000ef4
 8006b24:	20000ef0 	.word	0x20000ef0

08006b28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	; 0x38
 8006b2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b2e:	e0ca      	b.n	8006cc6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da18      	bge.n	8006b68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b36:	1d3b      	adds	r3, r7, #4
 8006b38:	3304      	adds	r3, #4
 8006b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	61fb      	str	r3, [r7, #28]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b5e:	6850      	ldr	r0, [r2, #4]
 8006b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b62:	6892      	ldr	r2, [r2, #8]
 8006b64:	4611      	mov	r1, r2
 8006b66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f2c0 80ab 	blt.w	8006cc6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe f9b9 	bl	8004ef8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b86:	463b      	mov	r3, r7
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff ff6b 	bl	8006a64 <prvSampleTimeNow>
 8006b8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	f200 8096 	bhi.w	8006cc4 <prvProcessReceivedCommands+0x19c>
 8006b98:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <prvProcessReceivedCommands+0x78>)
 8006b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9e:	bf00      	nop
 8006ba0:	08006bc9 	.word	0x08006bc9
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006bc9 	.word	0x08006bc9
 8006bac:	08006c3d 	.word	0x08006c3d
 8006bb0:	08006c51 	.word	0x08006c51
 8006bb4:	08006c9b 	.word	0x08006c9b
 8006bb8:	08006bc9 	.word	0x08006bc9
 8006bbc:	08006bc9 	.word	0x08006bc9
 8006bc0:	08006c3d 	.word	0x08006c3d
 8006bc4:	08006c51 	.word	0x08006c51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	18d1      	adds	r1, r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006be8:	f7ff ff5c 	bl	8006aa4 <prvInsertTimerInActiveList>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d069      	beq.n	8006cc6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d05e      	beq.n	8006cc6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	441a      	add	r2, r3
 8006c10:	2300      	movs	r3, #0
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	2300      	movs	r3, #0
 8006c16:	2100      	movs	r1, #0
 8006c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c1a:	f7ff fe05 	bl	8006828 <xTimerGenericCommand>
 8006c1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d14f      	bne.n	8006cc6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	61bb      	str	r3, [r7, #24]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006c4e:	e03a      	b.n	8006cc6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	617b      	str	r3, [r7, #20]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	18d1      	adds	r1, r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c94:	f7ff ff06 	bl	8006aa4 <prvInsertTimerInActiveList>
					break;
 8006c98:	e015      	b.n	8006cc6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d103      	bne.n	8006cb0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006caa:	f000 fbe1 	bl	8007470 <vPortFree>
 8006cae:	e00a      	b.n	8006cc6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cc2:	e000      	b.n	8006cc6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006cc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cc6:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <prvProcessReceivedCommands+0x1c0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	1d39      	adds	r1, r7, #4
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fbda 	bl	8005488 <xQueueReceive>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f47f af2a 	bne.w	8006b30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006cdc:	bf00      	nop
 8006cde:	bf00      	nop
 8006ce0:	3730      	adds	r7, #48	; 0x30
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000ef8 	.word	0x20000ef8

08006cec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cf2:	e048      	b.n	8006d86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cf4:	4b2d      	ldr	r3, [pc, #180]	; (8006dac <prvSwitchTimerLists+0xc0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfe:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <prvSwitchTimerLists+0xc0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe f8f3 	bl	8004ef8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d02e      	beq.n	8006d86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4413      	add	r3, r2
 8006d30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d90e      	bls.n	8006d58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d46:	4b19      	ldr	r3, [pc, #100]	; (8006dac <prvSwitchTimerLists+0xc0>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f7fe f898 	bl	8004e86 <vListInsert>
 8006d56:	e016      	b.n	8006d86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	2100      	movs	r1, #0
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f7ff fd60 	bl	8006828 <xTimerGenericCommand>
 8006d68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	603b      	str	r3, [r7, #0]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d86:	4b09      	ldr	r3, [pc, #36]	; (8006dac <prvSwitchTimerLists+0xc0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1b1      	bne.n	8006cf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <prvSwitchTimerLists+0xc0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <prvSwitchTimerLists+0xc4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a04      	ldr	r2, [pc, #16]	; (8006dac <prvSwitchTimerLists+0xc0>)
 8006d9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d9e:	4a04      	ldr	r2, [pc, #16]	; (8006db0 <prvSwitchTimerLists+0xc4>)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	6013      	str	r3, [r2, #0]
}
 8006da4:	bf00      	nop
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000ef0 	.word	0x20000ef0
 8006db0:	20000ef4 	.word	0x20000ef4

08006db4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006dba:	f000 f96b 	bl	8007094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006dbe:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <prvCheckForValidListAndQueue+0x60>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d120      	bne.n	8006e08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006dc6:	4814      	ldr	r0, [pc, #80]	; (8006e18 <prvCheckForValidListAndQueue+0x64>)
 8006dc8:	f7fe f80c 	bl	8004de4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006dcc:	4813      	ldr	r0, [pc, #76]	; (8006e1c <prvCheckForValidListAndQueue+0x68>)
 8006dce:	f7fe f809 	bl	8004de4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006dd2:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <prvCheckForValidListAndQueue+0x6c>)
 8006dd4:	4a10      	ldr	r2, [pc, #64]	; (8006e18 <prvCheckForValidListAndQueue+0x64>)
 8006dd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006dd8:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <prvCheckForValidListAndQueue+0x70>)
 8006dda:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <prvCheckForValidListAndQueue+0x68>)
 8006ddc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006dde:	2300      	movs	r3, #0
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <prvCheckForValidListAndQueue+0x74>)
 8006de4:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <prvCheckForValidListAndQueue+0x78>)
 8006de6:	2110      	movs	r1, #16
 8006de8:	200a      	movs	r0, #10
 8006dea:	f7fe f917 	bl	800501c <xQueueGenericCreateStatic>
 8006dee:	4603      	mov	r3, r0
 8006df0:	4a08      	ldr	r2, [pc, #32]	; (8006e14 <prvCheckForValidListAndQueue+0x60>)
 8006df2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006df4:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <prvCheckForValidListAndQueue+0x60>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <prvCheckForValidListAndQueue+0x60>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	490b      	ldr	r1, [pc, #44]	; (8006e30 <prvCheckForValidListAndQueue+0x7c>)
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fd30 	bl	8005868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e08:	f000 f974 	bl	80070f4 <vPortExitCritical>
}
 8006e0c:	bf00      	nop
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000ef8 	.word	0x20000ef8
 8006e18:	20000ec8 	.word	0x20000ec8
 8006e1c:	20000edc 	.word	0x20000edc
 8006e20:	20000ef0 	.word	0x20000ef0
 8006e24:	20000ef4 	.word	0x20000ef4
 8006e28:	20000fa4 	.word	0x20000fa4
 8006e2c:	20000f04 	.word	0x20000f04
 8006e30:	08008aac 	.word	0x08008aac

08006e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3b04      	subs	r3, #4
 8006e44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0201 	bic.w	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3b04      	subs	r3, #4
 8006e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e64:	4a0c      	ldr	r2, [pc, #48]	; (8006e98 <pxPortInitialiseStack+0x64>)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3b14      	subs	r3, #20
 8006e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3b04      	subs	r3, #4
 8006e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f06f 0202 	mvn.w	r2, #2
 8006e82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3b20      	subs	r3, #32
 8006e88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	08006e9d 	.word	0x08006e9d

08006e9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <prvTaskExitError+0x54>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eae:	d00a      	beq.n	8006ec6 <prvTaskExitError+0x2a>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	e7fe      	b.n	8006ec4 <prvTaskExitError+0x28>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60bb      	str	r3, [r7, #8]
}
 8006ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006eda:	bf00      	nop
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0fc      	beq.n	8006edc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	2000000c 	.word	0x2000000c
	...

08006f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f00:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <pxCurrentTCBConst2>)
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	f380 8809 	msr	PSP, r0
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	4770      	bx	lr
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst2>:
 8006f20:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f28:	4808      	ldr	r0, [pc, #32]	; (8006f4c <prvPortStartFirstTask+0x24>)
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	f380 8808 	msr	MSP, r0
 8006f32:	f04f 0000 	mov.w	r0, #0
 8006f36:	f380 8814 	msr	CONTROL, r0
 8006f3a:	b662      	cpsie	i
 8006f3c:	b661      	cpsie	f
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	df00      	svc	0
 8006f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f4a:	bf00      	nop
 8006f4c:	e000ed08 	.word	0xe000ed08

08006f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f56:	4b46      	ldr	r3, [pc, #280]	; (8007070 <xPortStartScheduler+0x120>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a46      	ldr	r2, [pc, #280]	; (8007074 <xPortStartScheduler+0x124>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d10a      	bne.n	8006f76 <xPortStartScheduler+0x26>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	613b      	str	r3, [r7, #16]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f76:	4b3e      	ldr	r3, [pc, #248]	; (8007070 <xPortStartScheduler+0x120>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a3f      	ldr	r2, [pc, #252]	; (8007078 <xPortStartScheduler+0x128>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d10a      	bne.n	8006f96 <xPortStartScheduler+0x46>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	60fb      	str	r3, [r7, #12]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f96:	4b39      	ldr	r3, [pc, #228]	; (800707c <xPortStartScheduler+0x12c>)
 8006f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	22ff      	movs	r2, #255	; 0xff
 8006fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	4b31      	ldr	r3, [pc, #196]	; (8007080 <xPortStartScheduler+0x130>)
 8006fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fbe:	4b31      	ldr	r3, [pc, #196]	; (8007084 <xPortStartScheduler+0x134>)
 8006fc0:	2207      	movs	r2, #7
 8006fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc4:	e009      	b.n	8006fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <xPortStartScheduler+0x134>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	4a2d      	ldr	r2, [pc, #180]	; (8007084 <xPortStartScheduler+0x134>)
 8006fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d0ef      	beq.n	8006fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fe6:	4b27      	ldr	r3, [pc, #156]	; (8007084 <xPortStartScheduler+0x134>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1c3 0307 	rsb	r3, r3, #7
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d00a      	beq.n	8007008 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	60bb      	str	r3, [r7, #8]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007008:	4b1e      	ldr	r3, [pc, #120]	; (8007084 <xPortStartScheduler+0x134>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	4a1d      	ldr	r2, [pc, #116]	; (8007084 <xPortStartScheduler+0x134>)
 8007010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007012:	4b1c      	ldr	r3, [pc, #112]	; (8007084 <xPortStartScheduler+0x134>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800701a:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <xPortStartScheduler+0x134>)
 800701c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007026:	4b18      	ldr	r3, [pc, #96]	; (8007088 <xPortStartScheduler+0x138>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a17      	ldr	r2, [pc, #92]	; (8007088 <xPortStartScheduler+0x138>)
 800702c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <xPortStartScheduler+0x138>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a14      	ldr	r2, [pc, #80]	; (8007088 <xPortStartScheduler+0x138>)
 8007038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800703c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800703e:	f000 f8dd 	bl	80071fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <xPortStartScheduler+0x13c>)
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007048:	f000 f8fc 	bl	8007244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800704c:	4b10      	ldr	r3, [pc, #64]	; (8007090 <xPortStartScheduler+0x140>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0f      	ldr	r2, [pc, #60]	; (8007090 <xPortStartScheduler+0x140>)
 8007052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007058:	f7ff ff66 	bl	8006f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800705c:	f7ff f846 	bl	80060ec <vTaskSwitchContext>
	prvTaskExitError();
 8007060:	f7ff ff1c 	bl	8006e9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	e000ed00 	.word	0xe000ed00
 8007074:	410fc271 	.word	0x410fc271
 8007078:	410fc270 	.word	0x410fc270
 800707c:	e000e400 	.word	0xe000e400
 8007080:	20000ff4 	.word	0x20000ff4
 8007084:	20000ff8 	.word	0x20000ff8
 8007088:	e000ed20 	.word	0xe000ed20
 800708c:	2000000c 	.word	0x2000000c
 8007090:	e000ef34 	.word	0xe000ef34

08007094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	607b      	str	r3, [r7, #4]
}
 80070ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070ae:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <vPortEnterCritical+0x58>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3301      	adds	r3, #1
 80070b4:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <vPortEnterCritical+0x58>)
 80070b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070b8:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <vPortEnterCritical+0x58>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d10f      	bne.n	80070e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070c0:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <vPortEnterCritical+0x5c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	603b      	str	r3, [r7, #0]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vPortEnterCritical+0x4a>
	}
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	2000000c 	.word	0x2000000c
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070fa:	4b12      	ldr	r3, [pc, #72]	; (8007144 <vPortExitCritical+0x50>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <vPortExitCritical+0x24>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	607b      	str	r3, [r7, #4]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007118:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <vPortExitCritical+0x50>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3b01      	subs	r3, #1
 800711e:	4a09      	ldr	r2, [pc, #36]	; (8007144 <vPortExitCritical+0x50>)
 8007120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <vPortExitCritical+0x50>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <vPortExitCritical+0x42>
 800712a:	2300      	movs	r3, #0
 800712c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f383 8811 	msr	BASEPRI, r3
}
 8007134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000000c 	.word	0x2000000c
	...

08007150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007150:	f3ef 8009 	mrs	r0, PSP
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <pxCurrentTCBConst>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f01e 0f10 	tst.w	lr, #16
 8007160:	bf08      	it	eq
 8007162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007174:	f380 8811 	msr	BASEPRI, r0
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f7fe ffb4 	bl	80060ec <vTaskSwitchContext>
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f380 8811 	msr	BASEPRI, r0
 800718c:	bc09      	pop	{r0, r3}
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	6808      	ldr	r0, [r1, #0]
 8007192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007196:	f01e 0f10 	tst.w	lr, #16
 800719a:	bf08      	it	eq
 800719c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071a0:	f380 8809 	msr	PSP, r0
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w

080071b0 <pxCurrentTCBConst>:
 80071b0:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop

080071b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071d2:	f7fe fed1 	bl	8005f78 <xTaskIncrementTick>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071dc:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <xPortSysTickHandler+0x40>)
 80071de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	2300      	movs	r3, #0
 80071e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f383 8811 	msr	BASEPRI, r3
}
 80071ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <vPortSetupTimerInterrupt+0x34>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <vPortSetupTimerInterrupt+0x38>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800720c:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <vPortSetupTimerInterrupt+0x3c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a0a      	ldr	r2, [pc, #40]	; (800723c <vPortSetupTimerInterrupt+0x40>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	099b      	lsrs	r3, r3, #6
 8007218:	4a09      	ldr	r2, [pc, #36]	; (8007240 <vPortSetupTimerInterrupt+0x44>)
 800721a:	3b01      	subs	r3, #1
 800721c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800721e:	4b04      	ldr	r3, [pc, #16]	; (8007230 <vPortSetupTimerInterrupt+0x34>)
 8007220:	2207      	movs	r2, #7
 8007222:	601a      	str	r2, [r3, #0]
}
 8007224:	bf00      	nop
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	e000e010 	.word	0xe000e010
 8007234:	e000e018 	.word	0xe000e018
 8007238:	20000000 	.word	0x20000000
 800723c:	10624dd3 	.word	0x10624dd3
 8007240:	e000e014 	.word	0xe000e014

08007244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007254 <vPortEnableVFP+0x10>
 8007248:	6801      	ldr	r1, [r0, #0]
 800724a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800724e:	6001      	str	r1, [r0, #0]
 8007250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007252:	bf00      	nop
 8007254:	e000ed88 	.word	0xe000ed88

08007258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800725e:	f3ef 8305 	mrs	r3, IPSR
 8007262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b0f      	cmp	r3, #15
 8007268:	d914      	bls.n	8007294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800726a:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <vPortValidateInterruptPriority+0x70>)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007274:	4b15      	ldr	r3, [pc, #84]	; (80072cc <vPortValidateInterruptPriority+0x74>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	7afa      	ldrb	r2, [r7, #11]
 800727a:	429a      	cmp	r2, r3
 800727c:	d20a      	bcs.n	8007294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007294:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <vPortValidateInterruptPriority+0x78>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <vPortValidateInterruptPriority+0x7c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d90a      	bls.n	80072ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	603b      	str	r3, [r7, #0]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <vPortValidateInterruptPriority+0x60>
	}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	e000e3f0 	.word	0xe000e3f0
 80072cc:	20000ff4 	.word	0x20000ff4
 80072d0:	e000ed0c 	.word	0xe000ed0c
 80072d4:	20000ff8 	.word	0x20000ff8

080072d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	; 0x28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072e4:	f7fe fd7a 	bl	8005ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072e8:	4b5b      	ldr	r3, [pc, #364]	; (8007458 <pvPortMalloc+0x180>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072f0:	f000 f920 	bl	8007534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072f4:	4b59      	ldr	r3, [pc, #356]	; (800745c <pvPortMalloc+0x184>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 8093 	bne.w	8007428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01d      	beq.n	8007344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007308:	2208      	movs	r2, #8
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	2b00      	cmp	r3, #0
 8007318:	d014      	beq.n	8007344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f023 0307 	bic.w	r3, r3, #7
 8007320:	3308      	adds	r3, #8
 8007322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <pvPortMalloc+0x6c>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	617b      	str	r3, [r7, #20]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d06e      	beq.n	8007428 <pvPortMalloc+0x150>
 800734a:	4b45      	ldr	r3, [pc, #276]	; (8007460 <pvPortMalloc+0x188>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d869      	bhi.n	8007428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007354:	4b43      	ldr	r3, [pc, #268]	; (8007464 <pvPortMalloc+0x18c>)
 8007356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007358:	4b42      	ldr	r3, [pc, #264]	; (8007464 <pvPortMalloc+0x18c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800735e:	e004      	b.n	800736a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d903      	bls.n	800737c <pvPortMalloc+0xa4>
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f1      	bne.n	8007360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800737c:	4b36      	ldr	r3, [pc, #216]	; (8007458 <pvPortMalloc+0x180>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007382:	429a      	cmp	r2, r3
 8007384:	d050      	beq.n	8007428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2208      	movs	r2, #8
 800738c:	4413      	add	r3, r2
 800738e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	2308      	movs	r3, #8
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d91f      	bls.n	80073e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <pvPortMalloc+0xf8>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	613b      	str	r3, [r7, #16]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073e2:	69b8      	ldr	r0, [r7, #24]
 80073e4:	f000 f908 	bl	80075f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073e8:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <pvPortMalloc+0x188>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <pvPortMalloc+0x188>)
 80073f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073f6:	4b1a      	ldr	r3, [pc, #104]	; (8007460 <pvPortMalloc+0x188>)
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b1b      	ldr	r3, [pc, #108]	; (8007468 <pvPortMalloc+0x190>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d203      	bcs.n	800740a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007402:	4b17      	ldr	r3, [pc, #92]	; (8007460 <pvPortMalloc+0x188>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a18      	ldr	r2, [pc, #96]	; (8007468 <pvPortMalloc+0x190>)
 8007408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <pvPortMalloc+0x184>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	431a      	orrs	r2, r3
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <pvPortMalloc+0x194>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	4a11      	ldr	r2, [pc, #68]	; (800746c <pvPortMalloc+0x194>)
 8007426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007428:	f7fe fce6 	bl	8005df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <pvPortMalloc+0x174>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	60fb      	str	r3, [r7, #12]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <pvPortMalloc+0x172>
	return pvReturn;
 800744c:	69fb      	ldr	r3, [r7, #28]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3728      	adds	r7, #40	; 0x28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20001bbc 	.word	0x20001bbc
 800745c:	20001bd0 	.word	0x20001bd0
 8007460:	20001bc0 	.word	0x20001bc0
 8007464:	20001bb4 	.word	0x20001bb4
 8007468:	20001bc4 	.word	0x20001bc4
 800746c:	20001bc8 	.word	0x20001bc8

08007470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d04d      	beq.n	800751e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007482:	2308      	movs	r3, #8
 8007484:	425b      	negs	r3, r3
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4413      	add	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <vPortFree+0xb8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <vPortFree+0x44>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60fb      	str	r3, [r7, #12]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <vPortFree+0x62>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	60bb      	str	r3, [r7, #8]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <vPortFree+0xb8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01e      	beq.n	800751e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d11a      	bne.n	800751e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <vPortFree+0xb8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	43db      	mvns	r3, r3
 80074f2:	401a      	ands	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074f8:	f7fe fc70 	bl	8005ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	4b0a      	ldr	r3, [pc, #40]	; (800752c <vPortFree+0xbc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4413      	add	r3, r2
 8007506:	4a09      	ldr	r2, [pc, #36]	; (800752c <vPortFree+0xbc>)
 8007508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800750a:	6938      	ldr	r0, [r7, #16]
 800750c:	f000 f874 	bl	80075f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007510:	4b07      	ldr	r3, [pc, #28]	; (8007530 <vPortFree+0xc0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a06      	ldr	r2, [pc, #24]	; (8007530 <vPortFree+0xc0>)
 8007518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800751a:	f7fe fc6d 	bl	8005df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20001bd0 	.word	0x20001bd0
 800752c:	20001bc0 	.word	0x20001bc0
 8007530:	20001bcc 	.word	0x20001bcc

08007534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800753a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800753e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007540:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <prvHeapInit+0xac>)
 8007542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3307      	adds	r3, #7
 8007552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0307 	bic.w	r3, r3, #7
 800755a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <prvHeapInit+0xac>)
 8007564:	4413      	add	r3, r2
 8007566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800756c:	4a1d      	ldr	r2, [pc, #116]	; (80075e4 <prvHeapInit+0xb0>)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007572:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <prvHeapInit+0xb0>)
 8007574:	2200      	movs	r2, #0
 8007576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4413      	add	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007580:	2208      	movs	r2, #8
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0307 	bic.w	r3, r3, #7
 800758e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <prvHeapInit+0xb4>)
 8007594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <prvHeapInit+0xb4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <prvHeapInit+0xb4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075b4:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <prvHeapInit+0xb4>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <prvHeapInit+0xb8>)
 80075c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <prvHeapInit+0xbc>)
 80075ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <prvHeapInit+0xc0>)
 80075ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075d2:	601a      	str	r2, [r3, #0]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	20000ffc 	.word	0x20000ffc
 80075e4:	20001bb4 	.word	0x20001bb4
 80075e8:	20001bbc 	.word	0x20001bbc
 80075ec:	20001bc4 	.word	0x20001bc4
 80075f0:	20001bc0 	.word	0x20001bc0
 80075f4:	20001bd0 	.word	0x20001bd0

080075f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007600:	4b28      	ldr	r3, [pc, #160]	; (80076a4 <prvInsertBlockIntoFreeList+0xac>)
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e002      	b.n	800760c <prvInsertBlockIntoFreeList+0x14>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d8f7      	bhi.n	8007606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4413      	add	r3, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d108      	bne.n	800763a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	441a      	add	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	441a      	add	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d118      	bne.n	8007680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d00d      	beq.n	8007676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	441a      	add	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e008      	b.n	8007688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e003      	b.n	8007688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d002      	beq.n	8007696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20001bb4 	.word	0x20001bb4
 80076a8:	20001bbc 	.word	0x20001bbc

080076ac <_ZN13elapsedMillisC1Ev>:
	unsigned long ms;
public:
	void reset() {
		ms = millis();
	}
	elapsedMillis(void) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
		ms = millis();
 80076b4:	f001 f8ee 	bl	8008894 <_Z6millisv>
 80076b8:	4602      	mov	r2, r0
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
	}
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <firmware>:
		2560 * 4, .priority = (osPriority_t) osPriorityNormal, };

const osThreadAttr_t comm_task_attributes = { .name = "comm_task", .stack_size =
		2560 * 4, .priority = (osPriority_t) osPriorityNormal, };

void firmware() {
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af02      	add	r7, sp, #8

	imu.init(imu_config);
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <firmware+0x3c>)
 80076d0:	466c      	mov	r4, sp
 80076d2:	f103 020c 	add.w	r2, r3, #12
 80076d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80076da:	e884 0003 	stmia.w	r4, {r0, r1}
 80076de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076e0:	4809      	ldr	r0, [pc, #36]	; (8007708 <firmware+0x40>)
 80076e2:	f000 f9e0 	bl	8007aa6 <_ZN6BMI1604initE15bmi160_config_t>

	osThreadNew(imu_task, NULL, &imu_task_attributes);
 80076e6:	4a09      	ldr	r2, [pc, #36]	; (800770c <firmware+0x44>)
 80076e8:	2100      	movs	r1, #0
 80076ea:	4809      	ldr	r0, [pc, #36]	; (8007710 <firmware+0x48>)
 80076ec:	f7fd fa99 	bl	8004c22 <osThreadNew>
	osThreadNew(imu_task, NULL, &comm_task_attributes);
 80076f0:	4a08      	ldr	r2, [pc, #32]	; (8007714 <firmware+0x4c>)
 80076f2:	2100      	movs	r1, #0
 80076f4:	4806      	ldr	r0, [pc, #24]	; (8007710 <firmware+0x48>)
 80076f6:	f7fd fa94 	bl	8004c22 <osThreadNew>

}
 80076fa:	bf00      	nop
 80076fc:	3704      	adds	r7, #4
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd90      	pop	{r4, r7, pc}
 8007702:	bf00      	nop
 8007704:	20000010 	.word	0x20000010
 8007708:	20001bd8 	.word	0x20001bd8
 800770c:	08008b38 	.word	0x08008b38
 8007710:	08007719 	.word	0x08007719
 8007714:	08008b5c 	.word	0x08008b5c

08007718 <_Z8imu_taskPv>:

void imu_task(void *attributes) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

	while (true) {
		imu.update();
 8007720:	4803      	ldr	r0, [pc, #12]	; (8007730 <_Z8imu_taskPv+0x18>)
 8007722:	f000 faee 	bl	8007d02 <_ZN6BMI1606updateEv>
		osDelay(IMU_UPDATE_TIME);
 8007726:	200a      	movs	r0, #10
 8007728:	f7fd fb0d 	bl	8004d46 <osDelay>
		imu.update();
 800772c:	e7f8      	b.n	8007720 <_Z8imu_taskPv+0x8>
 800772e:	bf00      	nop
 8007730:	20001bd8 	.word	0x20001bd8

08007734 <_Z41__static_initialization_and_destruction_0ii>:
		HAL_UART_Transmit(huart1, data_encoded, encode_length, 10);


	}

}
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d10e      	bne.n	8007762 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800774a:	4293      	cmp	r3, r2
 800774c:	d109      	bne.n	8007762 <_Z41__static_initialization_and_destruction_0ii+0x2e>
};
 800774e:	4b07      	ldr	r3, [pc, #28]	; (800776c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8007754:	6013      	str	r3, [r2, #0]
elapsedMillis blinkTimer;
 8007756:	4807      	ldr	r0, [pc, #28]	; (8007774 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007758:	f7ff ffa8 	bl	80076ac <_ZN13elapsedMillisC1Ev>
BMI160 imu;
 800775c:	4806      	ldr	r0, [pc, #24]	; (8007778 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800775e:	f000 f962 	bl	8007a26 <_ZN6BMI160C1Ev>
}
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	2000009c 	.word	0x2000009c
 8007770:	20000010 	.word	0x20000010
 8007774:	20001bd4 	.word	0x20001bd4
 8007778:	20001bd8 	.word	0x20001bd8

0800777c <_GLOBAL__sub_I_imu_config>:
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
 8007780:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007784:	2001      	movs	r0, #1
 8007786:	f7ff ffd5 	bl	8007734 <_Z41__static_initialization_and_destruction_0ii>
 800778a:	bd80      	pop	{r7, pc}

0800778c <_Z41__static_initialization_and_destruction_0ii>:
			socket->rx_function();
		}

	}
	vTaskDelete(socket->getTaskID());
}
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d108      	bne.n	80077ae <_Z41__static_initialization_and_destruction_0ii+0x22>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d103      	bne.n	80077ae <_Z41__static_initialization_and_destruction_0ii+0x22>
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };
 80077a6:	4a05      	ldr	r2, [pc, #20]	; (80077bc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6013      	str	r3, [r2, #0]
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20000028 	.word	0x20000028
 80077c0:	20000024 	.word	0x20000024

080077c4 <_GLOBAL__sub_I_std_hardware_uart_config>:
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80077cc:	2001      	movs	r0, #1
 80077ce:	f7ff ffdd 	bl	800778c <_Z41__static_initialization_and_destruction_0ii>
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <_ZN8CallbackC1Ev>:
#include "stdint.h"
#include "core_utils_functionpointer.h"

class Callback {
public:
	Callback(){
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	4a04      	ldr	r2, [pc, #16]	; (80077f0 <_ZN8CallbackC1Ev+0x1c>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	601a      	str	r2, [r3, #0]

	}
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	08008b98 	.word	0x08008b98

080077f4 <_ZN8Callback4callEv>:

	virtual void call(){
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]

	}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <_ZN8Callback4callEPv>:

	virtual void call(void* argument){
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]

	}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <_ZN19core_utils_CallbackIvvEC1Ev>:


template<typename R>
class core_utils_Callback<R, void>: public Callback {
public:
	core_utils_Callback() {
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff ffd2 	bl	80077d4 <_ZN8CallbackC1Ev>
 8007830:	4a09      	ldr	r2, [pc, #36]	; (8007858 <_ZN19core_utils_CallbackIvvEC1Ev+0x38>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	711a      	strb	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3308      	adds	r3, #8
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f817 	bl	8007876 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		this->registered = 0;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	711a      	strb	r2, [r3, #4]
	}
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	08008b88 	.word	0x08008b88

0800785c <_ZN19core_utils_CallbackIvvE4callEv>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
		_fp = core_utils_FunctionPointer<R,void>(object, member);
		this->registered = 1;
	}

	R call() {
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
		return this->_fp();
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3308      	adds	r3, #8
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f812 	bl	8007892 <_ZN26core_utils_FunctionPointerIvvEclEv>
 800786e:	bf00      	nop
	}
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>:
public:
    /** Create a FunctionPointer, attaching a static function
     *
     *  @param function The static function to attach (default is none)
     */
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
        attach(function);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f810 	bl	80078a8 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>
    }
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <_ZN26core_utils_FunctionPointerIvvEclEv>:
    R(*get_function())() {
        return _membercaller ? (R(*)())0 : (R(*)())_p.function;
    }

#ifdef MBED_OPERATORS
    R operator ()(void) {
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
        return call();
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f815 	bl	80078ca <_ZN26core_utils_FunctionPointerIvvE4callEv>
 80078a0:	bf00      	nop
    }
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>:
    void attach(R (*function)(void)) {
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	615a      	str	r2, [r3, #20]
    }
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <_ZN26core_utils_FunctionPointerIvvE4callEv>:
    R call(){
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d107      	bne.n	80078ea <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
            return _p.function();
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4798      	blx	r3
 80078e8:	e011      	b.n	800790e <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        } else if (_membercaller && _p.object) {
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00c      	beq.n	800790c <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d008      	beq.n	800790c <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
            return _membercaller(_p.object, _member);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6810      	ldr	r0, [r2, #0]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	3204      	adds	r2, #4
 8007906:	4611      	mov	r1, r2
 8007908:	4798      	blx	r3
 800790a:	e000      	b.n	800790e <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        return (R)0;
 800790c:	bf00      	nop
    }
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <_Z7deg2radf>:

#include "stdint.h"

const float pi = 3.14159265;

inline float deg2rad(float angle) {
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle * pi / 180.0;
 800791e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007922:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007944 <_Z7deg2radf+0x30>
 8007926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800792a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007948 <_Z7deg2radf+0x34>
 800792e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007932:	eef0 7a66 	vmov.f32	s15, s13
}
 8007936:	eeb0 0a67 	vmov.f32	s0, s15
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	40490fdb 	.word	0x40490fdb
 8007948:	43340000 	.word	0x43340000

0800794c <_Z5delaym>:

inline void nop(){

}

inline void delay(uint32_t msec){
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
#if CORE_CONFIG_USE_RTOS

	osKernelState_t state = osKernelGetState();
 8007954:	f7fd f908 	bl	8004b68 <osKernelGetState>
 8007958:	60f8      	str	r0, [r7, #12]
	if (state == osKernelRunning){
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d103      	bne.n	8007968 <_Z5delaym+0x1c>
		osDelay(msec);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7fd f9f0 	bl	8004d46 <osDelay>
	}

#else
	HAL_Delay(msec);
#endif
}
 8007966:	e002      	b.n	800796e <_Z5delaym+0x22>
		HAL_Delay(msec);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7f9 fcf5 	bl	8001358 <HAL_Delay>
}
 800796e:	bf00      	nop
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <_ZN18bmi160_gyr_calib_tC1Ev>:
	float x;
	float y;
	float z;
} bmi160_acc;

typedef struct bmi160_gyr_calib_t {
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f04f 0200 	mov.w	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	605a      	str	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	609a      	str	r2, [r3, #8]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <_ZN19bmi160_gyr_config_tC1Ev>:
	uint8_t bw = BMI160_ACCEL_BW_NORMAL_AVG4;
	uint8_t range = BMI160_ACCEL_RANGE_8G;
	uint8_t foc_enable = 0;
} bmi160_acc_config_t;

typedef struct bmi160_gyr_config_t {
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	220a      	movs	r2, #10
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	705a      	strb	r2, [r3, #1]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	709a      	strb	r2, [r3, #2]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	70da      	strb	r2, [r3, #3]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <_ZN19bmi160_acc_config_tC1Ev>:
typedef struct bmi160_acc_config_t {
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	220a      	movs	r2, #10
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	705a      	strb	r2, [r3, #1]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2208      	movs	r2, #8
 80079ea:	709a      	strb	r2, [r3, #2]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	70da      	strb	r2, [r3, #3]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <_ZN15bmi160_config_tC1Ev>:
	uint8_t bw = BMI160_GYRO_BW_NORMAL_MODE;
	uint8_t range = BMI160_GYRO_RANGE_1000_DPS;
	uint8_t foc_enable = 1;
} bmi160_gyr_config_t;

typedef struct bmi160_config_t {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	330a      	adds	r3, #10
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff ffc9 	bl	80079a4 <_ZN19bmi160_gyr_config_tC1Ev>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	330e      	adds	r3, #14
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ffdb 	bl	80079d2 <_ZN19bmi160_acc_config_tC1Ev>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <_ZN6BMI160C1Ev>:

#include "bmi160.h"

#if CORE_CONFIG_USE_SPI

BMI160::BMI160(){
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	332c      	adds	r3, #44	; 0x2c
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff ff9f 	bl	8007976 <_ZN18bmi160_gyr_calib_tC1Ev>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3338      	adds	r3, #56	; 0x38
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff ffdf 	bl	8007a00 <_ZN15bmi160_config_tC1Ev>

}
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <_ZN6BMI16013writeRegisterEhh>:

/* ============================================================================= */
uint8_t BMI160::writeRegister(uint8_t reg, uint8_t data) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a66:	2200      	movs	r2, #0
 8007a68:	4619      	mov	r1, r3
 8007a6a:	f7f9 fee5 	bl	8001838 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 1);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007a72:	1cf9      	adds	r1, r7, #3
 8007a74:	2301      	movs	r3, #1
 8007a76:	2201      	movs	r2, #1
 8007a78:	f7fb f986 	bl	8002d88 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(this->_config.hspi, &data, 1, 1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007a80:	1cb9      	adds	r1, r7, #2
 8007a82:	2301      	movs	r3, #1
 8007a84:	2201      	movs	r2, #1
 8007a86:	f7fb f97f 	bl	8002d88 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a94:	2201      	movs	r2, #1
 8007a96:	4619      	mov	r1, r3
 8007a98:	f7f9 fece 	bl	8001838 <HAL_GPIO_WritePin>

	return CORE_OK;
 8007a9c:	2301      	movs	r3, #1
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <_ZN6BMI1604initE15bmi160_config_t>:

/* ============================================================================= */
uint8_t BMI160::init(bmi160_config_t config) {
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	b5b0      	push	{r4, r5, r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ab4:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->_config = config;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007abe:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8007ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	6023      	str	r3, [r4, #0]
	// Make a dummy read to turn on SPI mode
//	this->readRegister(0x7F);
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	f7f9 feae 	bl	8001838 <HAL_GPIO_WritePin>
	delay(250);
 8007adc:	20fa      	movs	r0, #250	; 0xfa
 8007ade:	f7ff ff35 	bl	800794c <_Z5delaym>

	// Check if the IMU can be addressed
	if (not (this->check())) {
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f8ed 	bl	8007cc2 <_ZN6BMI1605checkEv>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf0c      	ite	eq
 8007aee:	2301      	moveq	r3, #1
 8007af0:	2300      	movne	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <_ZN6BMI1604initE15bmi160_config_t+0x56>
		return 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	e072      	b.n	8007be2 <_ZN6BMI1604initE15bmi160_config_t+0x13c>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
	}

	// Reset the IMU to delete all previously loaded registers
	this->reset();
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fe78 	bl	80087f2 <_ZN6BMI1605resetEv>

	// Wait until the reset is finished
	delay(250);
 8007b02:	20fa      	movs	r0, #250	; 0xfa
 8007b04:	f7ff ff22 	bl	800794c <_Z5delaym>

	// Make a dummy read again to turn on SPI
	this->readRegister(0x7F);
 8007b08:	217f      	movs	r1, #127	; 0x7f
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f870 	bl	8007bf0 <_ZN6BMI16012readRegisterEh>

	// Set the power mode to normal in order for all registers to be writable
	this->setPowerMode(BMI160_Power_Normal);
 8007b10:	2100      	movs	r1, #0
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fe38 	bl	8008788 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>

	// Set the accelerometer setting
	this->setAccConfig(this->_config.acc.odr | this->_config.acc.bw,
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b2d9      	uxtb	r1, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fe10 	bl	8008756 <_ZN6BMI16012setAccConfigEhh>
			this->_config.acc.range);

	// Set the gyroscope setting
	this->setGyroConfig(this->_config.gyr.odr | this->_config.gyr.bw,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b42:	4313      	orrs	r3, r2
 8007b44:	b2d9      	uxtb	r1, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fde8 	bl	8008724 <_ZN6BMI16013setGyroConfigEhh>
			this->_config.gyr.range);

	// Check if the settings have been set correctly

	uint8_t acc_config_reg = this->readRegister(BMI160_REG_ACCEL_CONFIG);
 8007b54:	2140      	movs	r1, #64	; 0x40
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f84a 	bl	8007bf0 <_ZN6BMI16012readRegisterEh>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
	uint8_t acc_range_reg = this->readRegister(BMI160_REG_ACCEL_RANGE);
 8007b60:	2141      	movs	r1, #65	; 0x41
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f844 	bl	8007bf0 <_ZN6BMI16012readRegisterEh>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73bb      	strb	r3, [r7, #14]
	uint8_t gyr_config_reg = this->readRegister(BMI160_REG_GYRO_CONFIG);
 8007b6c:	2142      	movs	r1, #66	; 0x42
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f83e 	bl	8007bf0 <_ZN6BMI16012readRegisterEh>
 8007b74:	4603      	mov	r3, r0
 8007b76:	737b      	strb	r3, [r7, #13]
	uint8_t gyr_range_reg = this->readRegister(BMI160_REG_GYRO_RANGE);
 8007b78:	2143      	movs	r1, #67	; 0x43
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f838 	bl	8007bf0 <_ZN6BMI16012readRegisterEh>
 8007b80:	4603      	mov	r3, r0
 8007b82:	733b      	strb	r3, [r7, #12]

	if (acc_config_reg != (this->_config.acc.odr | this->_config.acc.bw)) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007b90:	4313      	orrs	r3, r2
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	7bfa      	ldrb	r2, [r7, #15]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d002      	beq.n	8007ba0 <_ZN6BMI1604initE15bmi160_config_t+0xfa>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8007b9a:	2008      	movs	r0, #8
 8007b9c:	f000 fe4f 	bl	800883e <_Z17core_ErrorHandleri>
	}
	if (acc_range_reg != this->_config.acc.range) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007ba6:	7bba      	ldrb	r2, [r7, #14]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d002      	beq.n	8007bb2 <_ZN6BMI1604initE15bmi160_config_t+0x10c>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8007bac:	2008      	movs	r0, #8
 8007bae:	f000 fe46 	bl	800883e <_Z17core_ErrorHandleri>
	}
	if (gyr_config_reg != (this->_config.gyr.odr | this->_config.gyr.bw)) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	7b7a      	ldrb	r2, [r7, #13]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d002      	beq.n	8007bce <_ZN6BMI1604initE15bmi160_config_t+0x128>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8007bc8:	2008      	movs	r0, #8
 8007bca:	f000 fe38 	bl	800883e <_Z17core_ErrorHandleri>
	}
	if (gyr_range_reg != this->_config.gyr.range) {
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd4:	7b3a      	ldrb	r2, [r7, #12]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d002      	beq.n	8007be0 <_ZN6BMI1604initE15bmi160_config_t+0x13a>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 8007bda:	2008      	movs	r0, #8
 8007bdc:	f000 fe2f 	bl	800883e <_Z17core_ErrorHandleri>
	}

	return CORE_OK;
 8007be0:	2301      	movs	r3, #1
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007bec:	b004      	add	sp, #16
 8007bee:	4770      	bx	lr

08007bf0 <_ZN6BMI16012readRegisterEh>:

/* ============================================================================= */
uint8_t BMI160::readRegister(uint8_t reg) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
	reg |= 0x80;
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c14:	2200      	movs	r2, #0
 8007c16:	4619      	mov	r1, r3
 8007c18:	f7f9 fe0e 	bl	8001838 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c20:	1cf9      	adds	r1, r7, #3
 8007c22:	230a      	movs	r3, #10
 8007c24:	2201      	movs	r2, #1
 8007c26:	f7fb f8af 	bl	8002d88 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, &ret, 1, 10);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c2e:	f107 010f 	add.w	r1, r7, #15
 8007c32:	230a      	movs	r3, #10
 8007c34:	2201      	movs	r2, #1
 8007c36:	f7fb fa1c 	bl	8003072 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c44:	2201      	movs	r2, #1
 8007c46:	4619      	mov	r1, r3
 8007c48:	f7f9 fdf6 	bl	8001838 <HAL_GPIO_WritePin>

	return ret;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <_ZN6BMI16020readMultipleRegisterEhPhh>:

/* ============================================================================= */
uint8_t BMI160::readMultipleRegister(uint8_t reg, uint8_t *data, uint8_t len) {
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	461a      	mov	r2, r3
 8007c62:	460b      	mov	r3, r1
 8007c64:	72fb      	strb	r3, [r7, #11]
 8007c66:	4613      	mov	r3, r2
 8007c68:	72bb      	strb	r3, [r7, #10]
//	reg += 0x80;
	reg |= 0x80;
 8007c6a:	7afb      	ldrb	r3, [r7, #11]
 8007c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4619      	mov	r1, r3
 8007c82:	f7f9 fdd9 	bl	8001838 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c8a:	f107 010b 	add.w	r1, r7, #11
 8007c8e:	230a      	movs	r3, #10
 8007c90:	2201      	movs	r2, #1
 8007c92:	f7fb f879 	bl	8002d88 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, data, len, 10);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c9a:	7abb      	ldrb	r3, [r7, #10]
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	230a      	movs	r3, #10
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	f7fb f9e6 	bl	8003072 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	f7f9 fdc0 	bl	8001838 <HAL_GPIO_WritePin>

	return CORE_OK;
 8007cb8:	2301      	movs	r3, #1
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <_ZN6BMI1605checkEv>:

/* ============================================================================= */
uint8_t BMI160::check() {
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
	uint8_t id = this->readID();
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f80c 	bl	8007ce8 <_ZN6BMI1606readIDEv>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
	if (id != 209) {
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2bd1      	cmp	r3, #209	; 0xd1
 8007cd8:	d001      	beq.n	8007cde <_ZN6BMI1605checkEv+0x1c>
		return 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e000      	b.n	8007ce0 <_ZN6BMI1605checkEv+0x1e>
	}

	return CORE_OK;
 8007cde:	2301      	movs	r3, #1
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <_ZN6BMI1606readIDEv>:

/* ============================================================================= */
uint8_t BMI160::readID() {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	return this->readRegister(BMI160_REG_CHIP_ID);
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff ff7c 	bl	8007bf0 <_ZN6BMI16012readRegisterEh>
 8007cf8:	4603      	mov	r3, r0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <_ZN6BMI1606updateEv>:

/* ============================================================================= */
void BMI160::update() {
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
	this->fetchData();
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f807 	bl	8007d1e <_ZN6BMI1609fetchDataEv>
	this->processData();
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f815 	bl	8007d40 <_ZN6BMI16011processDataEv>
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <_ZN6BMI1609fetchDataEv>:

/* ============================================================================= */
uint8_t BMI160::fetchData() {
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
//	this->readSensorTime();
	this->readGyr();
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fc9a 	bl	8008660 <_ZN6BMI1607readGyrEv>
	this->readAcc();
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fcc8 	bl	80086c2 <_ZN6BMI1607readAccEv>

	return 1;
 8007d32:	2301      	movs	r3, #1
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	0000      	movs	r0, r0
	...

08007d40 <_ZN6BMI16011processDataEv>:

/* ============================================================================= */
uint8_t BMI160::processData() {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]

	// Gyroscope
	switch (this->_config.gyr.range) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	f200 8282 	bhi.w	8008258 <_ZN6BMI16011processDataEv+0x518>
 8007d54:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <_ZN6BMI16011processDataEv+0x1c>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08008161 	.word	0x08008161
 8007d60:	08008069 	.word	0x08008069
 8007d64:	08007f61 	.word	0x08007f61
 8007d68:	08007e69 	.word	0x08007e69
 8007d6c:	08007d71 	.word	0x08007d71
	case BMI160_GYRO_RANGE_125_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7f8 fb7c 	bl	8000474 <__aeabi_i2d>
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	4bb5      	ldr	r3, [pc, #724]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8007d82:	f7f8 fd0b 	bl	800079c <__aeabi_ddiv>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f04f 0200 	mov.w	r2, #0
 8007d92:	4bb2      	ldr	r3, [pc, #712]	; (800805c <_ZN6BMI16011processDataEv+0x31c>)
 8007d94:	f7f8 fbd8 	bl	8000548 <__aeabi_dmul>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f7f8 fde4 	bl	800096c <__aeabi_d2f>
 8007da4:	4603      	mov	r3, r0
 8007da6:	ee00 3a10 	vmov	s0, r3
 8007daa:	f7ff fdb3 	bl	8007914 <_Z7deg2radf>
 8007dae:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007db8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7f8 fb53 	bl	8000474 <__aeabi_i2d>
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	4ba1      	ldr	r3, [pc, #644]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8007dd4:	f7f8 fce2 	bl	800079c <__aeabi_ddiv>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4619      	mov	r1, r3
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	4b9d      	ldr	r3, [pc, #628]	; (800805c <_ZN6BMI16011processDataEv+0x31c>)
 8007de6:	f7f8 fbaf 	bl	8000548 <__aeabi_dmul>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4610      	mov	r0, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	f7f8 fdbb 	bl	800096c <__aeabi_d2f>
 8007df6:	4603      	mov	r3, r0
 8007df8:	ee00 3a10 	vmov	s0, r3
 8007dfc:	f7ff fd8a 	bl	8007914 <_Z7deg2radf>
 8007e00:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7f8 fb2a 	bl	8000474 <__aeabi_i2d>
 8007e20:	f04f 0200 	mov.w	r2, #0
 8007e24:	4b8c      	ldr	r3, [pc, #560]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8007e26:	f7f8 fcb9 	bl	800079c <__aeabi_ddiv>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4619      	mov	r1, r3
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	4b89      	ldr	r3, [pc, #548]	; (800805c <_ZN6BMI16011processDataEv+0x31c>)
 8007e38:	f7f8 fb86 	bl	8000548 <__aeabi_dmul>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4610      	mov	r0, r2
 8007e42:	4619      	mov	r1, r3
 8007e44:	f7f8 fd92 	bl	800096c <__aeabi_d2f>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	ee00 3a10 	vmov	s0, r3
 8007e4e:	f7ff fd61 	bl	8007914 <_Z7deg2radf>
 8007e52:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8007e66:	e1f7      	b.n	8008258 <_ZN6BMI16011processDataEv+0x518>
	}
	case BMI160_GYRO_RANGE_250_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7f8 fb00 	bl	8000474 <__aeabi_i2d>
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	4b77      	ldr	r3, [pc, #476]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8007e7a:	f7f8 fc8f 	bl	800079c <__aeabi_ddiv>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4610      	mov	r0, r2
 8007e84:	4619      	mov	r1, r3
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	4b75      	ldr	r3, [pc, #468]	; (8008060 <_ZN6BMI16011processDataEv+0x320>)
 8007e8c:	f7f8 fb5c 	bl	8000548 <__aeabi_dmul>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4610      	mov	r0, r2
 8007e96:	4619      	mov	r1, r3
 8007e98:	f7f8 fd68 	bl	800096c <__aeabi_d2f>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	ee00 3a10 	vmov	s0, r3
 8007ea2:	f7ff fd37 	bl	8007914 <_Z7deg2radf>
 8007ea6:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7f8 fad7 	bl	8000474 <__aeabi_i2d>
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	4b63      	ldr	r3, [pc, #396]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8007ecc:	f7f8 fc66 	bl	800079c <__aeabi_ddiv>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	4b60      	ldr	r3, [pc, #384]	; (8008060 <_ZN6BMI16011processDataEv+0x320>)
 8007ede:	f7f8 fb33 	bl	8000548 <__aeabi_dmul>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f7f8 fd3f 	bl	800096c <__aeabi_d2f>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	ee00 3a10 	vmov	s0, r3
 8007ef4:	f7ff fd0e 	bl	8007914 <_Z7deg2radf>
 8007ef8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007f02:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7f8 faae 	bl	8000474 <__aeabi_i2d>
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	4b4e      	ldr	r3, [pc, #312]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8007f1e:	f7f8 fc3d 	bl	800079c <__aeabi_ddiv>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4610      	mov	r0, r2
 8007f28:	4619      	mov	r1, r3
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	4b4c      	ldr	r3, [pc, #304]	; (8008060 <_ZN6BMI16011processDataEv+0x320>)
 8007f30:	f7f8 fb0a 	bl	8000548 <__aeabi_dmul>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	f7f8 fd16 	bl	800096c <__aeabi_d2f>
 8007f40:	4603      	mov	r3, r0
 8007f42:	ee00 3a10 	vmov	s0, r3
 8007f46:	f7ff fce5 	bl	8007914 <_Z7deg2radf>
 8007f4a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f54:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8007f5e:	e17b      	b.n	8008258 <_ZN6BMI16011processDataEv+0x518>
	}
	case BMI160_GYRO_RANGE_500_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7f8 fa84 	bl	8000474 <__aeabi_i2d>
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	4b39      	ldr	r3, [pc, #228]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8007f72:	f7f8 fc13 	bl	800079c <__aeabi_ddiv>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	4b38      	ldr	r3, [pc, #224]	; (8008064 <_ZN6BMI16011processDataEv+0x324>)
 8007f84:	f7f8 fae0 	bl	8000548 <__aeabi_dmul>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4619      	mov	r1, r3
 8007f90:	f7f8 fcec 	bl	800096c <__aeabi_d2f>
 8007f94:	4603      	mov	r3, r0
 8007f96:	ee00 3a10 	vmov	s0, r3
 8007f9a:	f7ff fcbb 	bl	8007914 <_Z7deg2radf>
 8007f9e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7f8 fa5b 	bl	8000474 <__aeabi_i2d>
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	4b25      	ldr	r3, [pc, #148]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8007fc4:	f7f8 fbea 	bl	800079c <__aeabi_ddiv>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	4b23      	ldr	r3, [pc, #140]	; (8008064 <_ZN6BMI16011processDataEv+0x324>)
 8007fd6:	f7f8 fab7 	bl	8000548 <__aeabi_dmul>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	f7f8 fcc3 	bl	800096c <__aeabi_d2f>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	ee00 3a10 	vmov	s0, r3
 8007fec:	f7ff fc92 	bl	8007914 <_Z7deg2radf>
 8007ff0:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800800a:	4618      	mov	r0, r3
 800800c:	f7f8 fa32 	bl	8000474 <__aeabi_i2d>
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	4b10      	ldr	r3, [pc, #64]	; (8008058 <_ZN6BMI16011processDataEv+0x318>)
 8008016:	f7f8 fbc1 	bl	800079c <__aeabi_ddiv>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4610      	mov	r0, r2
 8008020:	4619      	mov	r1, r3
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <_ZN6BMI16011processDataEv+0x324>)
 8008028:	f7f8 fa8e 	bl	8000548 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4610      	mov	r0, r2
 8008032:	4619      	mov	r1, r3
 8008034:	f7f8 fc9a 	bl	800096c <__aeabi_d2f>
 8008038:	4603      	mov	r3, r0
 800803a:	ee00 3a10 	vmov	s0, r3
 800803e:	f7ff fc69 	bl	8007914 <_Z7deg2radf>
 8008042:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800804c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8008056:	e0ff      	b.n	8008258 <_ZN6BMI16011processDataEv+0x518>
 8008058:	40e00000 	.word	0x40e00000
 800805c:	405f4000 	.word	0x405f4000
 8008060:	406f4000 	.word	0x406f4000
 8008064:	407f4000 	.word	0x407f4000
	}
	case BMI160_GYRO_RANGE_1000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800806e:	4618      	mov	r0, r3
 8008070:	f7f8 fa00 	bl	8000474 <__aeabi_i2d>
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	4bc1      	ldr	r3, [pc, #772]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 800807a:	f7f8 fb8f 	bl	800079c <__aeabi_ddiv>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4610      	mov	r0, r2
 8008084:	4619      	mov	r1, r3
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	4bbe      	ldr	r3, [pc, #760]	; (8008384 <_ZN6BMI16011processDataEv+0x644>)
 800808c:	f7f8 fa5c 	bl	8000548 <__aeabi_dmul>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4610      	mov	r0, r2
 8008096:	4619      	mov	r1, r3
 8008098:	f7f8 fc68 	bl	800096c <__aeabi_d2f>
 800809c:	4603      	mov	r3, r0
 800809e:	ee00 3a10 	vmov	s0, r3
 80080a2:	f7ff fc37 	bl	8007914 <_Z7deg2radf>
 80080a6:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80080b0:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7f8 f9d7 	bl	8000474 <__aeabi_i2d>
 80080c6:	f04f 0200 	mov.w	r2, #0
 80080ca:	4bad      	ldr	r3, [pc, #692]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 80080cc:	f7f8 fb66 	bl	800079c <__aeabi_ddiv>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4610      	mov	r0, r2
 80080d6:	4619      	mov	r1, r3
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	4ba9      	ldr	r3, [pc, #676]	; (8008384 <_ZN6BMI16011processDataEv+0x644>)
 80080de:	f7f8 fa33 	bl	8000548 <__aeabi_dmul>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4610      	mov	r0, r2
 80080e8:	4619      	mov	r1, r3
 80080ea:	f7f8 fc3f 	bl	800096c <__aeabi_d2f>
 80080ee:	4603      	mov	r3, r0
 80080f0:	ee00 3a10 	vmov	s0, r3
 80080f4:	f7ff fc0e 	bl	8007914 <_Z7deg2radf>
 80080f8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008102:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008112:	4618      	mov	r0, r3
 8008114:	f7f8 f9ae 	bl	8000474 <__aeabi_i2d>
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	4b98      	ldr	r3, [pc, #608]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 800811e:	f7f8 fb3d 	bl	800079c <__aeabi_ddiv>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4610      	mov	r0, r2
 8008128:	4619      	mov	r1, r3
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	4b95      	ldr	r3, [pc, #596]	; (8008384 <_ZN6BMI16011processDataEv+0x644>)
 8008130:	f7f8 fa0a 	bl	8000548 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	f7f8 fc16 	bl	800096c <__aeabi_d2f>
 8008140:	4603      	mov	r3, r0
 8008142:	ee00 3a10 	vmov	s0, r3
 8008146:	f7ff fbe5 	bl	8007914 <_Z7deg2radf>
 800814a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008154:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 800815e:	e07b      	b.n	8008258 <_ZN6BMI16011processDataEv+0x518>
	}
	case BMI160_GYRO_RANGE_2000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008166:	4618      	mov	r0, r3
 8008168:	f7f8 f984 	bl	8000474 <__aeabi_i2d>
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	4b83      	ldr	r3, [pc, #524]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 8008172:	f7f8 fb13 	bl	800079c <__aeabi_ddiv>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4610      	mov	r0, r2
 800817c:	4619      	mov	r1, r3
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	4b81      	ldr	r3, [pc, #516]	; (8008388 <_ZN6BMI16011processDataEv+0x648>)
 8008184:	f7f8 f9e0 	bl	8000548 <__aeabi_dmul>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4610      	mov	r0, r2
 800818e:	4619      	mov	r1, r3
 8008190:	f7f8 fbec 	bl	800096c <__aeabi_d2f>
 8008194:	4603      	mov	r3, r0
 8008196:	ee00 3a10 	vmov	s0, r3
 800819a:	f7ff fbbb 	bl	8007914 <_Z7deg2radf>
 800819e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80081a8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7f8 f95b 	bl	8000474 <__aeabi_i2d>
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	4b6f      	ldr	r3, [pc, #444]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 80081c4:	f7f8 faea 	bl	800079c <__aeabi_ddiv>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4610      	mov	r0, r2
 80081ce:	4619      	mov	r1, r3
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	4b6c      	ldr	r3, [pc, #432]	; (8008388 <_ZN6BMI16011processDataEv+0x648>)
 80081d6:	f7f8 f9b7 	bl	8000548 <__aeabi_dmul>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4610      	mov	r0, r2
 80081e0:	4619      	mov	r1, r3
 80081e2:	f7f8 fbc3 	bl	800096c <__aeabi_d2f>
 80081e6:	4603      	mov	r3, r0
 80081e8:	ee00 3a10 	vmov	s0, r3
 80081ec:	f7ff fb92 	bl	8007914 <_Z7deg2radf>
 80081f0:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80081fa:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800820a:	4618      	mov	r0, r3
 800820c:	f7f8 f932 	bl	8000474 <__aeabi_i2d>
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	4b5a      	ldr	r3, [pc, #360]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 8008216:	f7f8 fac1 	bl	800079c <__aeabi_ddiv>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4610      	mov	r0, r2
 8008220:	4619      	mov	r1, r3
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	4b58      	ldr	r3, [pc, #352]	; (8008388 <_ZN6BMI16011processDataEv+0x648>)
 8008228:	f7f8 f98e 	bl	8000548 <__aeabi_dmul>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4610      	mov	r0, r2
 8008232:	4619      	mov	r1, r3
 8008234:	f7f8 fb9a 	bl	800096c <__aeabi_d2f>
 8008238:	4603      	mov	r3, r0
 800823a:	ee00 3a10 	vmov	s0, r3
 800823e:	f7ff fb69 	bl	8007914 <_Z7deg2radf>
 8008242:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800824c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8008256:	bf00      	nop
	}
	}

	// Accelerometer
	switch (this->_config.acc.range) {
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800825e:	3b03      	subs	r3, #3
 8008260:	2b09      	cmp	r3, #9
 8008262:	f200 81ec 	bhi.w	800863e <_ZN6BMI16011processDataEv+0x8fe>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <_ZN6BMI16011processDataEv+0x52c>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008295 	.word	0x08008295
 8008270:	0800863f 	.word	0x0800863f
 8008274:	0800838d 	.word	0x0800838d
 8008278:	0800863f 	.word	0x0800863f
 800827c:	0800863f 	.word	0x0800863f
 8008280:	08008473 	.word	0x08008473
 8008284:	0800863f 	.word	0x0800863f
 8008288:	0800863f 	.word	0x0800863f
 800828c:	0800863f 	.word	0x0800863f
 8008290:	08008559 	.word	0x08008559
	case BMI160_ACCEL_RANGE_2G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 2.0 * 9.81;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800829a:	4618      	mov	r0, r3
 800829c:	f7f8 f8ea 	bl	8000474 <__aeabi_i2d>
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	4b36      	ldr	r3, [pc, #216]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 80082a6:	f7f8 fa79 	bl	800079c <__aeabi_ddiv>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4610      	mov	r0, r2
 80082b0:	4619      	mov	r1, r3
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	f7f7 ff91 	bl	80001dc <__adddf3>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4610      	mov	r0, r2
 80082c0:	4619      	mov	r1, r3
 80082c2:	a32d      	add	r3, pc, #180	; (adr r3, 8008378 <_ZN6BMI16011processDataEv+0x638>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f8 f93e 	bl	8000548 <__aeabi_dmul>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4610      	mov	r0, r2
 80082d2:	4619      	mov	r1, r3
 80082d4:	f7f8 fb4a 	bl	800096c <__aeabi_d2f>
 80082d8:	4602      	mov	r2, r0
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	61da      	str	r2, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 2.0 * 9.81;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7f8 f8c5 	bl	8000474 <__aeabi_i2d>
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	4b24      	ldr	r3, [pc, #144]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 80082f0:	f7f8 fa54 	bl	800079c <__aeabi_ddiv>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4610      	mov	r0, r2
 80082fa:	4619      	mov	r1, r3
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	f7f7 ff6c 	bl	80001dc <__adddf3>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4610      	mov	r0, r2
 800830a:	4619      	mov	r1, r3
 800830c:	a31a      	add	r3, pc, #104	; (adr r3, 8008378 <_ZN6BMI16011processDataEv+0x638>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f7f8 f919 	bl	8000548 <__aeabi_dmul>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4610      	mov	r0, r2
 800831c:	4619      	mov	r1, r3
 800831e:	f7f8 fb25 	bl	800096c <__aeabi_d2f>
 8008322:	4602      	mov	r2, r0
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	621a      	str	r2, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 2.0 * 9.81;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800832e:	4618      	mov	r0, r3
 8008330:	f7f8 f8a0 	bl	8000474 <__aeabi_i2d>
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <_ZN6BMI16011processDataEv+0x640>)
 800833a:	f7f8 fa2f 	bl	800079c <__aeabi_ddiv>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4610      	mov	r0, r2
 8008344:	4619      	mov	r1, r3
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	f7f7 ff47 	bl	80001dc <__adddf3>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	a308      	add	r3, pc, #32	; (adr r3, 8008378 <_ZN6BMI16011processDataEv+0x638>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f7f8 f8f4 	bl	8000548 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4610      	mov	r0, r2
 8008366:	4619      	mov	r1, r3
 8008368:	f7f8 fb00 	bl	800096c <__aeabi_d2f>
 800836c:	4602      	mov	r2, r0
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8008372:	e164      	b.n	800863e <_ZN6BMI16011processDataEv+0x8fe>
 8008374:	f3af 8000 	nop.w
 8008378:	51eb851f 	.word	0x51eb851f
 800837c:	40239eb8 	.word	0x40239eb8
 8008380:	40e00000 	.word	0x40e00000
 8008384:	408f4000 	.word	0x408f4000
 8008388:	409f4000 	.word	0x409f4000
	}
	case BMI160_ACCEL_RANGE_4G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 4.0 * 9.81;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008392:	4618      	mov	r0, r3
 8008394:	f7f8 f86e 	bl	8000474 <__aeabi_i2d>
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	4bac      	ldr	r3, [pc, #688]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 800839e:	f7f8 f9fd 	bl	800079c <__aeabi_ddiv>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4610      	mov	r0, r2
 80083a8:	4619      	mov	r1, r3
 80083aa:	f04f 0200 	mov.w	r2, #0
 80083ae:	4ba9      	ldr	r3, [pc, #676]	; (8008654 <_ZN6BMI16011processDataEv+0x914>)
 80083b0:	f7f8 f8ca 	bl	8000548 <__aeabi_dmul>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4610      	mov	r0, r2
 80083ba:	4619      	mov	r1, r3
 80083bc:	a3a2      	add	r3, pc, #648	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f7f8 f8c1 	bl	8000548 <__aeabi_dmul>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4610      	mov	r0, r2
 80083cc:	4619      	mov	r1, r3
 80083ce:	f7f8 facd 	bl	800096c <__aeabi_d2f>
 80083d2:	4602      	mov	r2, r0
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	61da      	str	r2, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 4.0 * 9.81;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f8 f848 	bl	8000474 <__aeabi_i2d>
 80083e4:	f04f 0200 	mov.w	r2, #0
 80083e8:	4b99      	ldr	r3, [pc, #612]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 80083ea:	f7f8 f9d7 	bl	800079c <__aeabi_ddiv>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4610      	mov	r0, r2
 80083f4:	4619      	mov	r1, r3
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	4b96      	ldr	r3, [pc, #600]	; (8008654 <_ZN6BMI16011processDataEv+0x914>)
 80083fc:	f7f8 f8a4 	bl	8000548 <__aeabi_dmul>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	a38f      	add	r3, pc, #572	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f8 f89b 	bl	8000548 <__aeabi_dmul>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f7f8 faa7 	bl	800096c <__aeabi_d2f>
 800841e:	4602      	mov	r2, r0
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	621a      	str	r2, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 4.0 * 9.81;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800842a:	4618      	mov	r0, r3
 800842c:	f7f8 f822 	bl	8000474 <__aeabi_i2d>
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	4b86      	ldr	r3, [pc, #536]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 8008436:	f7f8 f9b1 	bl	800079c <__aeabi_ddiv>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4610      	mov	r0, r2
 8008440:	4619      	mov	r1, r3
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	4b83      	ldr	r3, [pc, #524]	; (8008654 <_ZN6BMI16011processDataEv+0x914>)
 8008448:	f7f8 f87e 	bl	8000548 <__aeabi_dmul>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4610      	mov	r0, r2
 8008452:	4619      	mov	r1, r3
 8008454:	a37c      	add	r3, pc, #496	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f7f8 f875 	bl	8000548 <__aeabi_dmul>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4610      	mov	r0, r2
 8008464:	4619      	mov	r1, r3
 8008466:	f7f8 fa81 	bl	800096c <__aeabi_d2f>
 800846a:	4602      	mov	r2, r0
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8008470:	e0e5      	b.n	800863e <_ZN6BMI16011processDataEv+0x8fe>
	}
	case BMI160_ACCEL_RANGE_8G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 8.0 * 9.81;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008478:	4618      	mov	r0, r3
 800847a:	f7f7 fffb 	bl	8000474 <__aeabi_i2d>
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	4b73      	ldr	r3, [pc, #460]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 8008484:	f7f8 f98a 	bl	800079c <__aeabi_ddiv>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4610      	mov	r0, r2
 800848e:	4619      	mov	r1, r3
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	4b70      	ldr	r3, [pc, #448]	; (8008658 <_ZN6BMI16011processDataEv+0x918>)
 8008496:	f7f8 f857 	bl	8000548 <__aeabi_dmul>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	a369      	add	r3, pc, #420	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f8 f84e 	bl	8000548 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4610      	mov	r0, r2
 80084b2:	4619      	mov	r1, r3
 80084b4:	f7f8 fa5a 	bl	800096c <__aeabi_d2f>
 80084b8:	4602      	mov	r2, r0
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	61da      	str	r2, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 8.0 * 9.81;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7f7 ffd5 	bl	8000474 <__aeabi_i2d>
 80084ca:	f04f 0200 	mov.w	r2, #0
 80084ce:	4b60      	ldr	r3, [pc, #384]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 80084d0:	f7f8 f964 	bl	800079c <__aeabi_ddiv>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4610      	mov	r0, r2
 80084da:	4619      	mov	r1, r3
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	4b5d      	ldr	r3, [pc, #372]	; (8008658 <_ZN6BMI16011processDataEv+0x918>)
 80084e2:	f7f8 f831 	bl	8000548 <__aeabi_dmul>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4610      	mov	r0, r2
 80084ec:	4619      	mov	r1, r3
 80084ee:	a356      	add	r3, pc, #344	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	f7f8 f828 	bl	8000548 <__aeabi_dmul>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4610      	mov	r0, r2
 80084fe:	4619      	mov	r1, r3
 8008500:	f7f8 fa34 	bl	800096c <__aeabi_d2f>
 8008504:	4602      	mov	r2, r0
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	621a      	str	r2, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 8.0 * 9.81;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8008510:	4618      	mov	r0, r3
 8008512:	f7f7 ffaf 	bl	8000474 <__aeabi_i2d>
 8008516:	f04f 0200 	mov.w	r2, #0
 800851a:	4b4d      	ldr	r3, [pc, #308]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 800851c:	f7f8 f93e 	bl	800079c <__aeabi_ddiv>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4610      	mov	r0, r2
 8008526:	4619      	mov	r1, r3
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	4b4a      	ldr	r3, [pc, #296]	; (8008658 <_ZN6BMI16011processDataEv+0x918>)
 800852e:	f7f8 f80b 	bl	8000548 <__aeabi_dmul>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	4610      	mov	r0, r2
 8008538:	4619      	mov	r1, r3
 800853a:	a343      	add	r3, pc, #268	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f8 f802 	bl	8000548 <__aeabi_dmul>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4610      	mov	r0, r2
 800854a:	4619      	mov	r1, r3
 800854c:	f7f8 fa0e 	bl	800096c <__aeabi_d2f>
 8008550:	4602      	mov	r2, r0
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8008556:	e072      	b.n	800863e <_ZN6BMI16011processDataEv+0x8fe>
	}
	case BMI160_ACCEL_RANGE_16G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 16.0 * 9.81;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800855e:	4618      	mov	r0, r3
 8008560:	f7f7 ff88 	bl	8000474 <__aeabi_i2d>
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	4b39      	ldr	r3, [pc, #228]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 800856a:	f7f8 f917 	bl	800079c <__aeabi_ddiv>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4610      	mov	r0, r2
 8008574:	4619      	mov	r1, r3
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	4b38      	ldr	r3, [pc, #224]	; (800865c <_ZN6BMI16011processDataEv+0x91c>)
 800857c:	f7f7 ffe4 	bl	8000548 <__aeabi_dmul>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4610      	mov	r0, r2
 8008586:	4619      	mov	r1, r3
 8008588:	a32f      	add	r3, pc, #188	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f7 ffdb 	bl	8000548 <__aeabi_dmul>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4610      	mov	r0, r2
 8008598:	4619      	mov	r1, r3
 800859a:	f7f8 f9e7 	bl	800096c <__aeabi_d2f>
 800859e:	4602      	mov	r2, r0
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	61da      	str	r2, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 16.0 * 9.81;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f7 ff62 	bl	8000474 <__aeabi_i2d>
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	4b26      	ldr	r3, [pc, #152]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 80085b6:	f7f8 f8f1 	bl	800079c <__aeabi_ddiv>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4610      	mov	r0, r2
 80085c0:	4619      	mov	r1, r3
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	4b25      	ldr	r3, [pc, #148]	; (800865c <_ZN6BMI16011processDataEv+0x91c>)
 80085c8:	f7f7 ffbe 	bl	8000548 <__aeabi_dmul>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4610      	mov	r0, r2
 80085d2:	4619      	mov	r1, r3
 80085d4:	a31c      	add	r3, pc, #112	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	f7f7 ffb5 	bl	8000548 <__aeabi_dmul>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	f7f8 f9c1 	bl	800096c <__aeabi_d2f>
 80085ea:	4602      	mov	r2, r0
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	621a      	str	r2, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 16.0 * 9.81;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f7 ff3c 	bl	8000474 <__aeabi_i2d>
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	4b13      	ldr	r3, [pc, #76]	; (8008650 <_ZN6BMI16011processDataEv+0x910>)
 8008602:	f7f8 f8cb 	bl	800079c <__aeabi_ddiv>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4610      	mov	r0, r2
 800860c:	4619      	mov	r1, r3
 800860e:	f04f 0200 	mov.w	r2, #0
 8008612:	4b12      	ldr	r3, [pc, #72]	; (800865c <_ZN6BMI16011processDataEv+0x91c>)
 8008614:	f7f7 ff98 	bl	8000548 <__aeabi_dmul>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4610      	mov	r0, r2
 800861e:	4619      	mov	r1, r3
 8008620:	a309      	add	r3, pc, #36	; (adr r3, 8008648 <_ZN6BMI16011processDataEv+0x908>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f7f7 ff8f 	bl	8000548 <__aeabi_dmul>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4610      	mov	r0, r2
 8008630:	4619      	mov	r1, r3
 8008632:	f7f8 f99b 	bl	800096c <__aeabi_d2f>
 8008636:	4602      	mov	r2, r0
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 800863c:	bf00      	nop
	}
	}

	return 1;
 800863e:	2301      	movs	r3, #1
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	51eb851f 	.word	0x51eb851f
 800864c:	40239eb8 	.word	0x40239eb8
 8008650:	40e00000 	.word	0x40e00000
 8008654:	40100000 	.word	0x40100000
 8008658:	40200000 	.word	0x40200000
 800865c:	40300000 	.word	0x40300000

08008660 <_ZN6BMI1607readGyrEv>:
	this->gyr_calib.y = gyr_y;
	this->gyr_calib.z = gyr_z;
}

/* ============================================================================= */
uint8_t BMI160::readGyr() {
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
	uint8_t gyr_data[6] = { 0 };
 8008668:	2300      	movs	r3, #0
 800866a:	60bb      	str	r3, [r7, #8]
 800866c:	2300      	movs	r3, #0
 800866e:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_GYR_X_LOW, gyr_data, 6);
 8008670:	f107 0208 	add.w	r2, r7, #8
 8008674:	2306      	movs	r3, #6
 8008676:	210c      	movs	r1, #12
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff faec 	bl	8007c56 <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->gyr_raw.x = bytearray_to_int16(&gyr_data[0]);
 800867e:	f107 0308 	add.w	r3, r7, #8
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f8c5 	bl	8008812 <_Z18bytearray_to_int16Ph>
 8008688:	4603      	mov	r3, r0
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	801a      	strh	r2, [r3, #0]
	this->gyr_raw.y = bytearray_to_int16(&gyr_data[2]);
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	3302      	adds	r3, #2
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f8bb 	bl	8008812 <_Z18bytearray_to_int16Ph>
 800869c:	4603      	mov	r3, r0
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	805a      	strh	r2, [r3, #2]
	this->gyr_raw.z = bytearray_to_int16(&gyr_data[4]);
 80086a4:	f107 0308 	add.w	r3, r7, #8
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f8b1 	bl	8008812 <_Z18bytearray_to_int16Ph>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	809a      	strh	r2, [r3, #4]

	return 1;
 80086b8:	2301      	movs	r3, #1
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <_ZN6BMI1607readAccEv>:

/* ============================================================================= */
uint8_t BMI160::readAcc() {
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6] = { 0 };
 80086ca:	2300      	movs	r3, #0
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	2300      	movs	r3, #0
 80086d0:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_ACC_X_LOW, acc_data, 6);
 80086d2:	f107 0208 	add.w	r2, r7, #8
 80086d6:	2306      	movs	r3, #6
 80086d8:	2112      	movs	r1, #18
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff fabb 	bl	8007c56 <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->acc_raw.x = bytearray_to_int16(&acc_data[0]);
 80086e0:	f107 0308 	add.w	r3, r7, #8
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f894 	bl	8008812 <_Z18bytearray_to_int16Ph>
 80086ea:	4603      	mov	r3, r0
 80086ec:	461a      	mov	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	829a      	strh	r2, [r3, #20]
	this->acc_raw.y = bytearray_to_int16(&acc_data[2]);
 80086f2:	f107 0308 	add.w	r3, r7, #8
 80086f6:	3302      	adds	r3, #2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 f88a 	bl	8008812 <_Z18bytearray_to_int16Ph>
 80086fe:	4603      	mov	r3, r0
 8008700:	461a      	mov	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	82da      	strh	r2, [r3, #22]
	this->acc_raw.z = bytearray_to_int16(&acc_data[4]);
 8008706:	f107 0308 	add.w	r3, r7, #8
 800870a:	3304      	adds	r3, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f880 	bl	8008812 <_Z18bytearray_to_int16Ph>
 8008712:	4603      	mov	r3, r0
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	831a      	strh	r2, [r3, #24]

	return 1;
 800871a:	2301      	movs	r3, #1
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <_ZN6BMI16013setGyroConfigEhh>:
	this->sensortime = bytearray_to_uint32(sensortime_data);
	return CORE_OK;
}

/* ============================================================================= */
uint8_t BMI160::setGyroConfig(uint8_t config, uint8_t range) {
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
 8008730:	4613      	mov	r3, r2
 8008732:	70bb      	strb	r3, [r7, #2]

	this->writeRegister(BMI160_REG_GYRO_RANGE, range);
 8008734:	78bb      	ldrb	r3, [r7, #2]
 8008736:	461a      	mov	r2, r3
 8008738:	2143      	movs	r1, #67	; 0x43
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff f986 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_GYRO_CONFIG, config);
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	461a      	mov	r2, r3
 8008744:	2142      	movs	r1, #66	; 0x42
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff f980 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 800874c:	2301      	movs	r3, #1
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <_ZN6BMI16012setAccConfigEhh>:

/* ============================================================================= */
uint8_t BMI160::setAccConfig(uint8_t config, uint8_t range) {
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
 8008762:	4613      	mov	r3, r2
 8008764:	70bb      	strb	r3, [r7, #2]
	this->writeRegister(BMI160_REG_ACCEL_CONFIG, config);
 8008766:	78fb      	ldrb	r3, [r7, #3]
 8008768:	461a      	mov	r2, r3
 800876a:	2140      	movs	r1, #64	; 0x40
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff f96d 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_ACCEL_RANGE, range);
 8008772:	78bb      	ldrb	r3, [r7, #2]
 8008774:	461a      	mov	r2, r3
 8008776:	2141      	movs	r1, #65	; 0x41
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff f967 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 800877e:	2301      	movs	r3, #1
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>:

/* ============================================================================= */
uint8_t BMI160::setPowerMode(BMI160_PowerMode mode) {
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
	if (mode == BMI160_Power_Normal) {
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d113      	bne.n	80087c2 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x3a>
		delay(100);
 800879a:	2064      	movs	r0, #100	; 0x64
 800879c:	f7ff f8d6 	bl	800794c <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_NORMAL_MODE);
 80087a0:	2215      	movs	r2, #21
 80087a2:	217e      	movs	r1, #126	; 0x7e
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7ff f951 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 80087aa:	20fa      	movs	r0, #250	; 0xfa
 80087ac:	f7ff f8ce 	bl	800794c <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_NORMAL_MODE);
 80087b0:	2211      	movs	r2, #17
 80087b2:	217e      	movs	r1, #126	; 0x7e
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff f949 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 80087ba:	20fa      	movs	r0, #250	; 0xfa
 80087bc:	f7ff f8c6 	bl	800794c <_Z5delaym>
 80087c0:	e012      	b.n	80087e8 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
	} else if (mode == BMI160_Power_Suspend) {
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d10f      	bne.n	80087e8 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_SUSPEND_MODE);
 80087c8:	2210      	movs	r2, #16
 80087ca:	217e      	movs	r1, #126	; 0x7e
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff f93d 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 80087d2:	2064      	movs	r0, #100	; 0x64
 80087d4:	f7ff f8ba 	bl	800794c <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_SUSPEND_MODE);
 80087d8:	2214      	movs	r2, #20
 80087da:	217e      	movs	r1, #126	; 0x7e
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff f935 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 80087e2:	2064      	movs	r0, #100	; 0x64
 80087e4:	f7ff f8b2 	bl	800794c <_Z5delaym>
	}
	return CORE_OK;
 80087e8:	2301      	movs	r3, #1
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <_ZN6BMI1605resetEv>:
	this->writeRegister(0x77, offset_register);

}

/* ============================================================================= */
void BMI160::reset() {
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
	this->writeRegister(BMI160_REG_COMMAND, 0xB6);
 80087fa:	22b6      	movs	r2, #182	; 0xb6
 80087fc:	217e      	movs	r1, #126	; 0x7e
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff f924 	bl	8007a4c <_ZN6BMI16013writeRegisterEhh>
	delay(10);
 8008804:	200a      	movs	r0, #10
 8008806:	f7ff f8a1 	bl	800794c <_Z5delaym>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <_Z18bytearray_to_int16Ph>:
uint16_t bytearray_to_uint16(uint8_t *bytearray) {
	uint16_t out = bytearray[1] << 8 | bytearray[0];
	return out;
}

int16_t bytearray_to_int16(uint8_t *bytearray) {
 8008812:	b480      	push	{r7}
 8008814:	b085      	sub	sp, #20
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
	int16_t out = bytearray[1] << 8 | bytearray[0];
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3301      	adds	r3, #1
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	021b      	lsls	r3, r3, #8
 8008822:	b21a      	sxth	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	b21b      	sxth	r3, r3
 800882a:	4313      	orrs	r3, r2
 800882c:	81fb      	strh	r3, [r7, #14]
	return out;
 800882e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <_Z17core_ErrorHandleri>:
 */


#include "core_errors.h"

void core_ErrorHandler(int error_id) {
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
	while(1);
 8008846:	e7fe      	b.n	8008846 <_Z17core_ErrorHandleri+0x8>

08008848 <_Z41__static_initialization_and_destruction_0ii>:
	case GPIO_PIN_15: {
		callbacks[15].call();
		break;
	}
	}
}
 8008848:	b5b0      	push	{r4, r5, r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d10f      	bne.n	8008878 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800885e:	4293      	cmp	r3, r2
 8008860:	d10a      	bne.n	8008878 <_Z41__static_initialization_and_destruction_0ii+0x30>
static core_utils_Callback<void, void> callbacks[16];
 8008862:	4b07      	ldr	r3, [pc, #28]	; (8008880 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8008864:	240f      	movs	r4, #15
 8008866:	461d      	mov	r5, r3
 8008868:	e004      	b.n	8008874 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800886a:	4628      	mov	r0, r5
 800886c:	f7fe ffd8 	bl	8007820 <_ZN19core_utils_CallbackIvvEC1Ev>
 8008870:	3520      	adds	r5, #32
 8008872:	3c01      	subs	r4, #1
 8008874:	2c00      	cmp	r4, #0
 8008876:	daf8      	bge.n	800886a <_Z41__static_initialization_and_destruction_0ii+0x22>
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bdb0      	pop	{r4, r5, r7, pc}
 8008880:	20001c24 	.word	0x20001c24

08008884 <_GLOBAL__sub_I__ZN15core_utils_GPIOC2EP12GPIO_TypeDeft>:
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
 8008888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800888c:	2001      	movs	r0, #1
 800888e:	f7ff ffdb 	bl	8008848 <_Z41__static_initialization_and_destruction_0ii>
 8008892:	bd80      	pop	{r7, pc}

08008894 <_Z6millisv>:

#include "../core_includes.h"

#include "elapsedMillis.h"

uint32_t millis() {
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
#if CORE_CONFIG_USE_RTOS
	return osKernelGetTickCount();
 8008898:	f7fc f9ae 	bl	8004bf8 <osKernelGetTickCount>
 800889c:	4603      	mov	r3, r0
#else
	return HAL_GetTick();
#endif
}
 800889e:	4618      	mov	r0, r3
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <memset>:
 80088a2:	4402      	add	r2, r0
 80088a4:	4603      	mov	r3, r0
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d100      	bne.n	80088ac <memset+0xa>
 80088aa:	4770      	bx	lr
 80088ac:	f803 1b01 	strb.w	r1, [r3], #1
 80088b0:	e7f9      	b.n	80088a6 <memset+0x4>
	...

080088b4 <_reclaim_reent>:
 80088b4:	4b29      	ldr	r3, [pc, #164]	; (800895c <_reclaim_reent+0xa8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4283      	cmp	r3, r0
 80088ba:	b570      	push	{r4, r5, r6, lr}
 80088bc:	4604      	mov	r4, r0
 80088be:	d04b      	beq.n	8008958 <_reclaim_reent+0xa4>
 80088c0:	69c3      	ldr	r3, [r0, #28]
 80088c2:	b143      	cbz	r3, 80088d6 <_reclaim_reent+0x22>
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d144      	bne.n	8008954 <_reclaim_reent+0xa0>
 80088ca:	69e3      	ldr	r3, [r4, #28]
 80088cc:	6819      	ldr	r1, [r3, #0]
 80088ce:	b111      	cbz	r1, 80088d6 <_reclaim_reent+0x22>
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 f879 	bl	80089c8 <_free_r>
 80088d6:	6961      	ldr	r1, [r4, #20]
 80088d8:	b111      	cbz	r1, 80088e0 <_reclaim_reent+0x2c>
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 f874 	bl	80089c8 <_free_r>
 80088e0:	69e1      	ldr	r1, [r4, #28]
 80088e2:	b111      	cbz	r1, 80088ea <_reclaim_reent+0x36>
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 f86f 	bl	80089c8 <_free_r>
 80088ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80088ec:	b111      	cbz	r1, 80088f4 <_reclaim_reent+0x40>
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 f86a 	bl	80089c8 <_free_r>
 80088f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f6:	b111      	cbz	r1, 80088fe <_reclaim_reent+0x4a>
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 f865 	bl	80089c8 <_free_r>
 80088fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008900:	b111      	cbz	r1, 8008908 <_reclaim_reent+0x54>
 8008902:	4620      	mov	r0, r4
 8008904:	f000 f860 	bl	80089c8 <_free_r>
 8008908:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800890a:	b111      	cbz	r1, 8008912 <_reclaim_reent+0x5e>
 800890c:	4620      	mov	r0, r4
 800890e:	f000 f85b 	bl	80089c8 <_free_r>
 8008912:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008914:	b111      	cbz	r1, 800891c <_reclaim_reent+0x68>
 8008916:	4620      	mov	r0, r4
 8008918:	f000 f856 	bl	80089c8 <_free_r>
 800891c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800891e:	b111      	cbz	r1, 8008926 <_reclaim_reent+0x72>
 8008920:	4620      	mov	r0, r4
 8008922:	f000 f851 	bl	80089c8 <_free_r>
 8008926:	6a23      	ldr	r3, [r4, #32]
 8008928:	b1b3      	cbz	r3, 8008958 <_reclaim_reent+0xa4>
 800892a:	4620      	mov	r0, r4
 800892c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008930:	4718      	bx	r3
 8008932:	5949      	ldr	r1, [r1, r5]
 8008934:	b941      	cbnz	r1, 8008948 <_reclaim_reent+0x94>
 8008936:	3504      	adds	r5, #4
 8008938:	69e3      	ldr	r3, [r4, #28]
 800893a:	2d80      	cmp	r5, #128	; 0x80
 800893c:	68d9      	ldr	r1, [r3, #12]
 800893e:	d1f8      	bne.n	8008932 <_reclaim_reent+0x7e>
 8008940:	4620      	mov	r0, r4
 8008942:	f000 f841 	bl	80089c8 <_free_r>
 8008946:	e7c0      	b.n	80088ca <_reclaim_reent+0x16>
 8008948:	680e      	ldr	r6, [r1, #0]
 800894a:	4620      	mov	r0, r4
 800894c:	f000 f83c 	bl	80089c8 <_free_r>
 8008950:	4631      	mov	r1, r6
 8008952:	e7ef      	b.n	8008934 <_reclaim_reent+0x80>
 8008954:	2500      	movs	r5, #0
 8008956:	e7ef      	b.n	8008938 <_reclaim_reent+0x84>
 8008958:	bd70      	pop	{r4, r5, r6, pc}
 800895a:	bf00      	nop
 800895c:	2000007c 	.word	0x2000007c

08008960 <__libc_init_array>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	4d0d      	ldr	r5, [pc, #52]	; (8008998 <__libc_init_array+0x38>)
 8008964:	4c0d      	ldr	r4, [pc, #52]	; (800899c <__libc_init_array+0x3c>)
 8008966:	1b64      	subs	r4, r4, r5
 8008968:	10a4      	asrs	r4, r4, #2
 800896a:	2600      	movs	r6, #0
 800896c:	42a6      	cmp	r6, r4
 800896e:	d109      	bne.n	8008984 <__libc_init_array+0x24>
 8008970:	4d0b      	ldr	r5, [pc, #44]	; (80089a0 <__libc_init_array+0x40>)
 8008972:	4c0c      	ldr	r4, [pc, #48]	; (80089a4 <__libc_init_array+0x44>)
 8008974:	f000 f880 	bl	8008a78 <_init>
 8008978:	1b64      	subs	r4, r4, r5
 800897a:	10a4      	asrs	r4, r4, #2
 800897c:	2600      	movs	r6, #0
 800897e:	42a6      	cmp	r6, r4
 8008980:	d105      	bne.n	800898e <__libc_init_array+0x2e>
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	f855 3b04 	ldr.w	r3, [r5], #4
 8008988:	4798      	blx	r3
 800898a:	3601      	adds	r6, #1
 800898c:	e7ee      	b.n	800896c <__libc_init_array+0xc>
 800898e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008992:	4798      	blx	r3
 8008994:	3601      	adds	r6, #1
 8008996:	e7f2      	b.n	800897e <__libc_init_array+0x1e>
 8008998:	08008ba8 	.word	0x08008ba8
 800899c:	08008ba8 	.word	0x08008ba8
 80089a0:	08008ba8 	.word	0x08008ba8
 80089a4:	08008bb8 	.word	0x08008bb8

080089a8 <__retarget_lock_acquire_recursive>:
 80089a8:	4770      	bx	lr

080089aa <__retarget_lock_release_recursive>:
 80089aa:	4770      	bx	lr

080089ac <memcpy>:
 80089ac:	440a      	add	r2, r1
 80089ae:	4291      	cmp	r1, r2
 80089b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089b4:	d100      	bne.n	80089b8 <memcpy+0xc>
 80089b6:	4770      	bx	lr
 80089b8:	b510      	push	{r4, lr}
 80089ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089c2:	4291      	cmp	r1, r2
 80089c4:	d1f9      	bne.n	80089ba <memcpy+0xe>
 80089c6:	bd10      	pop	{r4, pc}

080089c8 <_free_r>:
 80089c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ca:	2900      	cmp	r1, #0
 80089cc:	d044      	beq.n	8008a58 <_free_r+0x90>
 80089ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d2:	9001      	str	r0, [sp, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f1a1 0404 	sub.w	r4, r1, #4
 80089da:	bfb8      	it	lt
 80089dc:	18e4      	addlt	r4, r4, r3
 80089de:	f000 f83f 	bl	8008a60 <__malloc_lock>
 80089e2:	4a1e      	ldr	r2, [pc, #120]	; (8008a5c <_free_r+0x94>)
 80089e4:	9801      	ldr	r0, [sp, #4]
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	b933      	cbnz	r3, 80089f8 <_free_r+0x30>
 80089ea:	6063      	str	r3, [r4, #4]
 80089ec:	6014      	str	r4, [r2, #0]
 80089ee:	b003      	add	sp, #12
 80089f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089f4:	f000 b83a 	b.w	8008a6c <__malloc_unlock>
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d908      	bls.n	8008a0e <_free_r+0x46>
 80089fc:	6825      	ldr	r5, [r4, #0]
 80089fe:	1961      	adds	r1, r4, r5
 8008a00:	428b      	cmp	r3, r1
 8008a02:	bf01      	itttt	eq
 8008a04:	6819      	ldreq	r1, [r3, #0]
 8008a06:	685b      	ldreq	r3, [r3, #4]
 8008a08:	1949      	addeq	r1, r1, r5
 8008a0a:	6021      	streq	r1, [r4, #0]
 8008a0c:	e7ed      	b.n	80089ea <_free_r+0x22>
 8008a0e:	461a      	mov	r2, r3
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	b10b      	cbz	r3, 8008a18 <_free_r+0x50>
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	d9fa      	bls.n	8008a0e <_free_r+0x46>
 8008a18:	6811      	ldr	r1, [r2, #0]
 8008a1a:	1855      	adds	r5, r2, r1
 8008a1c:	42a5      	cmp	r5, r4
 8008a1e:	d10b      	bne.n	8008a38 <_free_r+0x70>
 8008a20:	6824      	ldr	r4, [r4, #0]
 8008a22:	4421      	add	r1, r4
 8008a24:	1854      	adds	r4, r2, r1
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	6011      	str	r1, [r2, #0]
 8008a2a:	d1e0      	bne.n	80089ee <_free_r+0x26>
 8008a2c:	681c      	ldr	r4, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	6053      	str	r3, [r2, #4]
 8008a32:	440c      	add	r4, r1
 8008a34:	6014      	str	r4, [r2, #0]
 8008a36:	e7da      	b.n	80089ee <_free_r+0x26>
 8008a38:	d902      	bls.n	8008a40 <_free_r+0x78>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	6003      	str	r3, [r0, #0]
 8008a3e:	e7d6      	b.n	80089ee <_free_r+0x26>
 8008a40:	6825      	ldr	r5, [r4, #0]
 8008a42:	1961      	adds	r1, r4, r5
 8008a44:	428b      	cmp	r3, r1
 8008a46:	bf04      	itt	eq
 8008a48:	6819      	ldreq	r1, [r3, #0]
 8008a4a:	685b      	ldreq	r3, [r3, #4]
 8008a4c:	6063      	str	r3, [r4, #4]
 8008a4e:	bf04      	itt	eq
 8008a50:	1949      	addeq	r1, r1, r5
 8008a52:	6021      	streq	r1, [r4, #0]
 8008a54:	6054      	str	r4, [r2, #4]
 8008a56:	e7ca      	b.n	80089ee <_free_r+0x26>
 8008a58:	b003      	add	sp, #12
 8008a5a:	bd30      	pop	{r4, r5, pc}
 8008a5c:	20001f60 	.word	0x20001f60

08008a60 <__malloc_lock>:
 8008a60:	4801      	ldr	r0, [pc, #4]	; (8008a68 <__malloc_lock+0x8>)
 8008a62:	f7ff bfa1 	b.w	80089a8 <__retarget_lock_acquire_recursive>
 8008a66:	bf00      	nop
 8008a68:	20001f5c 	.word	0x20001f5c

08008a6c <__malloc_unlock>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <__malloc_unlock+0x8>)
 8008a6e:	f7ff bf9c 	b.w	80089aa <__retarget_lock_release_recursive>
 8008a72:	bf00      	nop
 8008a74:	20001f5c 	.word	0x20001f5c

08008a78 <_init>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr

08008a84 <_fini>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr
